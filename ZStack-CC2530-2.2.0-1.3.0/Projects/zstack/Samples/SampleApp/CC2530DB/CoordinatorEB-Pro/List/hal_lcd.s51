///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            23/Dec/2016  12:23:40 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\ /
//                          hal\target\CC2530EB\hal_lcd.c                     /
//    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø        /
//                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wCoord.cfg" (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Co /
//                          mponents\hal\target\CC2530EB\hal_lcd.c" -D        /
//                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC   /
//                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D          /
//                          coordinator -lC "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbe /
//                          e\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë    /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro /
//                          \List\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª /
//                          ¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë        /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro /
//                          \List\" --diag_suppress Pe001,Pa010 -o            /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro /
//                          \Obj\" -e --require_prototypes --debug            /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I    /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI /
//                          2530DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª /
//                          ¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë        /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgb /
//                          ee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë   /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\TARGET\CC2530EB\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\MCU\CCSOC\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\INCLUDE\" -I                        /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\NWK\" -I                  /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SEC\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SAPI\" -I                          /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SYS\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\ZDO\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\ZMAC\" -I                       /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SADDR\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SDATA\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\HIGH_LEVEL\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I     /
//                          "D:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\" -I "D:\Program Files     /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.4\8051\INC\CLIB\" -Ohz                          /
//    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro /
//                          \List\hal_lcd.s51                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I

        PUBLIC ??ClearScreen?relay
        FUNCTION ??ClearScreen?relay,0203H
        PUBLIC ??HalLcdClearLine?relay
        FUNCTION ??HalLcdClearLine?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??InitDisplay?relay
        FUNCTION ??InitDisplay?relay,0203H
        PUBLIC ??Print6?relay
        FUNCTION ??Print6?relay,0203H
        PUBLIC ??Print8?relay
        FUNCTION ??Print8?relay,0203H
        PUBLIC ??Print?relay
        FUNCTION ??Print?relay,0203H
        PUBLIC ??PrintCh8?relay
        FUNCTION ??PrintCh8?relay,0203H
        PUBLIC ??Printn8?relay
        FUNCTION ??Printn8?relay,0203H
        PUBLIC ??SetContrast?relay
        FUNCTION ??SetContrast?relay,0203H
        PUBLIC ??SetRamAddr?relay
        FUNCTION ??SetRamAddr?relay,0203H
        PUBLIC ??Write595?relay
        FUNCTION ??Write595?relay,0203H
        PUBLIC ??WriteLCD?relay
        FUNCTION ??WriteLCD?relay,0203H
        PUBLIC ??contrastctrl?relay
        FUNCTION ??contrastctrl?relay,0203H
        PUBLIC ??delay1?relay
        FUNCTION ??delay1?relay,0203H
        PUBLIC ??delay_us?relay
        FUNCTION ??delay_us?relay,0203H
        PUBLIC ??upLcd?relay
        FUNCTION ??upLcd?relay,0203H
        PUBLIC ClearScreen
        FUNCTION ClearScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ContrastValue
        PUBLIC HalLcdClearLine
        FUNCTION HalLcdClearLine,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC InitDisplay
        FUNCTION InitDisplay,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBLIC Print
        FUNCTION Print,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC Print6
        FUNCTION Print6,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Print8
        FUNCTION Print8,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC PrintCh8
        FUNCTION PrintCh8,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC Printn8
        FUNCTION Printn8,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SetContrast
        FUNCTION SetContrast,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetRamAddr
        FUNCTION SetRamAddr,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Write595
        FUNCTION Write595,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteLCD
        FUNCTION WriteLCD,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_a
        PUBLIC contrastctrl
        FUNCTION contrastctrl,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC delay1
        FUNCTION delay1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC delay_us
        FUNCTION delay_us,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC upLcd
        FUNCTION upLcd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memcpy         SYMBOL "osal_memcpy"
strlen              SYMBOL "strlen"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??strlen?relay      SYMBOL "?relay", strlen
ClearScreen         SYMBOL "ClearScreen"
??ClearScreen?relay SYMBOL "?relay", ClearScreen
HalLcdClearLine     SYMBOL "HalLcdClearLine"
??HalLcdClearLine?relay SYMBOL "?relay", HalLcdClearLine
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
InitDisplay         SYMBOL "InitDisplay"
??InitDisplay?relay SYMBOL "?relay", InitDisplay
Print6              SYMBOL "Print6"
??Print6?relay      SYMBOL "?relay", Print6
Print8              SYMBOL "Print8"
??Print8?relay      SYMBOL "?relay", Print8
Print               SYMBOL "Print"
??Print?relay       SYMBOL "?relay", Print
PrintCh8            SYMBOL "PrintCh8"
??PrintCh8?relay    SYMBOL "?relay", PrintCh8
Printn8             SYMBOL "Printn8"
??Printn8?relay     SYMBOL "?relay", Printn8
SetContrast         SYMBOL "SetContrast"
??SetContrast?relay SYMBOL "?relay", SetContrast
SetRamAddr          SYMBOL "SetRamAddr"
??SetRamAddr?relay  SYMBOL "?relay", SetRamAddr
Write595            SYMBOL "Write595"
??Write595?relay    SYMBOL "?relay", Write595
WriteLCD            SYMBOL "WriteLCD"
??WriteLCD?relay    SYMBOL "?relay", WriteLCD
contrastctrl        SYMBOL "contrastctrl"
??contrastctrl?relay SYMBOL "?relay", contrastctrl
delay1              SYMBOL "delay1"
??delay1?relay      SYMBOL "?relay", delay1
delay_us            SYMBOL "delay_us"
??delay_us?relay    SYMBOL "?relay", delay_us
upLcd               SYMBOL "upLcd"
??upLcd?relay       SYMBOL "?relay", upLcd

        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN Font8X8
        EXTERN FontSystem6x8

// J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_lcd.c
//    1 #include "LCD128_64.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//    2 #include "Font.h"
//    3 #include "hal_lcd.h"
//    4 #include "OSAL.h"
//    5 #include "string.h"
//    6 
//    7 /****************************************************
//    8 * B) Command Table per device *
//    9 ****************************************************/
//   10 #define 	DisplayOff 	0xAE
//   11 #define 	DisplayOn 	0xAF
//   12 #define 	DisplayStart 	0x40
//   13 #define 	PageAddr 	0xB0
//   14 #define 	ColAddrHi 	0x10
//   15 #define 	ColAddrLo 	0x00
//   16 #define 	SegRemapOff 	0xA0
//   17 #define 	SegRemapOn 	0xA1
//   18 #define 	NormalDisp 	0xA6
//   19 #define 	ReverseDisp 	0xA7
//   20 #define 	ExitEntireD 	0xA4
//   21 #define 	EntEntireD 	0xA5
//   22 #define 	EnterRMW 	0xE0
//   23 #define 	ExitRMW 	0xEE
//   24 #define 	SWRest 		0xE2
//   25 #define 	ComRemapOff 	0xC0
//   26 #define 	ComRemapOn 	0xC8
//   27 #define 	PwrCtrlReg 	0x28
//   28 #define 	OPampBuffer 	0x01
//   29 #define 	IntReg 		0x02
//   30 #define 	IntVolBstr 	0x04
//   31 #define 	IntRegRatio 	0x20
//   32 #define 	ContCtrlReg 	0x81
//   33 #define 	CmdMuxRatio 	0x48
//   34 #define 	CmdBiasRatio 	0x50
//   35 #define 	DispOffset 	0x44
//   36 #define 	IconModeOn 	0xA3
//   37 #define 	IconModeOff 	0xA2
//   38 #define 	NlineInver 	0x4C
//   39 #define 	DCDCconver 	0x64
//   40 #define 	PowersavStandby 0xA8
//   41 #define 	PowersavSleep 	0xA9
//   42 #define 	PowersavOff 	0xE1
//   43 #define 	InterOsc 	0xAB
//   44 #define 	Device SSD1821 			/* device under demo */
//   45 #define 	ColNo 		132 		/* number of Column/Seg on LCD glass*/
//   46 #define 	RowNo 		64		/* number of Row/Com/Mux */
//   47 #define 	PS 		1 		/* fixed to Parallel mode */
//   48 #define 	PageNo 		10 		/* Total no of RAM pages */
//   49 #define 	IconPage 	10 		/* Icon Page number */
//   50 #define 	All0 		6 		/* 3 for all 0, 4 for all 1 */
//   51 #define 	All1 		4
//   52 #define 	iIntRegValue 	1 		/*Internal Regulator Resistor Ratio Value */
//   53 #define 	iContCtrlRegValue 16 		/* Contrast Control Register Value */
//   54 #define 	iIntRegValuea 	20 		/*Internal Regulator Resistor Ratio Value */
//   55 #define 	iContCtrlRegValuea 16 		/* Contrast Control Register Value */
//   56 #define 	iIntRegValueb 	1 		/*Internal Regulator Resistor Ratio Value */
//   57 #define 	iContCtrlRegValueb 16 		/* Contrast Control Register Value */
//   58 #define 	MSGNo 		16
//   59 #define 	MSGLength 	22
//   60 #define 	SSLNameNo 	4
//   61 #define 	DevicePg 	0 		//RAM page for showing device name
//   62 #define 	FeaturePg 	1 		//RAM page for showing feature
//   63 #define 	GRAPHICNo 	13
//   64 #define 	xlogo 		38
//   65 #define 	ylogo 		5
//   66 #define 	xsolomon 	91
//   67 #define 	ysolomon 	2
//   68 #define 	xsystech 	81
//   69 #define 	ysystech 	2
//   70 #define 	xlimited 	70
//   71 #define 	ylimited 	2
//   72 #define 	xcc 		16
//   73 #define 	ycc 		2
//   74 #define 	xpageq 		128
//   75 #define 	ypageq 		4
//   76 #define 	horizonal 	0
//   77 #define 	d_time 		60
//   78 ////////////////////////////////////////////////////////////////////////////////////////////
//   79 
//   80 void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn);
//   81 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   82 uint8 ContrastValue =90;
ContrastValue:
        DS 1
        REQUIRE `?<Initializer for ContrastValue>`
        REQUIRE __INIT_XDATA_I
//   83 void WriteLCD(uint8 fs, uint8 da);
//   84 void Write595(uint8 dat);
//   85 void delay_us(uint16 s);
//   86 void delay1(uint8 jj);
//   87 void contrastctrl(uint8 start, uint8 stop);
//   88 void HalLcdInit(void);
//   89 void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn);
//   90 void upLcd( char *ptr,uint8 op );
//   91 void HalLcdClearLine( uint8 line );
//   92 
//   93 
//   94 
//   95 
//   96 
//   97 
//   98 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 void delay1(uint8 jj)
delay1:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delay1
//  100 {
        ; Saved register size: 0
        ; Auto size: 0
//  101 	uint8 i;
//  102 	for(i=0; i<jj; i++);
        CLR     A
        SJMP    ??delay1_0
??delay1_1:
        INC     A
??delay1_0:
        CLR     C
        SUBB    A,R1
        JC      ??delay1_1
//  103 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  104 
//  105 
//  106 
//  107 
//  108 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 void delay_us(uint16 s)
delay_us:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_us
//  110 {
        ; Saved register size: 0
        ; Auto size: 0
//  111 	uint16 i;
//  112 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_17
??delay_us_0:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_0
//  113 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_18
??delay_us_1:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_1
//  114         for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_19
??delay_us_2:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_19:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_2
//  115 	for(i=0; i<s; i++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_20
??delay_us_3:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_20:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??delay_us_3
//  116 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_18
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_19
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_20
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  117 
//  118 
//  119 //******************************************************************************
//  120 //º¯ÊýÃû£ºvoid Write595(uint8 dat)
//  121 //ÊäÈë£ºÊý¾Ý
//  122 //Êä³ö£ºÎÞ
//  123 //¹¦ÄÜÃèÊö£º595Ð´Êý¾Ý£¬Ò»´ÎÐ´Èë8Î»
//  124 //******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void Write595(uint8 dat)
Write595:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Write595
//  126 {
        ; Saved register size: 0
        ; Auto size: 0
//  127 	
//  128 	uint8 ii;		
//  129 			
//  130 	for(ii = 0 ; ii < 8; ii++)
        MOV     R2,#0x8
//  131 	{
//  132 		if(dat & 0x80) 	LCD_595_DAT = 1;
??Write595_0:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??Write595_1
        SETB    0xa0.0
        SJMP    ??Write595_2
//  133 		else		LCD_595_DAT = 0;
??Write595_1:
        CLR     0xa0.0
//  134 		
//  135 		dat <<= 1;
??Write595_2:
        CLR     C
        RLC     A
        MOV     R1,A
//  136 		LCD_595_CK = 1;	
        SETB    0x90.5
//  137 		LCD_595_CK = 0;
        CLR     0x90.5
//  138 	}
        DEC     R2
        MOV     A,R2
        JNZ     ??Write595_0
//  139 	LCD_595_LD = 1;
        SETB    0x90.3
//  140 	LCD_595_LD = 0;
        CLR     0x90.3
//  141 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1
        REQUIRE _A_P2
//  142 
//  143 
//  144 
//  145 
//  146 //*****************************************************************************
//  147 //*****************************************************************************
//  148 //º¯ÊýÃû£ºvoid delay(unsigned int n)
//  149 //¹¦ÄÜÃèÊö£ºÆÕÍ¨Í¢Ê±º¯Êý
//  150 //*****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  151 void WriteLCD(uint8 fs, uint8 da)
WriteLCD:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function WriteLCD
//  152 {
        FUNCALL WriteLCD, delay1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteLCD, Write595
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WriteLCD, delay1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  153 	delay1(2);
        ; Setup parameters for call to function delay1
        MOV     R1,#0x2
        LCALL   ??delay1?relay
//  154 	LCD_CS1 = 0;
        CLR     0x90.4
//  155 	LCD_RW = 0;			//Ð´²Ù×÷
        CLR     0x80.1
//  156 	//delay1(0);	
//  157 
//  158 	if(fs){
        MOV     A,R7
        JZ      ??WriteLCD_0
//  159 		LCD_RS = 1;	
        SETB    0x90.7
        SJMP    ??WriteLCD_1
//  160 	}
//  161 	else{
//  162 		LCD_RS = 0;
??WriteLCD_0:
        CLR     0x90.7
//  163 	}
//  164        // delay1(0);
//  165 
//  166         Write595(da);
??WriteLCD_1:
        ; Setup parameters for call to function Write595
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Write595?relay
//  167 	LCD_E = 1;// = 1;
        SETB    0x90.6
//  168         delay1(2);
        ; Setup parameters for call to function delay1
        MOV     R1,#0x2
        LCALL   ??delay1?relay
//  169 	LCD_E = 0;// = 0;					
        CLR     0x90.6
//  170 	//delay1(0);
//  171 	LCD_CS1 = 1;
        SETB    0x90.4
//  172 }
        LJMP    ??Subroutine16_0 & 0xFFFF
        CFI EndBlock cfiBlock8
        REQUIRE _A_P0
        REQUIRE _A_P1
//  173 /*
//  174 
//  175 uint8 ReadLCD(uint8 fs)
//  176 {
//  177 	uint8 temp = 0;
//  178 	LCD_CS1 = 0;
//  179 	NOP;
//  180 	NOP;
//  181 	NOP;
//  182 	NOP;
//  183 	do{						
//  184 		LCD_RW = 1;
//  185 		LCD_RS = 0;
//  186 		LCD_E = 1;
//  187 		NOP;
//  188 		NOP;							
//  189 		temp = P1 & 0x80;			
//  190 		LCD_E = 0;			
//  191 
//  192 	}while(temp != 0);	
//  193 
//  194 	if(fs){
//  195 		LCD_RS = 1;	
//  196 	}
//  197 	else{
//  198 		LCD_RS = 0;
//  199 	}
//  200 	
//  201 	LCD_E = 1;
//  202 	NOP;	
//  203 	NOP;
//  204 	NOP;
//  205 	NOP;	
//  206 	temp = P1;	
//  207 	LCD_E = 0;	
//  208 	LCD_CS1 = 1;
//  209 	return(temp);
//  210 }
//  211 
//  212 
//  213 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void SetRamAddr(uint8 x ,uint8 y)
SetRamAddr:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SetRamAddr
//  215 {
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  216 	uint8 temp;
//  217 	
//  218 	temp = 0x0f & x;
//  219 	WriteLCD(COMMAND , PageAddr|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0xb0
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  220 
//  221 	temp = 0x0f & (y >> 4);
//  222 	WriteLCD(COMMAND , ColAddrHi|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R7
        SWAP    A
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  223 	temp = 0x0f & y;
//  224 	WriteLCD(COMMAND , ColAddrLo|temp);
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock9
//  225 }
//  226 
//  227 
//  228 /*******************************************************************************
//  229 //º¯ÊýÃû£ºvoid SetContrast(uint8 Gain, uint8 Step)
//  230 //¹¦ÄÜ£ºlcd¶Ô±È¶ÈÉè¶¨
//  231 //ÊäÈë£ºPage-Ò³£¬Col-ÁÐ
//  232 //Êä³ö£ºÎÞ
//  233 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  234 void SetContrast(uint8 Gain, uint8 Step)
SetContrast:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SetContrast
//  235 {
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetContrast, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  236 	WriteLCD(COMMAND , IntRegRatio | (0x0f & Gain)); 	//Éè¶¨ÄÚ²¿µç×è
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0x20
        MOV     R2,A
        LCALL   ?Subroutine8 & 0xFFFF
//  237 	WriteLCD(COMMAND , ContCtrlReg); 			//Éè¶¨ÄÚ²¿¶Ô±È¿ØÖÆÆ÷
//  238 	WriteLCD(COMMAND , 0x3f & Step);
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function WriteLCD
        MOV     A,#0x3f
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock10
//  239 }
//  240 
//  241 
//  242 
//  243 /*******************************************************************************
//  244 //º¯ÊýÃû£ºvoid InitDisplay(void)
//  245 //¹¦ÄÜ£ºlcdÉè¶¨ÎªÕý³£ÏÔÊ¾×´Ì¬
//  246 //ÊäÈë£ºÎÞ
//  247 //Êä³ö£ºÎÞ
//  248 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  249 void InitDisplay(void)
InitDisplay:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function InitDisplay
//  250 {
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, SetContrast
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  251 	WriteLCD(COMMAND , DisplayOff);			//¹ØÏÔÊ¾
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x52
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  252 	WriteLCD(COMMAND , SegRemapOn);    			//ks0713/ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x5f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  253 	WriteLCD(COMMAND , ComRemapOn);    			//ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x38
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  254 	SetContrast(iIntRegValue, iContCtrlRegValue); 	//Éè¶¨È±Ê¡¶Ô±È¶È
        ; Setup parameters for call to function SetContrast
        MOV     R2,#0x10
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  255 	WriteLCD(COMMAND , PwrCtrlReg | IntVolBstr | IntReg | OPampBuffer); //turn on booster, regulator & divider
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x2f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
//  256 	WriteLCD(COMMAND , DisplayOn);				//¿ªÏÔÊ¾
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x51
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        CFI EndBlock cfiBlock11
//  257 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  258 
//  259 
//  260 /*******************************************************************************
//  261 //º¯ÊýÃû£ºvoid contrastctrl(uint8 start,stop)
//  262 //¹¦ÄÜ£ºlcd¶Ô±È¶Èµ÷Õû
//  263 //ÊäÈë£ºÎÞ
//  264 //Êä³ö£ºÎÞ
//  265 ********************************************************************************/
//  266 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 void contrastctrl(uint8 start, uint8 stop)
contrastctrl:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function contrastctrl
//  268 {
        FUNCALL contrastctrl, SetContrast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, SetContrast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL contrastctrl, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 0,R2
//  269 	uint8 i;
//  270 	if (start < stop)
        CLR     C
        SUBB    A,?V0 + 0
        MOV     A,R7
        MOV     R6,A
        JNC     ??contrastctrl_0
//  271 	{
//  272 		for (i=start; i<stop; i+=1)
//  273 		{
//  274 			SetContrast(iIntRegValue, i); //slowly turn on display
??contrastctrl_1:
        ; Setup parameters for call to function SetContrast
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  275 			delay_us(80);
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x50
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  276 		}
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,?V0 + 0
        JNC     ??contrastctrl_2
        SJMP    ??contrastctrl_1
//  277 	}
//  278 	else
//  279 	{
//  280 		for (i=start; i>stop; i-=1)
//  281 		{
//  282 			SetContrast(iIntRegValue, i); //slowly turn off display
??contrastctrl_3:
        ; Setup parameters for call to function SetContrast
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??SetContrast?relay
//  283 			delay_us(120);
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  284 		}
        DEC     R6
??contrastctrl_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R6
        JC      ??contrastctrl_3
//  285 	}
//  286 }
??contrastctrl_2:
        SJMP    ??Subroutine16_0
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        ANL     A,R7
        MOV     R2,A
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  287 
//  288 
//  289 
//  290 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void ClearScreen(void)
ClearScreen:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ClearScreen
//  292 {
        FUNCALL ClearScreen, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ClearScreen, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  293  	uint8 x,y;
//  294 	for(x = 0;x < 8 ;x++){
        MOV     R6,#0x0
//  295           SetRamAddr(x , 0);
??ClearScreen_0:
        ; Setup parameters for call to function SetRamAddr
        MOV     R2,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SetRamAddr?relay
//  296 	  	for(y = 0 ; y < 128 ; y++){	  		
        MOV     R7,#-0x80
//  297 	  					
//  298 			WriteLCD(DATA , 0x00);
??ClearScreen_1:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??WriteLCD?relay
//  299 		}		
        DEC     R7
        MOV     A,R7
        JNZ     ??ClearScreen_1
//  300 	}
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??ClearScreen_0
//  301 }
        SJMP    ??Subroutine16_0
        CFI EndBlock cfiBlock16
//  302 
//  303 
//  304 
//  305 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function HalLcdInit
//  307 {	
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, SetContrast
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdInit, ClearScreen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  308         delay_us(10000);
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ??delay_us?relay
//  309         P1DIR |= 0xFC;
        ORL     0xfe,#0xfc
        MOV     A,0xfe
//  310         P2DIR |= 0x01;
        ORL     0xff,#0x1
//  311         P0DIR |= 0x02;
        ORL     0xfd,#0x2
//  312         P1_2 = 0;
        CLR     0x90.2
//  313 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  314 	WriteLCD(COMMAND , 0xE2);//¸´Î»
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x1e
        LCALL   ?Subroutine5 & 0xFFFF
//  315 
//  316 	delay_us(100);
//  317 	WriteLCD(COMMAND , 0xA3);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x5d
        LCALL   ?Subroutine5 & 0xFFFF
//  318 
//  319 	delay_us(100);	
//  320 	WriteLCD(COMMAND , 0xA0);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x60
        LCALL   ?Subroutine5 & 0xFFFF
//  321 	
//  322 	delay_us(100);
//  323 	WriteLCD(COMMAND , 0xC8);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x38
        LCALL   ?Subroutine5 & 0xFFFF
//  324 
//  325 	delay_us(100);	
//  326 	WriteLCD(COMMAND , 0x24);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x24
        LCALL   ?Subroutine5 & 0xFFFF
//  327 	
//  328 	delay_us(100);
//  329 	WriteLCD(COMMAND , 0x81);
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x7f
        LCALL   ?Subroutine5 & 0xFFFF
//  330 
//  331 	delay_us(100);	
//  332 	WriteLCD(COMMAND , 0x14);
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x14
        LCALL   ?Subroutine5 & 0xFFFF
//  333 	
//  334 	delay_us(100);
//  335 	WriteLCD(COMMAND , 0x2F);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x2f
        LCALL   ?Subroutine5 & 0xFFFF
//  336 
//  337 	delay_us(100);	
//  338 	WriteLCD(COMMAND , 0x40);//´ÓµÚÒ»ÁÐ¿ªÊ¼ÏÔÊ¾
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x40
        LCALL   ?Subroutine5 & 0xFFFF
//  339 	
//  340 	delay_us(100);
//  341 	WriteLCD(COMMAND , 0xB0);
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x50
        LCALL   ?Subroutine5 & 0xFFFF
//  342 
//  343 	delay_us(100);	
//  344 	WriteLCD(COMMAND , 0x10);
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x10
        LCALL   ?Subroutine5 & 0xFFFF
//  345 	
//  346 	delay_us(100);
//  347 	WriteLCD(COMMAND , 0x00);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
//  348 
//  349 	delay_us(100);	
//  350 	WriteLCD(COMMAND , 0xAF);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x51
        LCALL   ?Subroutine8 & 0xFFFF
//  351 
//  352 	WriteLCD(COMMAND , 0x81);
//  353 	WriteLCD(COMMAND , 0x1b);
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#0x1b
        LCALL   ?Subroutine5 & 0xFFFF
//  354         delay_us(100);	
//  355         SetContrast(iIntRegValuea,ContrastValue);
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function SetContrast
        MOV     DPTR,#ContrastValue
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x14
        LCALL   ??SetContrast?relay
//  356 	ClearScreen();
        ; Setup parameters for call to function ClearScreen
        LCALL   ??ClearScreen?relay
//  357        // HalLcdWriteString("IEEE:",1);
//  358        // HalLcdWriteString("Init lcd",2);
//  359       // HalLcdWriteString("Init lcd",3);
//  360       //  PrintCh8(30,30,'O',1);
//  361 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock17
        REQUIRE _A_P1
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond19) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond19) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond19) CFA_SP SP+-5
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        ; Setup parameters for call to function WriteLCD
        ; Setup parameters for call to function WriteLCD
        MOV     R2,#-0x7f
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond23) CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond24) CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond25) CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond28) CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     R1,#0x0
        LCALL   ??WriteLCD?relay
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
//  362 
//  363 
//  364 
//  365 /*******************************************************************************
//  366 //º¯ÊýÃû£ºvoid Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)
//  367 //¹¦ÄÜ£ºÏÔÊ¾6*8×Ö·û´®
//  368 //ÊäÈë£ºxx ,yy ×ø±ê,ch1´ýÏÔÊ¾µÄ×Ö·û´®,ynÊÇ·ñ·´ºÚ
//  369 //Êä³ö£ºÎÞ
//  370 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  371 void Print6(uint8 xx, uint8 yy, uint8 ch1[], uint8 yn)		
Print6:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function Print6
//  372 {
        FUNCALL Print6, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print6, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print6, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 3,R3
//  373 	uint8 ii = 0;
//  374 	uint8 bb = 0;
        MOV     ?V0 + 2,#0x0
//  375 	unsigned int index = 0 ;	
        SJMP    ??Print6_0
//  376 			
//  377 	while(ch1[bb] != '\0')
//  378 	{
//  379                 index = (unsigned int)(ch1[bb] - 0x20);
//  380 		index = (unsigned int)index*6;		
//  381 		for(ii=0;ii<6;ii++)
//  382 		{
//  383 			SetRamAddr(xx , yy);
//  384 			if(yn == 0)
//  385 			{
//  386 				WriteLCD(DATA, ~FontSystem6x8[index]);
//  387 				
//  388 			}
//  389 			else
//  390 			{
//  391 				WriteLCD(DATA, FontSystem6x8[index]);
??Print6_1:
        ; Setup parameters for call to function WriteLCD
        MOV     R1,#0x1
        LCALL   ??WriteLCD?relay
//  392 			}		
//  393 			index += 1;
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  394 			yy += 1;
        INC     ?V0 + 0
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JNZ     ??Print6_2
//  395 		}		
//  396 		bb += 1;
        INC     ?V0 + 2
??Print6_0:
        MOV     ?V0 + 4,?V0 + 2
        MOV     A,?V0 + 6
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??Print6_3
        MOV     R0,A
        MOV     A,#-0x20
        ADD     A,R0
        MOV     R6,A
        MOV     A,#-0x1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R6,A
        MOV     R2,B
        MOV     B,#0x6
        MOV     A,R7
        MUL     AB
        ADD     A,R2
        MOV     R7,A
        MOV     ?V0 + 4,#0x6
??Print6_2:
        ; Setup parameters for call to function SetRamAddr
        MOV     R2,?V0 + 0
        MOV     R1,?V0 + 1
        LCALL   ??SetRamAddr?relay
        MOV     A,R6
        ADD     A,#(FontSystem6x8 & 0xff)
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#((FontSystem6x8 >> 8) & 0xff)
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,?V0 + 3
        JNZ     ??Print6_1
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
        SJMP    ??Print6_1
//  397 	}
//  398 }
??Print6_3:
        LJMP    ??Subroutine17_0 & 0xFFFF
        CFI EndBlock cfiBlock35
//  399 
//  400 
//  401 //*******************************************************************************
//  402 //º¯ÊýÃû£ºvoid Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
//  403 //¹¦ÄÜ£ºÏÔÊ¾8*8Ò»¸öÎÞ·ûºÅÊý¾Ý
//  404 //ÊäÈë£ºxx , yyÆÁÄ»µ±ÖÐÎ»ÖÃ,no´ýÏÔÊ¾Êý¾Ý yn=0Õý³£ÏÔÊ¾ yn=1·´ºÚÏÔÊ¾  leÓÐÐ§Î»
//  405 //Êä³ö£ºÎÞ
//  406 //*******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 void Printn8(uint8 xx ,uint8 yy , uint32 no,uint8 yn,uint8 le)
Printn8:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function Printn8
//  408 {
        FUNCALL Printn8, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  409 	uint8 ch2[6];
//  410 	uint8 ii;
//  411 
//  412 	for(ii = 1 ; ii <= le ;){
        MOV     R2,#0x1
        SJMP    ??Printn8_0
//  413 		ch2[le - ii] = no % 10 + 0x30;
??Printn8_1:
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0 + 0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,R2
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        CLR     A
        SUBB    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  414 		no /= 10;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  415 		ii += 1;
        INC     R2
//  416 	}
??Printn8_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        JNC     ??Printn8_1
//  417 	ch2[le] = '\0';
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_31:
        CLR     A
        MOVX    @DPTR,A
//  418 	Print8(xx ,yy ,ch2 ,yn);
        ; Setup parameters for call to function Print8
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  419 }
        MOV     A,#0xa
        CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock37
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock38
//  420 
//  421 /*******************************************************************************
//  422 //º¯ÊýÃû£ºvoid Print8(uint16 y,uint16 x, uint8 ch,uint16 yn)
//  423 //¹¦ÄÜ£ºÏÔÊ¾8*8×Ö·û
//  424 //ÊäÈë£ºxx ,yy ×ø±ê,ch´ýÏÔÊ¾µÄ×Ö·û,ynÊÇ·ñ·´ºÚ
//  425 //Êä³ö£ºÎÞ
//  426 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  427 void PrintCh8(uint16 y,uint16 x, uint8 ch,uint16 yn)
PrintCh8:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function PrintCh8
//  428 {
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
//  429 	uint8 wm;
//  430 	uint16 adder;
//  431 	
//  432 	adder = (ch - 0x20) * 16;
        MOV     ?V0 + 2,R1
        MOV     A,#-0x20
        ADD     A,?V0 + 2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  433 	for(wm = 0;wm < 8;wm++)
        MOV     ?V0 + 4,#0x8
//  434 	{
//  435 		SetRamAddr(y , x);
??PrintCh8_0:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine11 & 0xFFFF
//  436 		if(yn == 0)
??CrossCallReturnLabel_27:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??PrintCh8_1
        INC     DPTR
        MOVX    A,@DPTR
??PrintCh8_1:
        JNZ     ??PrintCh8_2
//  437 		{
//  438 			WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
//  439 		}
//  440 		else
//  441 		{
//  442 			WriteLCD(DATA, Font8X8[adder]);
??PrintCh8_2:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine6 & 0xFFFF
//  443 		}
//  444 		adder += 1;
//  445 		x += 1;
//  446 	}
??CrossCallReturnLabel_13:
        JNZ     ??PrintCh8_0
//  447 	y += 1;
        INC     R6
//  448 	x -= 8;
        MOV     A,?V0 + 0
        ADD     A,#-0x8
        MOV     ?V0 + 0,A
//  449 	for(wm = 0;wm < 8;wm++)
        MOV     ?V0 + 4,#0x8
//  450 	{
//  451 		SetRamAddr(y , x);
??PrintCh8_3:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine11 & 0xFFFF
//  452 		if(yn == 0)
??CrossCallReturnLabel_28:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??PrintCh8_4
        INC     DPTR
        MOVX    A,@DPTR
??PrintCh8_4:
        JNZ     ??PrintCh8_5
//  453 		{
//  454 				WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
//  455 		}
//  456 		else
//  457 		{
//  458 			WriteLCD(DATA, Font8X8[adder]);	
??PrintCh8_5:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine6 & 0xFFFF
//  459 		}
//  460 		adder += 1;
//  461 		x += 1;
//  462 	}
??CrossCallReturnLabel_14:
        JNZ     ??PrintCh8_3
        CFI EndBlock cfiBlock39
//  463 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0xf
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
//  464 
//  465 
//  466 /*******************************************************************************
//  467 //º¯ÊýÃû£ºvoid Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
//  468 //¹¦ÄÜ£ºÏÔÊ¾8*8×Ö·û´®
//  469 //ÊäÈë£ºxx ,yy ×ø±ê,ch1´ýÏÔÊ¾µÄ×Ö·û´®,ynÊÇ·ñ·´ºÚ
//  470 //Êä³ö£ºÎÞ
//  471 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  472 void Print8(uint16 y,uint16 x, uint8 ch[],uint16 yn)
Print8:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function Print8
//  473 {
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, SetRamAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Print8, WriteLCD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
//  474 	uint8 wm ,ii = 0;
        MOV     ?V0 + 6,#0x0
        SJMP    ??Print8_0
//  475 	uint16 adder;
//  476 
//  477 	while(ch[ii] != '\0')
//  478 	{
//  479 		adder = (ch[ii] - 0x20) * 16;
//  480 
//  481 		for(wm = 0;wm < 8;wm++)
//  482 		{
//  483 			SetRamAddr(y , x);
//  484 			if(yn == 0)
//  485 			{
//  486 				WriteLCD(DATA, ~Font8X8[adder]);
//  487 			}
//  488 			else
//  489 			{
//  490 				WriteLCD(DATA, Font8X8[adder]);
//  491 			}
//  492 			adder += 1;
//  493 			x += 1;
//  494 		}
//  495 		y += 1;
//  496 		x -= 8;
//  497 		for(wm = 0;wm < 8;wm++)
//  498 		{
//  499 			SetRamAddr(y , x);
//  500 			if(yn == 0)
//  501 			{
//  502 				WriteLCD(DATA, ~Font8X8[adder]);
//  503 			}
//  504 			else
//  505 			{
//  506 				WriteLCD(DATA, Font8X8[adder]);	
??Print8_1:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine6 & 0xFFFF
//  507 			}
??CrossCallReturnLabel_15:
        JNZ     ??Print8_2
//  508 			adder += 1;
//  509 			x += 1;
//  510 		}
//  511 		ii += 1;
        INC     ?V0 + 6
//  512 		y -= 1;
        DEC     R6
??Print8_0:
        MOV     R0,?V0 + 6
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        JZ      ??Print8_3
        MOV     R0,A
        MOV     A,#-0x20
        ADD     A,R0
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?S_SHL
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
        MOV     ?V0 + 4,#0x8
??Print8_4:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??Print8_5
        INC     DPTR
        MOVX    A,@DPTR
??Print8_5:
        JNZ     ??Print8_6
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
??Print8_6:
        ; Setup parameters for call to function WriteLCD
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     ??Print8_4
        INC     R6
        MOV     A,?V0 + 0
        ADD     A,#-0x8
        MOV     ?V0 + 0,A
        MOV     ?V0 + 4,#0x8
??Print8_2:
        ; Setup parameters for call to function SetRamAddr
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??Print8_7
        INC     DPTR
        MOVX    A,@DPTR
??Print8_7:
        JNZ     ??Print8_1
        ; Setup parameters for call to function WriteLCD
        MOV     A,R2
        CPL     A
        MOV     R2,A
        SJMP    ??Print8_1
//  513 	}
//  514 
//  515 }
??Print8_3:
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     A,#0x11
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_28
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_29
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_30
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     R2,?V0 + 0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SetRamAddr?relay
        MOV     A,?V0 + 2
        ADD     A,#(Font8X8 & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#((Font8X8 >> 8) & 0xff)
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     ?V0 + 4,A
        MOV     A,#-0x1
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     R1,#0x1
        LCALL   ??WriteLCD?relay
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 0
        INC     A
        MOV     ?V0 + 0,A
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60
//  516 
//  517 
//  518 /*******************************************************************************
//  519 //º¯ÊýÃû£ºvoid Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
//  520 //¹¦ÄÜ£ºÔÚÆÁÄ»ÉÏÏÔÊ¾ºº×Ö
//  521 //ÊäÈë£ºx ,y ×ø±ê,ch[]´ýÏÔÊ¾µÄºº×Ö,ynÊÇ·ñ·´ºÚ
//  522 //Êä³ö£ºÎÞ
//  523 ********************************************************************************
//  524 void Print16(uint16 y,uint16 x,uint8 ch[],uint16 yn)
//  525 {
//  526 	uint8 wm ,ii = 0;
//  527 	uint16 adder;
//  528 
//  529 	wm = 0;
//  530 	adder = 1;
//  531 	while(FontNew8X16_Index[wm] > 128)
//  532 	{
//  533 		if(FontNew8X16_Index[wm] == ch[ii])
//  534 		{
//  535 			if(FontNew8X16_Index[wm + 1] == ch[ii + 1])
//  536 			{
//  537 				adder = wm * 14;
//  538 				break;
//  539 			}
//  540 		}
//  541 		wm += 2;				//ÕÒµ½ºº×ÖÔÚË÷ÒýÖÐµÄÎ»ÖÃ
//  542 	}
//  543 	SetRamAddr(y , x);
//  544 
//  545 	if(adder != 1)					//ÕÒµ½ºº×Ö£¬ÏÔÊ¾³öÀ´	
//  546 	{
//  547 		
//  548 		for(wm = 0;wm < 14;wm++)
//  549 		{
//  550 			SetRamAddr(y , x);
//  551 			if(yn == 0)
//  552 			{
//  553 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  554 			}
//  555 			else
//  556 			{
//  557 				WriteLCD(DATA, FontNew16X16[adder]);
//  558 			}
//  559 			adder += 1;
//  560 			x += 1;
//  561 		}
//  562                 for(wm = 0;wm < 2;wm++)
//  563 		{
//  564 			SetRamAddr(y , x);
//  565 			if(yn == 0)
//  566 			{
//  567 				WriteLCD(DATA, 0xff);
//  568 			}
//  569 			else
//  570 			{
//  571 				WriteLCD(DATA, 0x00);
//  572 			}
//  573 			x += 1;
//  574 		}
//  575 		y += 1;
//  576 		x -=16;
//  577 
//  578 		for(wm = 0;wm < 14;wm++)
//  579 		{
//  580 			SetRamAddr(y , x);
//  581 			if(yn == 0)
//  582 			{
//  583 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  584 			}
//  585 			else
//  586 			{
//  587 				WriteLCD(DATA, FontNew16X16[adder]);
//  588 			}
//  589 			adder += 1;
//  590 			x += 1;
//  591 		}
//  592                 for(wm = 0;wm < 2;wm++)
//  593 		{
//  594 			SetRamAddr(y , x);
//  595 			if(yn == 0)
//  596 			{
//  597 				WriteLCD(DATA, 0xff);
//  598 			}
//  599 			else
//  600 			{
//  601 				WriteLCD(DATA, 0x00);
//  602 			}
//  603 			x += 1;
//  604 		}
//  605 
//  606 
//  607 	}
//  608 	else						//ÕÒ²»µ½×ÖÏÔÊ¾¿Õ¸ñ			
//  609 	{
//  610 		ii += 1;
//  611 
//  612 		for(wm = 0;wm < 16;wm++)
//  613 		{
//  614 			SetRamAddr(y , x);
//  615 			if(yn == 0)
//  616 			{
//  617 				WriteLCD(DATA, 0xff);
//  618 			}
//  619 			else
//  620 			{
//  621 				WriteLCD(DATA, 0x00);
//  622 			}
//  623 			x += 1;
//  624 		}
//  625 		y += 1;
//  626 		x -= 16;
//  627 		for(wm = 0;wm < 16;wm++)
//  628 		{
//  629 			SetRamAddr(y , x);
//  630 			if(yn == 0)
//  631 			{
//  632 				WriteLCD(DATA, 0xff);
//  633 			}
//  634 			else
//  635 			{
//  636 				WriteLCD(DATA, 0x00);
//  637 			}
//  638 			x += 1;
//  639 		}
//  640 	}
//  641 }*/
//  642 
//  643 
//  644 /*******************************************************************************
//  645 //º¯ÊýÃû£ºvoid Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
//  646 //¹¦ÄÜ£ºÊµÏÖºº×Ö¼°×ÖÄ¸»ìºÏÏÔÊ¾
//  647 //ÊäÈë£ºx ,y ×ø±ê,ch[]´ýÏÔÊ¾µÄºº×Ö»ò×ÖÄ¸,ynÊÇ·ñ·´ºÚ
//  648 //Êä³ö£ºÎÞ
//  649 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 void Print(uint8 y, uint8 x, uint8 ch[], uint16 yn)
Print:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function Print
//  651 {
        FUNCALL Print, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  652 	uint8 ch2[3];
//  653 	uint8 ii;
//  654         ii = 0;
        MOV     ?V0 + 0,#0x0
        SJMP    ??Print_0
//  655 	while(ch[ii] != '\0')
//  656 	{
//  657 		if(ch[ii] > 128)
//  658 		{
//  659 			ch2[0] = ch[ii];
//  660 	 		ch2[1] = ch[ii + 1];
??Print_1:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  661 			ch2[2] = '\0';			//ºº×ÖÎªÁ½¸ö×Ö½Ú
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  662 			//Print16(y , x , ch2 , yn);	//ÏÔÊ¾ºº×Ö
//  663 			x += 16;
        MOV     A,#0x10
        ADD     A,?V0 + 1
        MOV     ?V0 + 1,A
//  664 			ii += 2;
        INC     ?V0 + 0
??Print_2:
        INC     ?V0 + 0
//  665 		}
??Print_0:
        MOV     ?V0 + 2,?V0 + 0
        MOV     A,?V0 + 6
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        JZ      ??Print_3
        CLR     C
        SUBB    A,#-0x7f
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        JNC     ??Print_1
//  666 		else
//  667 		{
//  668 			ch2[0] = ch[ii];	
//  669 			ch2[1] = '\0';			//×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  670 			Print8(y , x , ch2 , yn);	//ÏÔÊ¾×ÖÄ¸
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,?V0 + 1
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  671 			x += 8;
        MOV     A,#0x8
        ADD     A,?V0 + 1
        MOV     ?V0 + 1,A
//  672 			ii += 1;
        SJMP    ??Print_2
//  673 		}
//  674 	}
//  675 }
??Print_3:
        MOV     A,#0x3
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  676 void HalLcdClearLine( uint8 line )
HalLcdClearLine:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function HalLcdClearLine
//  677 {
        FUNCALL HalLcdClearLine, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  678   Print8(line,0,"                ",1);
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#(`?<Constant "                ">` & 0xff)
        MOV     ?V0 + 1,#((`?<Constant "                ">` >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  679 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     R2,A
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     R3,#0x0
        LCALL   ??Print8?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  680 void HalLcdWriteString ( char *str, uint8 option)
HalLcdWriteString:
        CFI Block cfiBlock75 Using cfiCommon0
        CFI Function HalLcdWriteString
//  681 {
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, strlen
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, HalLcdClearLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, Print8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R1
        MOV     R6,A
//  682   unsigned char i; 
//  683   uint8 LcdBuf[20];
//  684   osal_memcpy(LcdBuf,str,20);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  685   i = strlen(str);
//  686   LcdBuf[i] = '\0';  
        CLR     A
        PUSH    A
        CFI CFA_SP SP+-1
        ; Setup parameters for call to function strlen
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_32:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  687   switch (option)
        MOV     A,R6
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for HalLcdWriteString>_0`:
        DATA
        DB        1
        DB        1
        DB        6
        DW        ??HalLcdWriteString_0
        DB        0
        DW        ??HalLcdWriteString_1
        CODE
//  688   {
//  689     case 1:
//  690     case 2:
//  691     case 3:      
//  692     case 4:     
//  693     case 5:    
//  694     case 6:
//  695        HalLcdClearLine( option%7 );
??HalLcdWriteString_0:
        MOV     A,R6
        MOV     B,#0x7
        DIV     AB
        MOV     R7,B
        ; Setup parameters for call to function HalLcdClearLine
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLcdClearLine?relay
//  696        Print8(option%7,0,(unsigned char *)LcdBuf,1);
        ; Setup parameters for call to function Print8
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R7
        LCALL   ?Subroutine14 & 0xFFFF
//  697      /*  y = option%7;
//  698        x = 0;
//  699 	while(LcdBuf[ii] != '\0')
//  700 	{
//  701 		adder = (LcdBuf[ii] - 0x20) * 16;
//  702 
//  703 		for(wm = 0;wm < 8;wm++)
//  704 		{
//  705 			SetRamAddr(y , x);
//  706 			if(yn == 0)
//  707 			{
//  708 				WriteLCD(DATA, ~Font8X8[adder]);
//  709 			}
//  710 			else
//  711 			{
//  712 				WriteLCD(DATA, Font8X8[adder]);
//  713 			}
//  714 			adder += 1;
//  715 			x += 1;
//  716 		}
//  717 		y += 1;
//  718 		x -= 8;
//  719 		for(wm = 0;wm < 8;wm++)
//  720 		{
//  721 			SetRamAddr(y , x);
//  722 			if(yn == 0)
//  723 			{
//  724 				WriteLCD(DATA, ~Font8X8[adder]);
//  725 			}
//  726 			else
//  727 			{
//  728 				WriteLCD(DATA, Font8X8[adder]);	
//  729 			}
//  730 			adder += 1;
//  731 			x += 1;
//  732 		}
//  733 		ii += 1;
//  734 		y -= 1;
//  735 	}*/
//  736       //Print8(option%7,0,(unsigned char *)LcdBuf,1);
//  737       break;
//  738     default :
//  739       break;
//  740   }
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  741 }
??HalLcdWriteString_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+-1
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
//  742 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  743 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function HalLcdWriteValue
//  744 {
        ; Saved register size: 0
        ; Auto size: 0
//  745 ;
//  746 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock79
//  747 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function HalLcdWriteScreen
//  749 {
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  750 #if (HAL_LCD == TRUE)
//  751   HalLcdWriteString( line1, 3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        LCALL   ??HalLcdWriteString?relay
//  752   HalLcdWriteString( line2, 5 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        CFI EndBlock cfiBlock80
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  753 #endif
//  754 
//  755 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??HalLcdWriteString?relay
        LJMP    ??Subroutine16_0 & 0xFFFF
        CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  756 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function HalLcdWriteStringValue
//  757 {
        ; Saved register size: 0
        ; Auto size: 0
//  758 ;
//  759 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  760 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function HalLcdWriteStringValueValue
//  761                                   uint16 value2, uint8 format2, uint8 line )
//  762 {
        ; Saved register size: 0
        ; Auto size: 0
//  763 ;
//  764 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  765 void upLcd( char *ptr,uint8 op )
upLcd:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function upLcd
//  766 {
        FUNCALL upLcd, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  767   HalLcdWriteString(ptr,op);
        ; Setup parameters for call to function HalLcdWriteString
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock84
//  768 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ContrastValue>`:
        DB 90

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Write595?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Write595

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteLCD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteLCD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetRamAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetRamAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetContrast?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetContrast

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitDisplay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitDisplay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??contrastctrl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    contrastctrl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ClearScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ClearScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print6?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Printn8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Printn8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PrintCh8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PrintCh8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Print?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Print

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdClearLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdClearLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??upLcd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    upLcd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "                ">`:
        DB "                "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_a:
        DD 10

        END
// 
// 1 565 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    21 bytes in segment XDATA_ROM_C
// 
// 1 698 bytes of CODE  memory
//    17 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 6 bytes shared)
//     1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
