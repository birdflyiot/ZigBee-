###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             23/Dec/2016  12:23:34 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\m #
#                          t\MT_UART.c                                        #
#    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11  #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\m #
#                          t\MT_UART.c" -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK   #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -D coordinator -lC             #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" --diag_suppress Pe001,Pa010 -o               #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\" -e --require_prototypes --debug --core=plain  #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü #
#                          \ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷        #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\ #
#                          ¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë       #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\NWK\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SAPI\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\ZDO\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\" -I                          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\HIGH_LEVEL\" -I                #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "D:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\" -I "D:\Program Files      #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\CLIB\" -Ohz                           #
#    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\MT_UART.lst                                    #
#    Object file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\MT_UART.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   E4           CLR     A
   \   00000A   90....       MOV     DPTR,#App_TaskID
   \   00000D   F0           MOVX    @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   7401         MOV     A,#0x1
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   F0           MOVX    @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;       //²¨ÌØÂÊ
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   7404         MOV     A,#0x4
   \   00001C   F0           MOVX    @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;       //Á÷¿Ø
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000024   7403         MOV     A,#0x3
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   7440         MOV     A,#0x40
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002F   740A         MOV     A,#0xa
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7480         MOV     A,#-0x80
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   00003A   7412         MOV     A,#0x12
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   7401         MOV     A,#0x1
   \   000044   F0           MOVX    @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000045   7405         MOV     A,#0x5
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7406         MOV     A,#0x6
   \   00004C   F0           MOVX    @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004D   7416         MOV     A,#0x16
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7401         MOV     A,#0x1
   \   000054   F0           MOVX    @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000055   741B         MOV     A,#0x1b
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   74..         MOV     A,#(??MT_UartProcessZToolData?relay & 0xff)
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#((??MT_UartProcessZToolData?relay >> 8) & 0xff)
   \   000060   F0           MOVX    @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000061                ; Setup parameters for call to function HalUARTOpen
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   12....       LCALL   ??HalUARTOpen?relay
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   000070   741D         MOV     A,#0x1d
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075                REQUIRE ?Subroutine0
   \   000075                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    153          }
   \   000009   80..         SJMP    ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000007   7900         MOV     R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   800E         SJMP    ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C9           XCH     A,R1
   \   000013   69           XRL     A,R1
   \   000014   F9           MOV     R1,A
   \   000015   0C           INC     R4
   \   000016   A3           INC     DPTR
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001B   EC           MOV     A,R4
   \   00001C   C3           CLR     C
   \   00001D   9D           SUBB    A,R5
   \   00001E   40ED         JC      ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    196          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    197            uint8 flag=0,i,j=0; //flagÊÇÅÐ¶ÏÓÐÃ»ÓÐÊÕµ½Êý¾Ý£¬j¼ÇÂ¼Êý¾Ý³¤¶È
   \   00000C   75..00       MOV     ?V0 + 0,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    198            uint8 buf[128]; //´®¿Úbuffer×î´ó»º³åÄ¬ÈÏÊÇ128£¬ÎÒÃÇÕâÀïÓÃ128.
    199            (void)event; // Intentionally unreferenced parameter
   \   000011   801F         SJMP    ??MT_UartProcessZToolData_0
    200            while (Hal_UART_RxBufLen(port)) //¼ì²â´®¿ÚÊý¾ÝÊÇ·ñ½ÓÊÕÍê³É
    201            {
    202              HalUARTRead (port,&buf[j], 1); //°ÑÊý¾Ý½ÓÊÕ·Åµ½bufÖÐ
   \                     ??MT_UartProcessZToolData_1:
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C01         MOV     R4,#0x1
   \   000015   7D00         MOV     R5,#0x0
   \   000017   8F..         MOV     ?V0 + 0,R7
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E582         MOV     A,DPL
   \   000021   25..         ADD     A,?V0 + 0
   \   000023   FA           MOV     R2,A
   \   000024   E583         MOV     A,DPH
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??HalUARTRead?relay
    203              j++; //¼ÇÂ¼×Ö·ûÊý
   \   00002E   0F           INC     R7
    204              flag=1; //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
   \   00002F   75..01       MOV     ?V0 + 0,#0x1
    205            }
   \                     ??MT_UartProcessZToolData_0:
   \   000032                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000032   EE           MOV     A,R6
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000037   EA           MOV     A,R2
   \   000038   7001         JNZ     ??MT_UartProcessZToolData_2
   \   00003A   EB           MOV     A,R3
   \                     ??MT_UartProcessZToolData_2:
   \   00003B   70D6         JNZ     ??MT_UartProcessZToolData_1
    206            if(flag==1) //ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
   \   00003D   7401         MOV     A,#0x1
   \   00003F   65..         XRL     A,?V0 + 0
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??MT_UartProcessZToolData_3 & 0xFFFF
    207            { /* Allocate memory for the data */
    208              //·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª»ú¹¹ÌåÄÚÈÝ+Êý¾ÝÄÚÈÝ+1¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
    209              pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof
    210                                                             ( mtOSALSerialData_t )+j+1);
   \   000046                ; Setup parameters for call to function osal_msg_allocate
   \   000046   8F..         MOV     ?V0 + 0,R7
   \   000048   7405         MOV     A,#0x5
   \   00004A   25..         ADD     A,?V0 + 0
   \   00004C   FA           MOV     R2,A
   \   00004D   E4           CLR     A
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??osal_msg_allocate?relay
   \   000054   90....       MOV     DPTR,#pMsg
   \   000057   EA           MOV     A,R2
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   EB           MOV     A,R3
   \   00005B   12....       LCALL   ?Subroutine1 & 0xFFFF
    211              //ÊÂ¼þºÅÓÃÔ­À´µÄCMD_SERIAL_MSG
    212              pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??CrossCallReturnLabel_2:
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
    213              pMsg->msg = (uint8*)(pMsg+1); // °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
   \   000061   90....       MOV     DPTR,#pMsg
   \   000064   E0           MOVX    A,@DPTR
   \   000065   2404         ADD     A,#0x4
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000070   E8           MOV     A,R0
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E9           MOV     A,R1
   \   000074   12....       LCALL   ?Subroutine1 & 0xFFFF
    214              pMsg->msg [0]= j; //¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
   \                     ??CrossCallReturnLabel_3:
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007C   EF           MOV     A,R7
   \   00007D   F0           MOVX    @DPTR,A
    215              for(i=0;i<j;i++) //´ÓµÚ¶þ¸ö¿ªÊ¼¼ÇÂ¼Êý¾Ý
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   802B         SJMP    ??MT_UartProcessZToolData_4
    216                pMsg->msg [i+1]= buf[i];
   \                     ??MT_UartProcessZToolData_5:
   \   000082   8B82         MOV     DPL,R3
   \   000084   A882         MOV     R0,DPL
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   E582         MOV     A,DPL
   \   00008E   28           ADD     A,R0
   \   00008F   F582         MOV     DPL,A
   \   000091   E583         MOV     A,DPH
   \   000093   3400         ADDC    A,#0x0
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   C0E0         PUSH    A
   \   00009A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   28           ADD     A,R0
   \   00009F   FA           MOV     R2,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   8A82         MOV     DPL,R2
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   0B           INC     R3
   \                     ??MT_UartProcessZToolData_4:
   \   0000AD   EB           MOV     A,R3
   \   0000AE   C3           CLR     C
   \   0000AF   9F           SUBB    A,R7
   \   0000B0   40D0         JC      ??MT_UartProcessZToolData_5
    217              osal_msg_send( App_TaskID, (byte *)pMsg ); //µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã
   \   0000B2                ; Setup parameters for call to function osal_msg_send
   \   0000B2   90....       MOV     DPTR,#pMsg
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FA           MOV     R2,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FB           MOV     R3,A
   \   0000BA   90....       MOV     DPTR,#App_TaskID
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   ??osal_msg_send?relay
    218              /* deallocate the msg */
    219              osal_msg_deallocate ( (uint8 *)pMsg ); //ÊÍ·ÅÄÚ´æ
   \   0000C2                ; Setup parameters for call to function osal_msg_deallocate
   \   0000C2   90....       MOV     DPTR,#pMsg
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FA           MOV     R2,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FB           MOV     R3,A
   \   0000CA   12....       LCALL   ??osal_msg_deallocate?relay
    220            }
    221          
    222          //  uint8  ch;
    223          //  uint8  bytesInRxBuffer;
    224          //  
    225          //  (void)event;  // Intentionally unreferenced parameter
    226          //
    227          //  while (Hal_UART_RxBufLen(port))
    228          //  {
    229          //    HalUARTRead (port, &ch, 1);
    230          //
    231          //    switch (state)
    232          //    {
    233          //      case SOP_STATE:
    234          //        if (ch == MT_UART_SOF)
    235          //          state = LEN_STATE;
    236          //        break;
    237          //
    238          //      case LEN_STATE:
    239          //        LEN_Token = ch;
    240          //
    241          //        tempDataLen = 0;
    242          //
    243          //        /* Allocate memory for the data */
    244          //        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    245          //                                                        MT_RPC_FRAME_HDR_SZ + LEN_Token );
    246          //
    247          //        if (pMsg)
    248          //        {
    249          //          /* Fill up what we can */
    250          //          pMsg->hdr.event = CMD_SERIAL_MSG;
    251          //          pMsg->msg = (uint8*)(pMsg+1);
    252          //          pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
    253          //          state = CMD_STATE1;
    254          //        }
    255          //        else
    256          //        {
    257          //          state = SOP_STATE;
    258          //          return;
    259          //        }
    260          //        break;
    261          //
    262          //      case CMD_STATE1:
    263          //        pMsg->msg[MT_RPC_POS_CMD0] = ch;
    264          //        state = CMD_STATE2;
    265          //        break;
    266          //
    267          //      case CMD_STATE2:
    268          //        pMsg->msg[MT_RPC_POS_CMD1] = ch;
    269          //        /* If there is no data, skip to FCS state */
    270          //        if (LEN_Token)
    271          //        {
    272          //          state = DATA_STATE;
    273          //        }
    274          //        else
    275          //        {
    276          //          state = FCS_STATE;
    277          //        }
    278          //        break;
    279          //
    280          //      case DATA_STATE:
    281          //
    282          //        /* Fill in the buffer the first byte of the data */
    283          //        pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
    284          //
    285          //        /* Check number of bytes left in the Rx buffer */
    286          //        bytesInRxBuffer = Hal_UART_RxBufLen(port);
    287          //
    288          //        /* If the remain of the data is there, read them all, otherwise, just read enough */
    289          //        if (bytesInRxBuffer <= LEN_Token - tempDataLen)
    290          //        {
    291          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
    292          //          tempDataLen += bytesInRxBuffer;
    293          //        }
    294          //        else
    295          //        {
    296          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
    297          //          tempDataLen += (LEN_Token - tempDataLen);
    298          //        }
    299          //
    300          //        /* If number of bytes read is equal to data length, time to move on to FCS */
    301          //        if ( tempDataLen == LEN_Token )
    302          //            state = FCS_STATE;
    303          //
    304          //        break;
    305          //
    306          //      case FCS_STATE:
    307          //
    308          //        FSC_Token = ch;
    309          //
    310          //        /* Make sure it's correct */
    311          //        if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
    312          //        {
    313          //          osal_msg_send( App_TaskID, (byte *)pMsg );
    314          //        }
    315          //        else
    316          //        {
    317          //          /* deallocate the msg */
    318          //          osal_msg_deallocate ( (uint8 *)pMsg );
    319          //        }
    320          //
    321          //        /* Reset the state, send or discard the buffers at this point */
    322          //        state = SOP_STATE;
    323          //
    324          //        break;
    325          //
    326          //      default:
    327          //       break;
    328          //    }
    329          //  }
    330          }
   \                     ??MT_UartProcessZToolData_3:
   \   0000CD   7480         MOV     A,#-0x80
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D2   7F04         MOV     R7,#0x4
   \   0000D4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pMsg
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    331          
    332          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    333          /***************************************************************************************************
    334           * @fn      MT_UartProcessZAppData
    335           *
    336           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    337           *          |  1  |  2   |       1         |  1   |
    338           *
    339           *          Parses the data and determine either is SPI or just simply serial data
    340           *          then send the data to correct place (MT or APP)
    341           *
    342           * @param   port    - UART port
    343           *          event   - Event that causes the callback
    344           *
    345           *
    346           * @return  None
    347           ***************************************************************************************************/
    348          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    349          {
    350          
    351            osal_event_hdr_t  *msg_ptr;
    352            uint16 length = 0;
    353            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    354          
    355            /*
    356               If maxZAppBufferLength is 0 or larger than current length
    357               the entire length of the current buffer is returned.
    358            */
    359            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    360            {
    361              length = MT_UartMaxZAppBufLen;
    362            }
    363            else
    364            {
    365              length = rxBufLen;
    366            }
    367          
    368            /* Verify events */
    369            if (event == HAL_UART_TX_FULL)
    370            {
    371              // Do something when TX if full
    372              return;
    373            }
    374          
    375            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    376            {
    377              if ( App_TaskID )
    378              {
    379                /*
    380                   If Application is ready to receive and there is something
    381                   in the Rx buffer then send it up
    382                */
    383                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    384                {
    385                  /* Disable App flow control until it processes the current data */
    386                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    387          
    388                  /* 2 more bytes are added, 1 for CMD type, other for length */
    389                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    390                  if ( msg_ptr )
    391                  {
    392                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    393                    msg_ptr->status = length;
    394          
    395                    /* Read the data of Rx buffer */
    396                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    397          
    398                    /* Send the raw data to application...or where ever */
    399                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    400                  }
    401                }
    402              }
    403            }
    404          }
    405          
    406          /***************************************************************************************************
    407           * @fn      SPIMgr_ZAppBufferLengthRegister
    408           *
    409           * @brief
    410           *
    411           * @param   maxLen - Max Length that the application wants at a time
    412           *
    413           * @return  None
    414           *
    415           ***************************************************************************************************/
    416          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    417          {
    418            /* If the maxLen is larger than the RX buff, something is not right */
    419            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    420              MT_UartMaxZAppBufLen = maxLen;
    421            else
    422              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    423          }
    424          
    425          /***************************************************************************************************
    426           * @fn      SPIMgr_AppFlowControl
    427           *
    428           * @brief
    429           *
    430           * @param   status - ready to send or not
    431           *
    432           * @return  None
    433           *
    434           ***************************************************************************************************/
    435          void MT_UartAppFlowControl ( bool status )
    436          {
    437          
    438            /* Make sure only update if needed */
    439            if (status != MT_UartZAppRxStatus )
    440            {
    441              MT_UartZAppRxStatus = status;
    442            }
    443          
    444            /* App is ready to read again, ProcessZAppData have to be triggered too */
    445            if (status == MT_UART_ZAPP_RX_READY)
    446            {
    447              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    448            }
    449          
    450          }
    451          
    452          #endif //ZAPP
    453          
    454          /***************************************************************************************************
    455          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MT_UartCalcFCS               0      0      9
     MT_UartInit                  3      0     29
       -> HalUARTOpen             4      0     58
     MT_UartProcessZToolData      1      0    140
       -> HalUARTRead             0      0    280
       -> Hal_UART_RxBufLen       0      0    280
       -> osal_msg_allocate       0      0    280
       -> osal_msg_send           0      0    280
       -> osal_msg_deallocate     0      0    280
     MT_UartRegisterTaskID        2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     App_TaskID                         1
     state                              1
     CMD_Token                          2
     LEN_Token                          1
     FSC_Token                          1
     pMsg                               2
     tempDataLen                        1
     MT_UartInit                      117
     ?Subroutine0                       7
     MT_UartRegisterTaskID             11
     MT_UartCalcFCS                    37
     MT_UartProcessZToolData          215
     ?Subroutine2                      14
     ?Subroutine1                       4
     ??Subroutine3_0                    9
     ??MT_UartInit?relay                6
     ??MT_UartRegisterTaskID?relay      6
     ??MT_UartCalcFCS?relay             6
     ??MT_UartProcessZToolData?relay    6

 
 414 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 438 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
