###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             23/Dec/2016  12:23:32 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\o #
#                          sal\mcu\cc2530\OSAL_Nv.c                           #
#    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11  #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\o #
#                          sal\mcu\cc2530\OSAL_Nv.c" -D ZIGBEEPRO -D          #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D coordinator -lC          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" --diag_suppress Pe001,Pa010 -o               #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\" -e --require_prototypes --debug --core=plain  #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü #
#                          \ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷        #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\ #
#                          ¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë       #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\NWK\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SAPI\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\ZDO\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\" -I                          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\HIGH_LEVEL\" -I                #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "D:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\" -I "D:\Program Files      #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\CLIB\" -Ohz                           #
#    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\OSAL_Nv.lst                                    #
#    Object file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\OSAL_Nv.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _nvBuf
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvIEEE
    174          
    175          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 failF;
   \                     failF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static uint8 initNV( void )
   \                     initNV:
    242          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    243            osalNvPgHdr_t pgHdr;
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV     R7,#0x0
    245            uint8 newPg = OSAL_NV_PAGE_NULL;
   \   00000C   8F..         MOV     ?V0 + 0,R7
    246            uint8 findDups = FALSE;
   \   00000E   8F..         MOV     ?V0 + 1,R7
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#pgRes
   \   000014   F0           MOVX    @DPTR,A
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000015   7E79         MOV     R6,#0x79
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000017                ; Setup parameters for call to function HalFlashRead
   \   000017   75..08       MOV     ?V0 + 2,#0x8
   \   00001A   75..00       MOV     ?V0 + 3,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 2
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   EE           MOV     A,R6
   \   000030   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   64FF         XRL     A,#0xff
   \   00003F   7004         JNZ     ??initNV_1
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   64FF         XRL     A,#0xff
   \                     ??initNV_1:
   \   000045   7013         JNZ     ??initNV_2
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000047   90....       MOV     DPTR,#pgRes
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   7004         JNZ     ??initNV_3
    258                {
    259                  pgRes = pg;
   \   00004D   EE           MOV     A,R6
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   802F         SJMP    ??initNV_4
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   000051                ; Setup parameters for call to function setPageUse
   \   000051   7A01         MOV     R2,#0x1
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??setPageUse?relay
   \   000058   8026         SJMP    ??initNV_4
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   64FF         XRL     A,#0xff
   \   000062   7004         JNZ     ??initNV_5
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   64FF         XRL     A,#0xff
   \                     ??initNV_5:
   \   000068   7004         JNZ     ??initNV_6
    270                {
    271                  newPg = pg;
   \   00006A   8E..         MOV     ?V0 + 0,R6
   \   00006C   8012         SJMP    ??initNV_4
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_6:
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E0           MOVX    A,@DPTR
   \   000074   64FF         XRL     A,#0xff
   \   000076   7004         JNZ     ??initNV_7
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   64FF         XRL     A,#0xff
   \                     ??initNV_7:
   \   00007C   6002         JZ      ??initNV_4
    275                {
    276                  oldPg = pg;
   \   00007E   EE           MOV     A,R6
   \   00007F   FF           MOV     R7,A
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_4:
   \   000080                ; Setup parameters for call to function initPage
   \   000080   AC..         MOV     R4,?V0 + 1
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7B00         MOV     R3,#0x0
   \   000086   EE           MOV     A,R6
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??initPage?relay
   \   00008B   EA           MOV     A,R2
   \   00008C   7001         JNZ     ??initNV_8
   \   00008E   EB           MOV     A,R3
   \                     ??initNV_8:
   \   00008F   6005         JZ      ??initNV_9
    282              {
    283                findDups = TRUE;
   \   000091   75..01       MOV     ?V0 + 1,#0x1
    284                pg = OSAL_NV_PAGE_BEG-1;
   \   000094   7E78         MOV     R6,#0x78
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_9:
   \   000096   0E           INC     R6
   \   000097   EE           MOV     A,R6
   \   000098   C3           CLR     C
   \   000099   947F         SUBB    A,#0x7f
   \   00009B   5003         JNC     $+5
   \   00009D   02....       LJMP    ??initNV_0 & 0xFFFF
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
   \   0000A0   E5..         MOV     A,?V0 + 0
   \   0000A2   601D         JZ      ??initNV_10
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   0000A4   90....       MOV     DPTR,#pgRes
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   600C         JZ      ??initNV_11
    300              {
    301                setPageUse( newPg, TRUE );
   \   0000AA                ; Setup parameters for call to function setPageUse
   \   0000AA   7A01         MOV     R2,#0x1
   \   0000AC   A9..         MOV     R1,?V0 + 0
   \   0000AE   12....       LCALL   ??setPageUse?relay
    302              }
    303              /* If setting old page to 'xfer' failed or board reset before it was effected, there is no way
    304               * to know which page was the 'old page' - so just reset all NV pages to start clean.
    305               */
    306              else if ( oldPg != OSAL_NV_PAGE_NULL )
    307              {
    308                pgRes = newPg;
    309              }
    310          
    311              /* If a page compaction was interrupted and the page being compacted is not
    312               * yet erased, then there may be items remaining to xfer before erasing.
    313               */
    314              if ( oldPg != OSAL_NV_PAGE_NULL )
   \   0000B1   EF           MOV     A,R7
   \   0000B2   7008         JNZ     ??initNV_12
   \   0000B4   800B         SJMP    ??initNV_10
   \                     ??initNV_11:
   \   0000B6   EF           MOV     A,R7
   \   0000B7   600E         JZ      ??initNV_13
   \   0000B9   E5..         MOV     A,?V0 + 0
   \   0000BB   F0           MOVX    @DPTR,A
    315              {
    316                compactPage( oldPg );
   \                     ??initNV_12:
   \   0000BC                ; Setup parameters for call to function compactPage
   \   0000BC   EF           MOV     A,R7
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   ??compactPage?relay
    317              }
    318            }
    319          
    320            /* If no page met the criteria to be the reserve page:
    321             *  - A compactPage() failed or board reset before doing so.
    322             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    323             *    without erasing Flash?
    324             */
    325            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_10:
   \   0000C1   90....       MOV     DPTR,#pgRes
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   7011         JNZ     ??initNV_14
    326            {
    327              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_13:
   \   0000C7   7E79         MOV     R6,#0x79
    328              {
    329                erasePage( pg );
   \                     ??initNV_15:
   \   0000C9                ; Setup parameters for call to function erasePage
   \   0000C9   EE           MOV     A,R6
   \   0000CA   F9           MOV     R1,A
   \   0000CB   12....       LCALL   ??erasePage?relay
    330              }
   \   0000CE   0E           INC     R6
   \   0000CF   EE           MOV     A,R6
   \   0000D0   C3           CLR     C
   \   0000D1   947F         SUBB    A,#0x7f
   \   0000D3   40F4         JC      ??initNV_15
    331              initNV();
   \   0000D5                ; Setup parameters for call to function initNV
   \   0000D5   12....       LCALL   ??initNV?relay
    332            }
    333          
    334            return TRUE;
   \                     ??initNV_14:
   \   0000D8   7901         MOV     R1,#0x1
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF                REQUIRE ?Subroutine0
   \   0000DF                ; // Fall through to label ?Subroutine0
    335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine51_0
   \   000001                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ??HalFlashRead?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    336          
    337          /*********************************************************************
    338           * @fn      setPageUse
    339           *
    340           * @brief   Set page header active/inUse state according to 'inUse'.
    341           *
    342           * @param   pg - Valid NV page to verify and init.
    343           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    344           *
    345           * @return  none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    348          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    349            osalNvPgHdr_t pgHdr;
    350          
    351            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    352          
    353            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    354            {
    355              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    356            }
    357            else
    358            {
    359              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    360            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    361          
    362            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_83:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??writeWord?relay
    363          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function writeWordH
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    364          
    365          /*********************************************************************
    366           * @fn      initPage
    367           *
    368           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    369           *
    370           * @param   pg - Valid NV page to verify and init.
    371           * @param   id - Valid NV item Id to use function as a "findItem".
    372           *               If set to NULL then just perform the page initialization.
    373           *
    374           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    375           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    378          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 6,R1
   \   000017   8C..         MOV     ?V0 + 7,R4
    379            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000019   75..08       MOV     ?V0 + 2,#0x8
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
    380            uint16 sz, lost = 0;
   \   00001F   7E00         MOV     R6,#0x0
   \   000021   7F00         MOV     R7,#0x0
   \   000023   801B         SJMP    ??initPage_0
    381            osalNvHdr_t hdr;
    382          
    383            do
    384            {
    385              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    386          
    387              if ( hdr.id == OSAL_NV_ERASED_ID )
    388              {
    389                break;
    390              }
    391              offset += OSAL_NV_HDR_SIZE;
    392              sz = OSAL_NV_DATA_SIZE( hdr.len );
    393          
    394              // A bad 'len' write has blown away the rest of the page.
    395              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    396              {
    397                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    398                offset = OSAL_NV_PAGE_FREE;
    399                break;
    400              }
    401          
    402              if ( hdr.id != OSAL_NV_ZEROED_ID )
    403              {
    404                /* This trick allows function to do double duty for findItem() without
    405                 * compromising its essential functionality at powerup initialization.
    406                 */
    407                if ( id != OSAL_NV_ITEM_NULL )
    408                {
    409                  /* This trick allows asking to find the old/transferred item in case
    410                   * of a successful new item write that gets interrupted before the
    411                   * old item can be zeroed out.
    412                   */
    413                  if ( (id & 0x7fff) == hdr.id )
    414                  {
    415                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    416                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    417                    {
    418                      return offset;
    419                    }
    420                  }
    421                }
    422                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    423                else
    424                {
    425                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    426                  {
    427                    if ( findDups )
    428                    {
    429                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    430                      {
    431                        /* The trick of setting the MSB of the item Id causes the logic
    432                         * immediately above to return a valid page only if the header 'stat'
    433                         * indicates that it was the older item being transferred.
    434                         */
    435                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    436          
    437                        if ( off != OSAL_NV_ITEM_NULL )
    438                        {
    439                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    440                        }
    441                      }
    442                    }
    443                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    444                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    445                    {
    446                      return OSAL_NV_ERASED_ID;
    447                    }
    448                  }
    449                  else
    450                  {
    451                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    452                    lost += (OSAL_NV_HDR_SIZE + sz);
    453                  }
    454                }
    455              }
    456              else
    457              {
    458                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_1:
   \   000025   7408         MOV     A,#0x8
   \   000027   25..         ADD     A,?V0 + 0
   \   000029   F8           MOV     R0,A
   \   00002A   E4           CLR     A
   \   00002B   35..         ADDC    A,?V0 + 1
   \   00002D   F9           MOV     R1,A
   \   00002E   EE           MOV     A,R6
   \   00002F   28           ADD     A,R0
   \   000030   FE           MOV     R6,A
   \   000031   EF           MOV     A,R7
   \   000032   39           ADDC    A,R1
   \   000033   FF           MOV     R7,A
    459              }
    460              offset += sz;
   \                     ??initPage_2:
   \   000034   E5..         MOV     A,?V0 + 2
   \   000036   25..         ADD     A,?V0 + 0
   \   000038   F5..         MOV     ?V0 + 2,A
   \   00003A   E5..         MOV     A,?V0 + 3
   \   00003C   35..         ADDC    A,?V0 + 1
   \   00003E   F5..         MOV     ?V0 + 3,A
    461          
    462            } while ( TRUE );
   \                     ??initPage_0:
   \   000040                ; Setup parameters for call to function HalFlashRead
   \   000040   75..08       MOV     ?V0 + 0,#0x8
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   AA..         MOV     R2,?V0 + 2
   \   000056   AB..         MOV     R3,?V0 + 3
   \   000058   A9..         MOV     R1,?V0 + 6
   \   00005A   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   64FF         XRL     A,#0xff
   \   000068   7004         JNZ     ??initPage_3
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   64FF         XRL     A,#0xff
   \                     ??initPage_3:
   \   00006E   6040         JZ      ??initPage_4
   \   000070   E5..         MOV     A,?V0 + 2
   \   000072   2408         ADD     A,#0x8
   \   000074   F5..         MOV     ?V0 + 2,A
   \   000076   E5..         MOV     A,?V0 + 3
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F5..         MOV     ?V0 + 3,A
   \   00007C   7404         MOV     A,#0x4
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000084   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000087   F5..         MOV     ?V0 + 0,A
   \   000089   74FF         MOV     A,#-0x1
   \   00008B   59           ANL     A,R1
   \   00008C   F5..         MOV     ?V0 + 1,A
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   25..         ADD     A,?V0 + 2
   \   000092   F8           MOV     R0,A
   \   000093   E9           MOV     A,R1
   \   000094   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000097   4033         JC      ??initPage_5
   \   000099   7408         MOV     A,#0x8
   \   00009B   2E           ADD     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   7408         MOV     A,#0x8
   \   00009F   3F           ADDC    A,R7
   \   0000A0   F9           MOV     R1,A
   \   0000A1   E8           MOV     A,R0
   \   0000A2   C3           CLR     C
   \   0000A3   95..         SUBB    A,?V0 + 2
   \   0000A5   FE           MOV     R6,A
   \   0000A6   E9           MOV     A,R1
   \   0000A7   95..         SUBB    A,?V0 + 3
   \   0000A9   FF           MOV     R7,A
   \   0000AA   75..00       MOV     ?V0 + 2,#0x0
   \   0000AD   75..08       MOV     ?V0 + 3,#0x8
    463          
    464            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_4:
   \   0000B0   E5..         MOV     A,?V0 + 6
   \   0000B2   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000B5   E5..         MOV     A,?V0 + 2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E5..         MOV     A,?V0 + 3
   \   0000BB   12....       LCALL   ?Subroutine8 & 0xFFFF
    465            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_9:
   \   0000BE   EE           MOV     A,R6
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F0           MOVX    @DPTR,A
    466          
    467            return OSAL_NV_ITEM_NULL;
   \   0000C3   7A00         MOV     R2,#0x0
   \   0000C5   7B00         MOV     R3,#0x0
   \                     ??initPage_6:
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??initPage_5:
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   7002         JNZ     ??initPage_7
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \                     ??initPage_7:
   \   0000D6   7003         JNZ     $+5
   \   0000D8   02....       LJMP    ??initPage_1 & 0xFFFF
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   7002         JNZ     ??initPage_8
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \                     ??initPage_8:
   \   0000E6   6059         JZ      ??initPage_9
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   547F         ANL     A,#0x7f
   \   0000F4   F9           MOV     R1,A
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   68           XRL     A,R0
   \   0000FC   7003         JNZ     ??initPage_10
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   69           XRL     A,R1
   \                     ??initPage_10:
   \   000101   6003         JZ      $+5
   \   000103   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000106   7408         MOV     A,#0x8
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   5480         ANL     A,#0x80
   \   000118   F9           MOV     R1,A
   \   000119   E4           CLR     A
   \   00011A   7001         JNZ     ??initPage_11
   \   00011C   E9           MOV     A,R1
   \                     ??initPage_11:
   \   00011D   700F         JNZ     ??initPage_12
   \   00011F   74FF         MOV     A,#-0x1
   \   000121   6A           XRL     A,R2
   \   000122   7003         JNZ     ??initPage_13
   \   000124   74FF         MOV     A,#-0x1
   \   000126   6B           XRL     A,R3
   \                     ??initPage_13:
   \   000127   6003         JZ      $+5
   \   000129   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00012C   800D         SJMP    ??initPage_14
   \                     ??initPage_12:
   \   00012E   74FF         MOV     A,#-0x1
   \   000130   6A           XRL     A,R2
   \   000131   7003         JNZ     ??initPage_15
   \   000133   74FF         MOV     A,#-0x1
   \   000135   6B           XRL     A,R3
   \                     ??initPage_15:
   \   000136   7003         JNZ     $+5
   \   000138   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_14:
   \   00013B   AA..         MOV     R2,?V0 + 2
   \   00013D   AB..         MOV     R3,?V0 + 3
   \   00013F   8086         SJMP    ??initPage_6
   \                     ??initPage_9:
   \   000141                ; Setup parameters for call to function calcChkF
   \   000141   AA..         MOV     R2,?V0 + 2
   \   000143   AB..         MOV     R3,?V0 + 3
   \   000145   A9..         MOV     R1,?V0 + 6
   \   000147   12....       LCALL   ??calcChkF?relay
   \   00014A   8A..         MOV     ?V0 + 4,R2
   \   00014C   8B..         MOV     ?V0 + 5,R3
   \   00014E   A8..         MOV     R0,?V0 + 4
   \   000150   A9..         MOV     R1,?V0 + 5
   \   000152   7406         MOV     A,#0x6
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   E0           MOVX    A,@DPTR
   \   000158   68           XRL     A,R0
   \   000159   7003         JNZ     ??initPage_16
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   69           XRL     A,R1
   \                     ??initPage_16:
   \   00015E   7052         JNZ     ??initPage_17
   \   000160   7408         MOV     A,#0x8
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000168   E5..         MOV     A,?V0 + 7
   \   00016A   6032         JZ      ??initPage_18
   \   00016C   74FF         MOV     A,#-0x1
   \   00016E   68           XRL     A,R0
   \   00016F   7003         JNZ     ??initPage_19
   \   000171   74FF         MOV     A,#-0x1
   \   000173   69           XRL     A,R1
   \                     ??initPage_19:
   \   000174   6003         JZ      $+5
   \   000176   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000179                ; Setup parameters for call to function findItem
   \   000179   7402         MOV     A,#0x2
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   FA           MOV     R2,A
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   4480         ORL     A,#0x80
   \   000184   FB           MOV     R3,A
   \   000185   12....       LCALL   ??findItem?relay
   \   000188   EA           MOV     A,R2
   \   000189   7001         JNZ     ??initPage_20
   \   00018B   EB           MOV     A,R3
   \                     ??initPage_20:
   \   00018C   7003         JNZ     $+5
   \   00018E   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000191                ; Setup parameters for call to function setItem
   \   000191   7C01         MOV     R4,#0x1
   \   000193   90....       MOV     DPTR,#findPg
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F9           MOV     R1,A
   \   000198   12....       LCALL   ??setItem?relay
   \   00019B   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_18:
   \   00019E   74FF         MOV     A,#-0x1
   \   0001A0   68           XRL     A,R0
   \   0001A1   7003         JNZ     ??initPage_21
   \   0001A3   74FF         MOV     A,#-0x1
   \   0001A5   69           XRL     A,R1
   \                     ??initPage_21:
   \   0001A6   7003         JNZ     $+5
   \   0001A8   02....       LJMP    ??initPage_2 & 0xFFFF
   \   0001AB   7AFF         MOV     R2,#-0x1
   \   0001AD   7BFF         MOV     R3,#-0x1
   \   0001AF   02....       LJMP    ??initPage_6 & 0xFFFF
   \                     ??initPage_17:
   \   0001B2                ; Setup parameters for call to function setItem
   \   0001B2   7C01         MOV     R4,#0x1
   \   0001B4   AA..         MOV     R2,?V0 + 2
   \   0001B6   AB..         MOV     R3,?V0 + 3
   \   0001B8   A9..         MOV     R1,?V0 + 6
   \   0001BA   12....       LCALL   ??setItem?relay
   \   0001BD   02....       LJMP    ??initPage_1 & 0xFFFF
    468          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E8           MOV     A,R0
   \   000001   24..         ADD     A,#((pgLost + 14) & 0xff)
   \   000003   F582         MOV     DPL,A
   \   000005   E9           MOV     A,R1
   \   000006   34..         ADDC    A,#(((pgLost - 242) >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7403         MOV     A,#0x3
   \   000002   2C           ADD     A,R4
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006   F9           MOV     R1,A
   \   000007   74FC         MOV     A,#-0x4
   \   000009   58           ANL     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   35..         ADDC    A,?V0 + 3
   \   000002   F9           MOV     R1,A
   \   000003   C3           CLR     C
   \   000004   E8           MOV     A,R0
   \   000005   9401         SUBB    A,#0x1
   \   000007   E9           MOV     A,R1
   \   000008   9408         SUBB    A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    469          
    470          /*********************************************************************
    471           * @fn      erasePage
    472           *
    473           * @brief   Erases a page in Flash.
    474           *
    475           * @param   pg - Valid NV page to erase.
    476           *
    477           * @return  none
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          static void erasePage( uint8 pg )
   \                     erasePage:
    480          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    481            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   7904         MOV     R1,#0x4
   \   000009   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   7007         JNZ     ??erasePage_0
    482            {
    483              failF = TRUE;
   \   00000F   7401         MOV     A,#0x1
   \   000011   90....       MOV     DPTR,#failF
   \   000014   8014         SJMP    ??erasePage_1
    484              return;
    485            }
    486          
    487            HalFlashErase(pg);
   \                     ??erasePage_0:
   \   000016                ; Setup parameters for call to function HalFlashErase
   \   000016   EE           MOV     A,R6
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??HalFlashErase?relay
    488          
    489            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00001F   7408         MOV     A,#0x8
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   12....       LCALL   ?Subroutine8 & 0xFFFF
    490            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_10:
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \                     ??erasePage_1:
   \   00002A   F0           MOVX    @DPTR,A
    491          }
   \   00002B   02....       LJMP    ??Subroutine41_0 & 0xFFFF
    492          
    493          /*********************************************************************
    494           * @fn      compactPage
    495           *
    496           * @brief   Compacts the page specified.
    497           *
    498           * @param   srcPg - Valid NV page to erase.
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          static void compactPage( uint8 srcPg )
   \                     compactPage:
    503          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    504            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   00000C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
    505            uint16 srcOff = OSAL_NV_ZEROED_ID;
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
    506            osalNvHdr_t hdr;
    507          
    508            // Mark page as being in process of compaction.
    509            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
   \                     ??CrossCallReturnLabel_81:
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   FB           MOV     R3,A
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??writeWordH?relay
    510          
    511            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7408         MOV     A,#0x8
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   02....       LJMP    ??compactPage_0 & 0xFFFF
    512          
    513            do
    514            {
    515              uint16 sz;
    516              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    517          
    518              if ( hdr.id == OSAL_NV_ERASED_ID )
    519              {
    520                break;
    521              }
    522          
    523              srcOff += OSAL_NV_HDR_SIZE;
    524          
    525              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    526              {
    527                break;
    528              }
    529          
    530              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_1:
   \   00002F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000032   F5..         MOV     ?V0 + 4,A
   \   000034   74FF         MOV     A,#-0x1
   \   000036   59           ANL     A,R1
   \   000037   F5..         MOV     ?V0 + 5,A
    531          
    532              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   7002         JNZ     ??compactPage_2
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \                     ??compactPage_2:
   \   000043   6078         JZ      ??CrossCallReturnLabel_24
    533              {
    534                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000045                ; Setup parameters for call to function calcChkF
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00004E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000051   7406         MOV     A,#0x6
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   68           XRL     A,R0
   \   000058   7003         JNZ     ??compactPage_3
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   69           XRL     A,R1
   \                     ??compactPage_3:
   \   00005D   7059         JNZ     ??compactPage_4
    535                {
    536                  setItem( srcPg, srcOff, eNvXfer );
   \   00005F                ; Setup parameters for call to function setItem
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   12....       LCALL   ?Subroutine15 & 0xFFFF
    537                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
   \                     ??CrossCallReturnLabel_23:
   \   000064                ; Setup parameters for call to function writeBuf
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   8582..       MOV     ?V0 + 2,DPL
   \   00006C   8583..       MOV     ?V0 + 3,DPH
   \   00006F   78..         MOV     R0,#?V0 + 2
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   7C08         MOV     R4,#0x8
   \   000076   7D00         MOV     R5,#0x0
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   90....       MOV     DPTR,#pgRes
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ??writeBuf?relay
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
    538                  dstOff += OSAL_NV_HDR_SIZE;
   \   000089   12....       LCALL   ?Subroutine25 & 0xFFFF
    539                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_48:
   \   00008C                ; Setup parameters for call to function xferBuf
   \   00008C   78..         MOV     R0,#?V0 + 4
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   90....       MOV     DPTR,#pgRes
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FC           MOV     R4,A
   \   00009B   7404         MOV     A,#0x4
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   ??xferBuf?relay
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
    540                  dstOff += sz;
   \   0000AC   E5..         MOV     A,?V0 + 0
   \   0000AE   25..         ADD     A,?V0 + 4
   \   0000B0   F5..         MOV     ?V0 + 0,A
   \   0000B2   E5..         MOV     A,?V0 + 1
   \   0000B4   35..         ADDC    A,?V0 + 5
   \   0000B6   F5..         MOV     ?V0 + 1,A
    541                }
    542          
    543                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
   \                     ??compactPage_4:
   \   0000B8                ; Setup parameters for call to function setItem
   \   0000B8   7C01         MOV     R4,#0x1
   \   0000BA   12....       LCALL   ?Subroutine15 & 0xFFFF
    544              }
    545          
    546              srcOff += sz;
   \                     ??CrossCallReturnLabel_24:
   \   0000BD   85..82       MOV     DPL,?XSP + 0
   \   0000C0   85..83       MOV     DPH,?XSP + 1
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   25..         ADD     A,?V0 + 4
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   35..         ADDC    A,?V0 + 5
   \                     ??compactPage_0:
   \   0000CB   F0           MOVX    @DPTR,A
    547          
    548            } while ( TRUE );
   \   0000CC                ; Setup parameters for call to function HalFlashRead
   \   0000CC   75..08       MOV     ?V0 + 2,#0x8
   \   0000CF   75..00       MOV     ?V0 + 3,#0x0
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   7404         MOV     A,#0x4
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   AC82         MOV     R4,DPL
   \   0000DE   AD83         MOV     R5,DPH
   \   0000E0   7402         MOV     A,#0x2
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E8   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   64FF         XRL     A,#0xff
   \   0000F6   7004         JNZ     ??compactPage_5
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   64FF         XRL     A,#0xff
   \                     ??compactPage_5:
   \   0000FC   6030         JZ      ??compactPage_6
   \   0000FE   85..82       MOV     DPL,?XSP + 0
   \   000101   85..83       MOV     DPH,?XSP + 1
   \   000104   E0           MOVX    A,@DPTR
   \   000105   2408         ADD     A,#0x8
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   3400         ADDC    A,#0x0
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   7404         MOV     A,#0x4
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000115   85..82       MOV     DPL,?XSP + 0
   \   000118   85..83       MOV     DPH,?XSP + 1
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   2C           ADD     A,R4
   \   00011D   F8           MOV     R0,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   3D           ADDC    A,R5
   \   000121   F9           MOV     R1,A
   \   000122   C3           CLR     C
   \   000123   E8           MOV     A,R0
   \   000124   9401         SUBB    A,#0x1
   \   000126   E9           MOV     A,R1
   \   000127   9408         SUBB    A,#0x8
   \   000129   5003         JNC     $+5
   \   00012B   02....       LJMP    ??compactPage_1 & 0xFFFF
    549          
    550            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
   \                     ??compactPage_6:
   \   00012E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000131   E5..         MOV     A,?V0 + 0
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   \   000135   E5..         MOV     A,?V0 + 1
   \   000137   F0           MOVX    @DPTR,A
    551          
    552            /* In order to recover from a page compaction that is interrupted,
    553             * the logic in osal_nv_init() depends upon the following order:
    554             * 1. Compacted page is erased.
    555             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    556             */
    557            erasePage( srcPg );
   \   000138                ; Setup parameters for call to function erasePage
   \   000138   EE           MOV     A,R6
   \   000139   F9           MOV     R1,A
   \   00013A   12....       LCALL   ??erasePage?relay
    558          
    559            // Mark the reserve page as being in use.
    560            setPageUse( pgRes, TRUE );
   \   00013D                ; Setup parameters for call to function setPageUse
   \   00013D   7A01         MOV     R2,#0x1
   \   00013F   90....       MOV     DPTR,#pgRes
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F9           MOV     R1,A
   \   000144   12....       LCALL   ??setPageUse?relay
    561          
    562            // Set the reserve page to be the newly erased page.
    563            pgRes = srcPg;
   \   000147   EE           MOV     A,R6
   \   000148   90....       MOV     DPTR,#pgRes
   \   00014B   F0           MOVX    @DPTR,A
    564          }
   \   00014C   740A         MOV     A,#0xa
   \   00014E   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??setItem?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine42_0
   \   000007                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??calcChkF?relay
   \   000004   8A..         MOV     ?V0 + 2,R2
   \   000006   8B..         MOV     ?V0 + 3,R3
   \   000008   A8..         MOV     R0,?V0 + 2
   \   00000A   A9..         MOV     R1,?V0 + 3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    565          
    566          /*********************************************************************
    567           * @fn      findItem
    568           *
    569           * @brief   Find an item Id in NV and return the page and offset to its data.
    570           *
    571           * @param   id - Valid NV item Id.
    572           *
    573           * @return  Offset of data corresponding to item Id, if found;
    574           *          otherwise OSAL_NV_ITEM_NULL.
    575           *
    576           *          The page containing the item, if found;
    577           *          otherwise no valid assignment made - left equal to item Id.
    578           *
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static uint16 findItem( uint16 id )
   \                     findItem:
    581          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    582            uint16 off;
    583            uint8 pg;
    584          
    585            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    586            {
    587              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    588              {
    589                findPg = pg;
    590                return off;
    591              }
    592            }
    593          
    594            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    595            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    596            {
    597              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    598            }
   \   00000E   75..79       MOV     ?V0 + 0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0 + 0
   \   000019   12....       LCALL   ??initPage?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   7001         JNZ     ??findItem_3
   \   00001F   EB           MOV     A,R3
   \                     ??findItem_3:
   \   000020   6008         JZ      ??findItem_4
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   90....       MOV     DPTR,#findPg
   \   000027   F0           MOVX    @DPTR,A
   \   000028   801A         SJMP    ??findItem_5
   \                     ??findItem_4:
   \   00002A   05..         INC     ?V0 + 0
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   C3           CLR     C
   \   00002F   947F         SUBB    A,#0x7f
   \   000031   40DE         JC      ??findItem_2
   \   000033   7480         MOV     A,#-0x80
   \   000035   5F           ANL     A,R7
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   7001         JNZ     ??findItem_6
   \   00003A   E9           MOV     A,R1
   \                     ??findItem_6:
   \   00003B   60CD         JZ      ??findItem_1
    599            else
    600            {
    601              findPg = OSAL_NV_PAGE_NULL;
   \   00003D   E4           CLR     A
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   F0           MOVX    @DPTR,A
    602              return OSAL_NV_ITEM_NULL;
   \   000042   FA           MOV     R2,A
   \   000043   FB           MOV     R3,A
    603            }
   \                     ??findItem_5:
   \   000044   02....       LJMP    ?Subroutine0 & 0xFFFF
    604          }
    605          
    606          /*********************************************************************
    607           * @fn      initItem
    608           *
    609           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    610           *
    611           * @param   id  - Valid NV item Id.
    612           * @param   len - Item data length.
    613           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    614           *
    615           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    618          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
    619            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   00000B   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00000E   F8           MOV     R0,A
   \   00000F   7408         MOV     A,#0x8
   \   000011   28           ADD     A,R0
   \   000012   FA           MOV     R2,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   FB           MOV     R3,A
    620            uint8 rtrn = FALSE;
   \   000016   75..00       MOV     ?V0 + 1,#0x0
    621            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000019   75..06       MOV     ?V0 + 4,#0x6
    622            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00001C   90....       MOV     DPTR,#pgRes
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   04           INC     A
   \   000021   FF           MOV     R7,A
   \   000022   800A         SJMP    ??initItem_0
    623            uint8 idx;
    624          
    625            do {
    626              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
    627              {
    628                pg = OSAL_NV_PAGE_BEG;
    629              }
    630              if ( pg != pgRes )
    631              {
    632                idx = pg - OSAL_NV_PAGE_BEG;
    633                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
    634                {
    635                  break;
    636                }
    637              }
    638              pg++;
   \                     ??initItem_1:
   \   000024   0F           INC     R7
    639            } while (--cnt);
   \   000025   15..         DEC     ?V0 + 4
   \   000027   E5..         MOV     A,?V0 + 4
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??initItem_2 & 0xFFFF
   \                     ??initItem_0:
   \   00002E   EF           MOV     A,R7
   \   00002F   C3           CLR     C
   \   000030   947F         SUBB    A,#0x7f
   \   000032   4002         JC      ??initItem_3
   \   000034   7F79         MOV     R7,#0x79
   \                     ??initItem_3:
   \   000036   90....       MOV     DPTR,#pgRes
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6F           XRL     A,R7
   \   00003B   60E7         JZ      ??initItem_1
   \   00003D   7487         MOV     A,#-0x79
   \   00003F   2F           ADD     A,R7
   \   000040   FE           MOV     R6,A
   \   000041   C3           CLR     C
   \   000042   33           RLC     A
   \   000043   F8           MOV     R0,A
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   24..         ADD     A,#(pgOff & 0xff)
   \   00004A   F582         MOV     DPL,A
   \   00004C   E9           MOV     A,R1
   \   00004D   34..         ADDC    A,#((pgOff >> 8) & 0xff)
   \   00004F   F583         MOV     DPH,A
   \   000051   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000054   E8           MOV     A,R0
   \   000055   24..         ADD     A,#(pgLost & 0xff)
   \   000057   F582         MOV     DPL,A
   \   000059   E9           MOV     A,R1
   \   00005A   34..         ADDC    A,#((pgLost >> 8) & 0xff)
   \   00005C   F583         MOV     DPH,A
   \   00005E   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000061   E5..         MOV     A,?V0 + 2
   \   000063   C3           CLR     C
   \   000064   98           SUBB    A,R0
   \   000065   F8           MOV     R0,A
   \   000066   E5..         MOV     A,?V0 + 3
   \   000068   99           SUBB    A,R1
   \   000069   F9           MOV     R1,A
   \   00006A   EA           MOV     A,R2
   \   00006B   28           ADD     A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   EB           MOV     A,R3
   \   00006E   39           ADDC    A,R1
   \   00006F   F9           MOV     R1,A
   \   000070   C3           CLR     C
   \   000071   E8           MOV     A,R0
   \   000072   9401         SUBB    A,#0x1
   \   000074   E9           MOV     A,R1
   \   000075   9408         SUBB    A,#0x8
   \   000077   50AB         JNC     ??initItem_1
    640          
    641            if (cnt)
   \   000079   E5..         MOV     A,?V0 + 4
   \   00007B   604F         JZ      ??initItem_2
    642            {
    643              // Item fits if an old page is compacted.
    644              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
   \   00007D   EA           MOV     A,R2
   \   00007E   25..         ADD     A,?V0 + 2
   \   000080   F8           MOV     R0,A
   \   000081   EB           MOV     A,R3
   \   000082   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000085   4005         JC      ??initItem_4
    645              {
    646                pg = pgRes;
   \   000087   90....       MOV     DPTR,#pgRes
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FF           MOV     R7,A
    647              }
    648          
    649              // New item is the first one written to the reserved page, then the old page is compacted.
    650              rtrn = writeItem( pg, id, len, buf, flag );
   \                     ??initItem_4:
   \   00008C                ; Setup parameters for call to function writeItem
   \   00008C   E5..         MOV     A,?V0 + 0
   \   00008E   F5..         MOV     ?V0 + 1,A
   \   000090   78..         MOV     R0,#?V0 + 1
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000095   7411         MOV     A,#0x11
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009D   AA..         MOV     R2,?V0 + 6
   \   00009F   AB..         MOV     R3,?V0 + 7
   \   0000A1   EF           MOV     A,R7
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??writeItem?relay
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV     A,R1
   \   0000AC   F5..         MOV     ?V0 + 1,A
    651          
    652              if ( pg == pgRes )
   \   0000AE   90....       MOV     DPTR,#pgRes
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6F           XRL     A,R7
   \   0000B3   7017         JNZ     ??initItem_2
    653              {
    654                if ( flag )
   \   0000B5   7479         MOV     A,#0x79
   \   0000B7   2E           ADD     A,R6
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E5..         MOV     A,?V0 + 0
   \   0000BB   6005         JZ      ??initItem_5
    655                {
    656                  compactPage( OSAL_NV_PAGE_BEG+idx );
   \   0000BD                ; Setup parameters for call to function compactPage
   \   0000BD   12....       LCALL   ??compactPage?relay
   \   0000C0   800A         SJMP    ??initItem_2
    657                }
    658                else
    659                {
    660                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
   \                     ??initItem_5:
   \   0000C2   7410         MOV     A,#0x10
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine13 & 0xFFFF
    661                }
    662              }
    663            }
   \                     ??CrossCallReturnLabel_18:
   \   0000CA   E9           MOV     A,R1
   \   0000CB   F0           MOVX    @DPTR,A
    664          
    665            return rtrn;
   \                     ??initItem_2:
   \   0000CC   A9..         MOV     R1,?V0 + 1
   \   0000CE   02....       LJMP    ??Subroutine47_0 & 0xFFFF
    666          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    667          
    668          /*********************************************************************
    669           * @fn      setItem
    670           *
    671           * @brief   Set an item Id or status to mark its state.
    672           *
    673           * @param   pg - Valid NV page.
    674           * @param   offset - Valid offset into the page of the item data - the header
    675           *                   offset is calculated from this.
    676           * @param   stat - Valid enum value for the item status.
    677           *
    678           * @return  none
    679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    680          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    681          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8C..         MOV     ?V0 + 3,R4
    682            osalNvHdr_t hdr;
    683          
    684            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V0 + 1,A
    685            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V0 + 4,#0x8
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   AA..         MOV     R2,?V0 + 0
   \   00002E   AB..         MOV     R3,?V0 + 1
   \   000030   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    686          
    687            if ( stat == eNvXfer )
   \   000036   E5..         MOV     A,?V0 + 3
   \   000038   7022         JNZ     ??setItem_0
    688            {
    689              hdr.stat = OSAL_NV_ACTIVE;
   \   00003A   7406         MOV     A,#0x6
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    690              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000043                ; Setup parameters for call to function writeWord
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   7404         MOV     A,#0x4
   \   00004E   25..         ADD     A,?V0 + 0
   \   000050   FA           MOV     R2,A
   \   000051   E4           CLR     A
   \   000052   35..         ADDC    A,?V0 + 1
   \   000054   FB           MOV     R3,A
   \   000055   A9..         MOV     R1,?V0 + 2
   \   000057   12....       LCALL   ??writeWord?relay
   \   00005A   802A         SJMP    ??setItem_1
    691          }
    692            else // if ( stat == eNvZero )
    693            {
    694              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    695                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000064   FE           MOV     R6,A
   \   000065   E4           CLR     A
   \   000066   39           ADDC    A,R1
   \   000067   FF           MOV     R7,A
    696              hdr.id = 0;
   \   000068   12....       LCALL   ?Subroutine6 & 0xFFFF
    697              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_82:
   \   00006B   AA..         MOV     R2,?V0 + 0
   \   00006D   AB..         MOV     R3,?V0 + 1
   \   00006F   A9..         MOV     R1,?V0 + 2
   \   000071   12....       LCALL   ??writeWord?relay
    698              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000074   E5..         MOV     A,?V0 + 2
   \   000076   C3           CLR     C
   \   000077   33           RLC     A
   \   000078   F8           MOV     R0,A
   \   000079   E4           CLR     A
   \   00007A   33           RLC     A
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ?Subroutine39 & 0xFFFF
    699            }
   \                     ??CrossCallReturnLabel_79:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   2E           ADD     A,R6
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   3F           ADDC    A,R7
   \   000085   F0           MOVX    @DPTR,A
    700          }
   \                     ??setItem_1:
   \   000086   7408         MOV     A,#0x8
   \   000088   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   7408         MOV     A,#0x8
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   74FC         MOV     A,#-0x4
   \   00000B   58           ANL     A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   22           RET
    701          
    702          /*********************************************************************
    703           * @fn      calcChkB
    704           *
    705           * @brief   Calculates the data checksum over the 'buf' parameter.
    706           *
    707           * @param   pg - A valid NV Flash page.
    708           * @param   offset - A valid offset into the page.
    709           * @param   len - Byte count of the data to be checksummed.
    710           *
    711           * @return  Calculated checksum of the data bytes.
    712           */
    713          static uint16 calcChkB( uint16 len, uint8 *buf )
    714          {
    715            uint8 fill = len % OSAL_NV_WORD_SIZE;
    716            uint16 chk;
    717          
    718            if ( !buf )
    719            {
    720              chk = len * OSAL_NV_ERASED;
    721            }
    722            else
    723            {
    724              chk = 0;
    725              while ( len-- )
    726              {
    727                chk += *buf++;
    728              }
    729            }
    730          
    731            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    732            if ( fill )
    733            {
    734              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    735            }
    736          
    737            return chk;
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      calcChkF
    742           *
    743           * @brief   Calculates the data checksum by reading the data bytes from NV.
    744           *
    745           * @param   pg - A valid NV Flash page.
    746           * @param   offset - A valid offset into the page.
    747           * @param   len - Byte count of the data to be checksummed.
    748           *
    749           * @return  Calculated checksum of the data bytes.
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
   \                     calcChkF:
    752          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 6,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    753            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0 + 2,#0x0
   \   000017   75..00       MOV     ?V0 + 3,#0x0
    754          
    755            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   2E           ADD     A,R6
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V0 + 5,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V0 + 4
   \   00002C   AF..         MOV     R7,?V0 + 5
   \   00002E   804D         SJMP    ??calcChkF_0
    756          
    757            while ( len-- )
    758            {
    759              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    760          
    761              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \                     ??calcChkF_1:
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..04       MOV     ?V0 + 4,#0x4
   \   000033   75..00       MOV     ?V0 + 5,#0x0
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AC82         MOV     R4,DPL
   \   000042   AD83         MOV     R5,DPH
   \   000044   AA..         MOV     R2,?V0 + 0
   \   000046   AB..         MOV     R3,?V0 + 1
   \   000048   A9..         MOV     R1,?V0 + 6
   \   00004A   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    762              offset += OSAL_NV_WORD_SIZE;
   \   000050   12....       LCALL   ?Subroutine40 & 0xFFFF
    763          
    764              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_88:
   \   000053   7A00         MOV     R2,#0x0
    765              {
    766                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000055   8A..         MOV     ?V0 + 4,R2
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   E582         MOV     A,DPL
   \   00005F   25..         ADD     A,?V0 + 4
   \   000061   F582         MOV     DPL,A
   \   000063   E583         MOV     A,DPH
   \   000065   3400         ADDC    A,#0x0
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   E5..         MOV     A,?V0 + 2
   \   00006D   28           ADD     A,R0
   \   00006E   F5..         MOV     ?V0 + 2,A
   \   000070   E5..         MOV     A,?V0 + 3
   \   000072   3400         ADDC    A,#0x0
   \   000074   F5..         MOV     ?V0 + 3,A
    767              }
   \   000076   0A           INC     R2
   \   000077   EA           MOV     A,R2
   \   000078   C3           CLR     C
   \   000079   9404         SUBB    A,#0x4
   \   00007B   40D8         JC      ??calcChkF_2
    768            }
   \                     ??calcChkF_0:
   \   00007D   EE           MOV     A,R6
   \   00007E   F8           MOV     R0,A
   \   00007F   EF           MOV     A,R7
   \   000080   F9           MOV     R1,A
   \   000081   74FF         MOV     A,#-0x1
   \   000083   28           ADD     A,R0
   \   000084   1E           DEC     R6
   \   000085   74FF         MOV     A,#-0x1
   \   000087   39           ADDC    A,R1
   \   000088   FF           MOV     R7,A
   \   000089   E8           MOV     A,R0
   \   00008A   7001         JNZ     ??calcChkF_3
   \   00008C   E9           MOV     A,R1
   \                     ??calcChkF_3:
   \   00008D   70A1         JNZ     ??calcChkF_1
    769          
    770            return chk;
   \   00008F   AA..         MOV     R2,?V0 + 2
   \   000091   AB..         MOV     R3,?V0 + 3
   \   000093   7404         MOV     A,#0x4
   \   000095                REQUIRE ?Subroutine4
   \   000095                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      writeWord
    775           *
    776           * @brief   Writes a Flash-WORD to NV.
    777           *
    778           * @param   pg - A valid NV Flash page.
    779           * @param   offset - A valid offset into the page.
    780           * @param   buf - Pointer to source buffer.
    781           *
    782           * @return  none
    783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    784          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    785          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    786            offset = (offset >> 2) + ((uint16)pg << 9);
    787          
    788            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000F   7904         MOV     R1,#0x4
   \   000011   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000014   E9           MOV     A,R1
   \   000015   6032         JZ      ??writeWord_0
    789            {
    790              HalFlashWrite(offset, buf, 1);
   \   000017                ; Setup parameters for call to function HalFlashWrite
   \   000017   75..01       MOV     ?V0 + 4,#0x1
   \   00001A   75..00       MOV     ?V0 + 5,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 4
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   EE           MOV     A,R6
   \   000023   FC           MOV     R4,A
   \   000024   EF           MOV     A,R7
   \   000025   FD           MOV     R5,A
   \   000026   7402         MOV     A,#0x2
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?US_SHR
   \   00002D   85....       MOV     ?V0 + 4,?V0 + 2
   \   000030   7409         MOV     A,#0x9
   \   000032   78..         MOV     R0,#?V0 + 4
   \   000034   12....       LCALL   ?S_SHL
   \   000037   25..         ADD     A,?V0 + 0
   \   000039   FA           MOV     R2,A
   \   00003A   E5..         MOV     A,?V0 + 5
   \   00003C   35..         ADDC    A,?V0 + 1
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ??HalFlashWrite?relay
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   8006         SJMP    ??writeWord_1
    791            }
    792            else
    793            {
    794              failF = TRUE;
   \                     ??writeWord_0:
   \   000049   7401         MOV     A,#0x1
   \   00004B   90....       MOV     DPTR,#failF
   \   00004E   F0           MOVX    @DPTR,A
    795            }
    796          }
   \                     ??writeWord_1:
   \   00004F   80..         SJMP    ??Subroutine44_0
    797          
    798          /*********************************************************************
    799           * @fn      writeWordM
    800           *
    801           * @brief   Writes multiple Flash-WORDs to NV.
    802           *
    803           * @param   pg - A valid NV Flash page.
    804           * @param   offset - A valid offset into the page.
    805           * @param   buf - Pointer to source buffer.
    806           * @param   cnt - Number of 4-byte blocks to write.
    807           *
    808           * @return  none
    809           */
    810          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    811          {
    812            offset = (offset >> 2) + ((uint16)pg << 9);
    813          
    814            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    815            {
    816              HalFlashWrite(offset, buf, cnt);
    817            }
    818            else
    819            {
    820              failF = TRUE;
    821            }
    822          }
    823          
    824          /*********************************************************************
    825           * @fn      writeWordH
    826           *
    827           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    828           *
    829           * @param   pg - A valid NV Flash page.
    830           * @param   offset - A valid offset into the page.
    831           * @param   buf - Pointer to source buffer.
    832           *
    833           * @return  none
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    836          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    837            uint8 tmp[4];
    838          
    839            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    840            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    841            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    842            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    843          
    844            writeWord( pg, offset, tmp );
   \                     ??CrossCallReturnLabel_84:
   \   000038   12....       LCALL   ??writeWord?relay
    845          }
   \   00003B   7404         MOV     A,#0x4
   \   00003D   02....       LJMP    ?Subroutine1 & 0xFFFF
    846          
    847          /*********************************************************************
    848           * @fn      writeBuf
    849           *
    850           * @brief   Writes a data buffer to NV.
    851           *
    852           * @param   dstPg - A valid NV Flash page.
    853           * @param   offset - A valid offset into the page.
    854           * @param   len  - Byte count of the data to write.
    855           * @param   buf  - The data to write.
    856           *
    857           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    858           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    859          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    860          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    861            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV     A,R2
   \   000015   5403         ANL     A,#0x3
   \   000017   F5..         MOV     ?V0 + 6,A
    862            uint8 tmp[OSAL_NV_WORD_SIZE];
    863          
    864            if ( rem )
   \   000019   606F         JZ      ??CrossCallReturnLabel_87
    865            {
    866              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV     A,#-0x4
   \   00001D   55..         ANL     A,?V0 + 0
   \   00001F   F5..         MOV     ?V0 + 0,A
    867              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000021                ; Setup parameters for call to function HalFlashRead
   \   000021   75..04       MOV     ?V0 + 2,#0x4
   \   000024   75..00       MOV     ?V0 + 3,#0x0
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AC82         MOV     R4,DPL
   \   000033   AD83         MOV     R5,DPH
   \   000035   AA..         MOV     R2,?V0 + 0
   \   000037   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003D   802B         SJMP    ??writeBuf_0
    868          
    869              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    870              {
    871                tmp[rem++] = *buf++;
   \                     ??writeBuf_1:
   \   00003F   7414         MOV     A,#0x14
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000047   C0E0         PUSH    A
   \   000049   85....       MOV     ?V0 + 2,?V0 + 6
   \   00004C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   7414         MOV     A,#0x14
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000060   05..         INC     ?V0 + 6
    872                len--;
   \   000062   EE           MOV     A,R6
   \   000063   24FF         ADD     A,#-0x1
   \   000065   1E           DEC     R6
   \   000066   EF           MOV     A,R7
   \   000067   34FF         ADDC    A,#-0x1
   \   000069   FF           MOV     R7,A
    873              }
   \                     ??writeBuf_0:
   \   00006A   E5..         MOV     A,?V0 + 6
   \   00006C   C3           CLR     C
   \   00006D   9404         SUBB    A,#0x4
   \   00006F   5006         JNC     ??writeBuf_2
   \   000071   EE           MOV     A,R6
   \   000072   7001         JNZ     ??writeBuf_3
   \   000074   EF           MOV     A,R7
   \                     ??writeBuf_3:
   \   000075   70C8         JNZ     ??writeBuf_1
    874          
    875              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000077                ; Setup parameters for call to function writeWord
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   AC82         MOV     R4,DPL
   \   00007F   AD83         MOV     R5,DPH
   \   000081   AA..         MOV     R2,?V0 + 0
   \   000083   AB..         MOV     R3,?V0 + 1
   \   000085   A9..         MOV     R1,?V0 + 7
   \   000087   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    876              dstOff += OSAL_NV_WORD_SIZE;
    877            }
    878          
    879            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_87:
   \   00008A   EE           MOV     A,R6
   \   00008B   5403         ANL     A,#0x3
   \   00008D   F5..         MOV     ?V0 + 6,A
    880            len /= OSAL_NV_WORD_SIZE;
   \   00008F   8E..         MOV     ?V0 + 2,R6
   \   000091   8F..         MOV     ?V0 + 3,R7
   \   000093   7402         MOV     A,#0x2
   \   000095   78..         MOV     R0,#?V0 + 2
   \   000097   12....       LCALL   ?US_SHR
   \   00009A   AE..         MOV     R6,?V0 + 2
   \   00009C   AF..         MOV     R7,?V0 + 3
    881          
    882            if ( len )
   \   00009E   EE           MOV     A,R6
   \   00009F   7001         JNZ     ??writeBuf_4
   \   0000A1   EF           MOV     A,R7
   \                     ??writeBuf_4:
   \   0000A2   6073         JZ      ??CrossCallReturnLabel_1
    883            {
    884              writeWordM( dstPg, dstOff, buf, len );
   \   0000A4                ; Setup parameters for call to function HalAdcCheckVdd
   \   0000A4   7904         MOV     R1,#0x4
   \   0000A6   12....       LCALL   ??HalAdcCheckVdd?relay
   \   0000A9   E9           MOV     A,R1
   \   0000AA   6038         JZ      ??writeBuf_5
   \   0000AC                ; Setup parameters for call to function HalFlashWrite
   \   0000AC   78..         MOV     R0,#?V0 + 2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7416         MOV     A,#0x16
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000B9   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000BC   85....       MOV     ?V0 + 3,?V0 + 1
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   78..         MOV     R0,#?V0 + 2
   \   0000C3   12....       LCALL   ?US_SHR
   \   0000C6   85....       MOV     ?V0 + 4,?V0 + 7
   \   0000C9   F5..         MOV     ?V0 + 5,A
   \   0000CB   7409         MOV     A,#0x9
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?S_SHL
   \   0000D2   25..         ADD     A,?V0 + 2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E5..         MOV     A,?V0 + 5
   \   0000D7   35..         ADDC    A,?V0 + 3
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??HalFlashWrite?relay
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   8006         SJMP    ??writeBuf_6
   \                     ??writeBuf_5:
   \   0000E4   7401         MOV     A,#0x1
   \   0000E6   90....       MOV     DPTR,#failF
   \   0000E9   F0           MOVX    @DPTR,A
    885              dstOff += OSAL_NV_WORD_SIZE * len;
   \                     ??writeBuf_6:
   \   0000EA   8E..         MOV     ?V0 + 2,R6
   \   0000EC   8F..         MOV     ?V0 + 3,R7
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   78..         MOV     R0,#?V0 + 2
   \   0000F2   12....       LCALL   ?S_SHL
   \   0000F5   A8..         MOV     R0,?V0 + 2
   \   0000F7   A9..         MOV     R1,?V0 + 3
   \   0000F9   E5..         MOV     A,?V0 + 0
   \   0000FB   28           ADD     A,R0
   \   0000FC   F5..         MOV     ?V0 + 0,A
   \   0000FE   E5..         MOV     A,?V0 + 1
   \   000100   39           ADDC    A,R1
   \   000101   F5..         MOV     ?V0 + 1,A
    886              buf += OSAL_NV_WORD_SIZE * len;
   \   000103   7414         MOV     A,#0x14
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   E0           MOVX    A,@DPTR
   \   000109   28           ADD     A,R0
   \   00010A   F8           MOV     R0,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   39           ADDC    A,R1
   \   00010E   F9           MOV     R1,A
   \   00010F   7414         MOV     A,#0x14
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   12....       LCALL   ?Subroutine7 & 0xFFFF
    887            }
    888          
    889            if ( rem )
   \                     ??CrossCallReturnLabel_1:
   \   000117   E5..         MOV     A,?V0 + 6
   \   000119   6061         JZ      ??writeBuf_7
    890            {
    891              uint8 idx = 0;
   \   00011B   7E00         MOV     R6,#0x0
    892              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00011D                ; Setup parameters for call to function HalFlashRead
   \   00011D   75..04       MOV     ?V0 + 2,#0x4
   \   000120   8E..         MOV     ?V0 + 3,R6
   \   000122   78..         MOV     R0,#?V0 + 2
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   AC82         MOV     R4,DPL
   \   00012E   AD83         MOV     R5,DPH
   \   000130   AA..         MOV     R2,?V0 + 0
   \   000132   AB..         MOV     R3,?V0 + 1
   \   000134   A9..         MOV     R1,?V0 + 7
   \   000136   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013C   8021         SJMP    ??writeBuf_8
    893              while ( rem-- )
    894              {
    895                tmp[idx++] = *buf++;
   \                     ??writeBuf_9:
   \   00013E   7414         MOV     A,#0x14
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   12....       LCALL   ?Subroutine12 & 0xFFFF
    896              }
   \                     ??CrossCallReturnLabel_16:
   \   000146   C0E0         PUSH    A
   \   000148   8E..         MOV     ?V0 + 2,R6
   \   00014A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   7414         MOV     A,#0x14
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00015E   0E           INC     R6
   \                     ??writeBuf_8:
   \   00015F   AF..         MOV     R7,?V0 + 6
   \   000161   74FF         MOV     A,#-0x1
   \   000163   2F           ADD     A,R7
   \   000164   F5..         MOV     ?V0 + 6,A
   \   000166   EF           MOV     A,R7
   \   000167   70D5         JNZ     ??writeBuf_9
    897              writeWord( dstPg, dstOff, tmp );
   \   000169                ; Setup parameters for call to function writeWord
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   AC82         MOV     R4,DPL
   \   000171   AD83         MOV     R5,DPH
   \   000173   AA..         MOV     R2,?V0 + 0
   \   000175   AB..         MOV     R3,?V0 + 1
   \   000177   A9..         MOV     R1,?V0 + 7
   \   000179   12....       LCALL   ??writeWord?relay
    898            }
    899          }
   \                     ??writeBuf_7:
   \   00017C   7404         MOV     A,#0x4
   \   00017E   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   7414         MOV     A,#0x14
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ??writeWord?relay
   \   000003   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    900          
    901          /*********************************************************************
    902           * @fn      xferBuf
    903           *
    904           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    905           *
    906           * @return  none
    907           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
    909          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   8C..         MOV     ?V0 + 3,R4
   \   000018   7415         MOV     A,#0x15
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 1,A
   \   000024   7417         MOV     A,#0x17
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FE           MOV     R6,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FF           MOV     R7,A
    910            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   5403         ANL     A,#0x3
   \   000032   F5..         MOV     ?V0 + 2,A
    911            uint8 tmp[OSAL_NV_WORD_SIZE];
    912          
    913            if ( rem )
   \   000034   606F         JZ      ??CrossCallReturnLabel_85
    914            {
    915              dstOff -= rem;
   \   000036   F5..         MOV     ?V0 + 4,A
   \   000038   C3           CLR     C
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   95..         SUBB    A,?V0 + 4
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   9400         SUBB    A,#0x0
   \   000043   F5..         MOV     ?V0 + 1,A
    916              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   \   000048   75..00       MOV     ?V0 + 5,#0x0
   \   00004B   78..         MOV     R0,#?V0 + 4
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AC82         MOV     R4,DPL
   \   000057   AD83         MOV     R5,DPH
   \   000059   AA..         MOV     R2,?V0 + 0
   \   00005B   AB..         MOV     R3,?V0 + 1
   \   00005D   A9..         MOV     R1,?V0 + 3
   \   00005F   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   8029         SJMP    ??xferBuf_0
    917          
    918              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    919              {
    920                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \                     ??xferBuf_1:
   \   000067                ; Setup parameters for call to function HalFlashRead
   \   000067   75..01       MOV     ?V0 + 4,#0x1
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   85....       MOV     ?V0 + 4,?V0 + 2
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    921                srcOff++;
   \   000083   12....       LCALL   ?Subroutine34 & 0xFFFF
    922                rem++;
   \                     ??CrossCallReturnLabel_67:
   \   000086   05..         INC     ?V0 + 2
    923                len--;
   \   000088   EE           MOV     A,R6
   \   000089   24FF         ADD     A,#-0x1
   \   00008B   1E           DEC     R6
   \   00008C   EF           MOV     A,R7
   \   00008D   34FF         ADDC    A,#-0x1
   \   00008F   FF           MOV     R7,A
    924              }
   \                     ??xferBuf_0:
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   C3           CLR     C
   \   000093   9404         SUBB    A,#0x4
   \   000095   5006         JNC     ??xferBuf_2
   \   000097   EE           MOV     A,R6
   \   000098   7001         JNZ     ??xferBuf_3
   \   00009A   EF           MOV     A,R7
   \                     ??xferBuf_3:
   \   00009B   70CA         JNZ     ??xferBuf_1
    925          
    926              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   00009D                ; Setup parameters for call to function writeWord
   \   00009D   7401         MOV     A,#0x1
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL   ?Subroutine24 & 0xFFFF
    927              dstOff += OSAL_NV_WORD_SIZE;
    928            }
    929          
    930            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_85:
   \   0000A5   EE           MOV     A,R6
   \   0000A6   5403         ANL     A,#0x3
   \   0000A8   F5..         MOV     ?V0 + 2,A
    931            len /= OSAL_NV_WORD_SIZE;
   \   0000AA   8E..         MOV     ?V0 + 4,R6
   \   0000AC   8F..         MOV     ?V0 + 5,R7
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   78..         MOV     R0,#?V0 + 4
   \   0000B2   12....       LCALL   ?US_SHR
   \   0000B5   AE..         MOV     R6,?V0 + 4
   \   0000B7   AF..         MOV     R7,?V0 + 5
   \   0000B9   8037         SJMP    ??CrossCallReturnLabel_86
    932          
    933            while ( len-- )
    934            {
    935              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_4:
   \   0000BB                ; Setup parameters for call to function HalFlashRead
   \   0000BB   75..04       MOV     ?V0 + 4,#0x4
   \   0000BE   75..00       MOV     ?V0 + 5,#0x0
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7403         MOV     A,#0x3
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   AC82         MOV     R4,DPL
   \   0000CD   AD83         MOV     R5,DPH
   \   0000CF   AA..         MOV     R2,?V0 + 6
   \   0000D1   AB..         MOV     R3,?V0 + 7
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
    936              srcOff += OSAL_NV_WORD_SIZE;
   \   0000DE   E5..         MOV     A,?V0 + 6
   \   0000E0   2404         ADD     A,#0x4
   \   0000E2   F5..         MOV     ?V0 + 6,A
   \   0000E4   E5..         MOV     A,?V0 + 7
   \   0000E6   3400         ADDC    A,#0x0
   \   0000E8   F5..         MOV     ?V0 + 7,A
    937              writeWord( dstPg, dstOff, tmp );
   \   0000EA                ; Setup parameters for call to function writeWord
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL   ?Subroutine24 & 0xFFFF
    938              dstOff += OSAL_NV_WORD_SIZE;
    939            }
   \                     ??CrossCallReturnLabel_86:
   \   0000F2   EE           MOV     A,R6
   \   0000F3   F8           MOV     R0,A
   \   0000F4   EF           MOV     A,R7
   \   0000F5   F9           MOV     R1,A
   \   0000F6   74FF         MOV     A,#-0x1
   \   0000F8   28           ADD     A,R0
   \   0000F9   1E           DEC     R6
   \   0000FA   74FF         MOV     A,#-0x1
   \   0000FC   39           ADDC    A,R1
   \   0000FD   FF           MOV     R7,A
   \   0000FE   E8           MOV     A,R0
   \   0000FF   7001         JNZ     ??xferBuf_5
   \   000101   E9           MOV     A,R1
   \                     ??xferBuf_5:
   \   000102   70B7         JNZ     ??xferBuf_4
    940          
    941            if ( rem )
   \   000104   E5..         MOV     A,?V0 + 2
   \   000106   605E         JZ      ??xferBuf_6
    942            {
    943              uint8 idx = 0;
   \   000108   7E00         MOV     R6,#0x0
    944              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00010A                ; Setup parameters for call to function HalFlashRead
   \   00010A   75..04       MOV     ?V0 + 4,#0x4
   \   00010D   8E..         MOV     ?V0 + 5,R6
   \   00010F   78..         MOV     R0,#?V0 + 4
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   7403         MOV     A,#0x3
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AC82         MOV     R4,DPL
   \   00011B   AD83         MOV     R5,DPH
   \   00011D   AA..         MOV     R2,?V0 + 0
   \   00011F   AB..         MOV     R3,?V0 + 1
   \   000121   A9..         MOV     R1,?V0 + 3
   \   000123   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   801F         SJMP    ??xferBuf_7
    945              while ( rem-- )
    946              {
    947                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_8:
   \   00012B                ; Setup parameters for call to function HalFlashRead
   \   00012B   75..01       MOV     ?V0 + 4,#0x1
   \   00012E   78..         MOV     R0,#?V0 + 4
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   8E..         MOV     ?V0 + 4,R6
   \   000135   7403         MOV     A,#0x3
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
    948                srcOff++;
   \   000146   12....       LCALL   ?Subroutine34 & 0xFFFF
    949                idx++;
   \                     ??CrossCallReturnLabel_68:
   \   000149   0E           INC     R6
    950              }
   \                     ??xferBuf_7:
   \   00014A   AF..         MOV     R7,?V0 + 2
   \   00014C   74FF         MOV     A,#-0x1
   \   00014E   2F           ADD     A,R7
   \   00014F   F5..         MOV     ?V0 + 2,A
   \   000151   EF           MOV     A,R7
   \   000152   70D7         JNZ     ??xferBuf_8
    951              writeWord( dstPg, dstOff, tmp );
   \   000154                ; Setup parameters for call to function writeWord
   \   000154   7401         MOV     A,#0x1
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   AC82         MOV     R4,DPL
   \   00015B   AD83         MOV     R5,DPH
   \   00015D   AA..         MOV     R2,?V0 + 0
   \   00015F   AB..         MOV     R3,?V0 + 1
   \   000161   A9..         MOV     R1,?V0 + 3
   \   000163   12....       LCALL   ??writeWord?relay
    952            }
    953          }
   \                     ??xferBuf_6:
   \   000166   7405         MOV     A,#0x5
   \   000168   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 6,A
   \   000006   E5..         MOV     A,?V0 + 7
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 7,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   FC           MOV     R4,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   AA..         MOV     R2,?V0 + 6
   \   00000C   AB..         MOV     R3,?V0 + 7
   \   00000E   7402         MOV     A,#0x2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008   A9..         MOV     R1,?V0 + 3
   \   00000A                REQUIRE ??Subroutine45_0
   \   00000A                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine50_0
   \   000001                ; // Fall through to label ??Subroutine50_0
    954          
    955          /*********************************************************************
    956           * @fn      writeItem
    957           *
    958           * @brief   Writes an item header/data combo to the specified NV page.
    959           *
    960           * @param   pg - Valid NV Flash page.
    961           * @param   id - Valid NV item Id.
    962           * @param   len  - Byte count of the data to write.
    963           * @param   buf  - The data to write. If NULL, no data/checksum write.
    964           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    965           *
    966           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
    969          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E9           MOV     A,R1
   \   000016   FE           MOV     R6,A
   \   000017   8C..         MOV     ?V0 + 2,R4
   \   000019   8D..         MOV     ?V0 + 3,R5
   \   00001B   741D         MOV     A,#0x1d
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
    970            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   33           RLC     A
   \   000026   F8           MOV     R0,A
   \   000027   E4           CLR     A
   \   000028   33           RLC     A
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   00002D   F8           MOV     R0,A
   \   00002E   E9           MOV     A,R1
   \   00002F   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   000031   F9           MOV     R1,A
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 1,A
    971            uint8 rtrn = FALSE;
   \   000048   7F00         MOV     R7,#0x0
    972            osalNvHdr_t hdr;
    973          
    974            if ( pg == pgRes )
   \   00004A   90....       MOV     DPTR,#pgRes
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6E           XRL     A,R6
   \   00004F   7007         JNZ     ??writeItem_0
    975            {
    976              /* Mark reserve page as being active, in process of receiving items.
    977               * Invoking function must effect a page compaction.
    978               */
    979              setPageUse( pg, FALSE );
   \   000051                ; Setup parameters for call to function setPageUse
   \   000051   7A00         MOV     R2,#0x0
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??setPageUse?relay
    980            }
    981          
    982            hdr.id = id;
   \                     ??writeItem_0:
   \   000058   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ?Subroutine7 & 0xFFFF
    983            hdr.len = len;
   \                     ??CrossCallReturnLabel_4:
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E5..         MOV     A,?V0 + 2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E5..         MOV     A,?V0 + 3
   \   00006E   F0           MOVX    @DPTR,A
    984          
    985            writeWord( pg, offset, (uint8 *)&hdr );
   \   00006F                ; Setup parameters for call to function writeWord
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   EE           MOV     A,R6
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ??writeWord?relay
    986            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000081                ; Setup parameters for call to function HalFlashRead
   \   000081   75..08       MOV     ?V0 + 4,#0x8
   \   000084   8F..         MOV     ?V0 + 5,R7
   \   000086   78..         MOV     R0,#?V0 + 4
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7406         MOV     A,#0x6
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AC82         MOV     R4,DPL
   \   000092   AD83         MOV     R5,DPH
   \   000094   AA..         MOV     R2,?V0 + 0
   \   000096   AB..         MOV     R3,?V0 + 1
   \   000098   EE           MOV     A,R6
   \   000099   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    987          
    988            if ( (hdr.id == id) && (hdr.len == len) )
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   68           XRL     A,R0
   \   0000AF   7003         JNZ     ??writeItem_1
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   69           XRL     A,R1
   \                     ??writeItem_1:
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??writeItem_2 & 0xFFFF
   \   0000B9   7406         MOV     A,#0x6
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   65..         XRL     A,?V0 + 2
   \   0000C1   7004         JNZ     ??writeItem_3
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   65..         XRL     A,?V0 + 3
   \                     ??writeItem_3:
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??writeItem_2 & 0xFFFF
    989            {
    990              if ( flag )
   \   0000CC   E5..         MOV     A,?V0 + 6
   \   0000CE   7003         JNZ     $+5
   \   0000D0   02....       LJMP    ??writeItem_4 & 0xFFFF
    991              {
    992                uint16 chk = calcChkB( len, buf );
   \   0000D3   741B         MOV     A,#0x1b
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   A8..         MOV     R0,?V0 + 2
   \   0000E1   A9..         MOV     R1,?V0 + 3
   \   0000E3   E8           MOV     A,R0
   \   0000E4   5403         ANL     A,#0x3
   \   0000E6   F5..         MOV     ?V0 + 4,A
   \   0000E8   E582         MOV     A,DPL
   \   0000EA   7002         JNZ     ??writeItem_5
   \   0000EC   E583         MOV     A,DPH
   \                     ??writeItem_5:
   \   0000EE   7015         JNZ     ??writeItem_6
   \   0000F0   E8           MOV     A,R0
   \   0000F1   75F0FF       MOV     B,#-0x1
   \   0000F4   A4           MUL     AB
   \   0000F5   F8           MOV     R0,A
   \   0000F6   AAF0         MOV     R2,B
   \   0000F8   75F0FF       MOV     B,#-0x1
   \   0000FB   E9           MOV     A,R1
   \   0000FC   A4           MUL     AB
   \   0000FD   2A           ADD     A,R2
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E8           MOV     A,R0
   \   000100   FA           MOV     R2,A
   \   000101   E9           MOV     A,R1
   \   000102   FB           MOV     R3,A
   \   000103   8022         SJMP    ??writeItem_7
   \                     ??writeItem_6:
   \   000105   7A00         MOV     R2,#0x0
   \   000107   7B00         MOV     R3,#0x0
   \   000109   800A         SJMP    ??writeItem_8
   \                     ??writeItem_9:
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FC           MOV     R4,A
   \   00010D   EA           MOV     A,R2
   \   00010E   2C           ADD     A,R4
   \   00010F   FA           MOV     R2,A
   \   000110   EB           MOV     A,R3
   \   000111   3400         ADDC    A,#0x0
   \   000113   FB           MOV     R3,A
   \   000114   A3           INC     DPTR
   \                     ??writeItem_8:
   \   000115   E8           MOV     A,R0
   \   000116   FC           MOV     R4,A
   \   000117   E9           MOV     A,R1
   \   000118   FD           MOV     R5,A
   \   000119   74FF         MOV     A,#-0x1
   \   00011B   2C           ADD     A,R4
   \   00011C   18           DEC     R0
   \   00011D   74FF         MOV     A,#-0x1
   \   00011F   3D           ADDC    A,R5
   \   000120   F9           MOV     R1,A
   \   000121   EC           MOV     A,R4
   \   000122   7001         JNZ     ??writeItem_10
   \   000124   ED           MOV     A,R5
   \                     ??writeItem_10:
   \   000125   70E4         JNZ     ??writeItem_9
   \                     ??writeItem_7:
   \   000127   E5..         MOV     A,?V0 + 4
   \   000129   601F         JZ      ??writeItem_11
   \   00012B   7404         MOV     A,#0x4
   \   00012D   C3           CLR     C
   \   00012E   95..         SUBB    A,?V0 + 4
   \   000130   F8           MOV     R0,A
   \   000131   E4           CLR     A
   \   000132   9400         SUBB    A,#0x0
   \   000134   F9           MOV     R1,A
   \   000135   E8           MOV     A,R0
   \   000136   75F0FF       MOV     B,#-0x1
   \   000139   A4           MUL     AB
   \   00013A   F8           MOV     R0,A
   \   00013B   ACF0         MOV     R4,B
   \   00013D   75F0FF       MOV     B,#-0x1
   \   000140   E9           MOV     A,R1
   \   000141   A4           MUL     AB
   \   000142   2C           ADD     A,R4
   \   000143   F9           MOV     R1,A
   \   000144   EA           MOV     A,R2
   \   000145   28           ADD     A,R0
   \   000146   FA           MOV     R2,A
   \   000147   EB           MOV     A,R3
   \   000148   39           ADDC    A,R1
   \   000149   FB           MOV     R3,A
   \                     ??writeItem_11:
   \   00014A   85..82       MOV     DPL,?XSP + 0
   \   00014D   85..83       MOV     DPH,?XSP + 1
   \   000150   EA           MOV     A,R2
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   EB           MOV     A,R3
   \   000154   F0           MOVX    @DPTR,A
    993          
    994                offset += OSAL_NV_HDR_SIZE;
   \   000155   12....       LCALL   ?Subroutine25 & 0xFFFF
    995                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_49:
   \   000158   741B         MOV     A,#0x1b
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   7002         JNZ     ??writeItem_12
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \                     ??writeItem_12:
   \   000162   601A         JZ      ??writeItem_13
    996                {
    997                  writeBuf( pg, offset, len, buf );
   \   000164                ; Setup parameters for call to function writeBuf
   \   000164   741B         MOV     A,#0x1b
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016C   AC..         MOV     R4,?V0 + 2
   \   00016E   AD..         MOV     R5,?V0 + 3
   \   000170   AA..         MOV     R2,?V0 + 0
   \   000172   AB..         MOV     R3,?V0 + 1
   \   000174   EE           MOV     A,R6
   \   000175   F9           MOV     R1,A
   \   000176   12....       LCALL   ??writeBuf?relay
   \   000179   7402         MOV     A,#0x2
   \   00017B   12....       LCALL   ?DEALLOC_XSTACK8
    998                }
    999          
   1000                if ( chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_13:
   \   00017E                ; Setup parameters for call to function calcChkF
   \   00017E   AC..         MOV     R4,?V0 + 2
   \   000180   AD..         MOV     R5,?V0 + 3
   \   000182   AA..         MOV     R2,?V0 + 0
   \   000184   AB..         MOV     R3,?V0 + 1
   \   000186   EE           MOV     A,R6
   \   000187   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   E0           MOVX    A,@DPTR
   \   000191   68           XRL     A,R0
   \   000192   7003         JNZ     ??writeItem_14
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   69           XRL     A,R1
   \                     ??writeItem_14:
   \   000197   7044         JNZ     ??writeItem_2
   1001                {
   1002                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   \   000199                ; Setup parameters for call to function writeWordH
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   AC82         MOV     R4,DPL
   \   0001A1   AD83         MOV     R5,DPH
   \   0001A3   74FC         MOV     A,#-0x4
   \   0001A5   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0001A8   F9           MOV     R1,A
   \   0001A9   12....       LCALL   ??writeWordH?relay
   1003                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   0001AC                ; Setup parameters for call to function HalFlashRead
   \   0001AC   75..08       MOV     ?V0 + 2,#0x8
   \   0001AF   8F..         MOV     ?V0 + 3,R7
   \   0001B1   78..         MOV     R0,#?V0 + 2
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B6   7406         MOV     A,#0x6
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   AC82         MOV     R4,DPL
   \   0001BD   AD83         MOV     R5,DPH
   \   0001BF   74F8         MOV     A,#-0x8
   \   0001C1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001C4   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
   1004          
   1005                  if ( chk == hdr.chk )
   \   0001CA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0001CD   7408         MOV     A,#0x8
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   68           XRL     A,R0
   \   0001D4   7003         JNZ     ??writeItem_15
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   69           XRL     A,R1
   \                     ??writeItem_15:
   \   0001D9   7002         JNZ     ??writeItem_2
   1006                  {
   1007                    rtrn = pg;
   \                     ??writeItem_4:
   \   0001DB   EE           MOV     A,R6
   \   0001DC   FF           MOV     R7,A
   1008                  }
   1009                }
   1010              }
   1011              else
   1012              {
   1013                rtrn = pg;
   1014              }
   1015            }
   1016          
   1017            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1018            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_2:
   \   0001DD   7406         MOV     A,#0x6
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001E5   F8           MOV     R0,A
   \   0001E6   E4           CLR     A
   \   0001E7   39           ADDC    A,R1
   \   0001E8   F9           MOV     R1,A
   \   0001E9   7402         MOV     A,#0x2
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   FA           MOV     R2,A
   \   0001F0   A3           INC     DPTR
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   8A82         MOV     DPL,R2
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   28           ADD     A,R0
   \   0001F8   F0           MOVX    @DPTR,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   39           ADDC    A,R1
   \   0001FC   F0           MOVX    @DPTR,A
   1019          
   1020            return rtrn;
   \   0001FD   EF           MOV     A,R7
   \   0001FE   F9           MOV     R1,A
   \   0001FF   740C         MOV     A,#0xc
   \   000201   02....       LJMP    ?Subroutine4 & 0xFFFF
   1021          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   25..         ADD     A,?V0 + 0
   \   000002   FA           MOV     R2,A
   \   000003   74FF         MOV     A,#-0x1
   \   000005   35..         ADDC    A,?V0 + 1
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0
   1022          
   1023          /*********************************************************************
   1024           * @fn      osal_nv_init
   1025           *
   1026           * @brief   Initialize NV service.
   1027           *
   1028           * @param   p - Not used.
   1029           *
   1030           * @return  none
   1031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1033          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1034            (void)p;  // Suppress Lint warning.
   1035            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   ??initNV?relay
   1036          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1037          
   1038          /*********************************************************************
   1039           * @fn      osal_nv_item_init
   1040           *
   1041           * @brief   If the NV item does not already exist, it is created and
   1042           *          initialized with the data passed to the function, if any.
   1043           *          This function must be called before calling osal_nv_read() or
   1044           *          osal_nv_write().
   1045           *
   1046           * @param   id  - Valid NV item Id.
   1047           * @param   len - Item length.
   1048           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1049           *
   1050           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1051           *          ZSUCCESS       - Id already existed, no action taken.
   1052           *          NV_OPER_FAILED - Failure to find or create Id.
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1055          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine17 & 0xFFFF
   1056            /* Global fail flag for fail due to low bus voltage has less impact on code
   1057             * size than passing back a return value all the way from the lowest level.
   1058             */
   1059            failF = FALSE;
   \                     ??CrossCallReturnLabel_28:
   \   000015   E4           CLR     A
   \   000016   90....       MOV     DPTR,#failF
   \   000019   F0           MOVX    @DPTR,A
   1060          
   1061            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   \   00001A                ; Setup parameters for call to function findItem
   \   00001A   12....       LCALL   ??findItem?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??osal_nv_item_init_0
   \   000020   EB           MOV     A,R3
   \                     ??osal_nv_item_init_0:
   \   000021   6004         JZ      ??osal_nv_item_init_1
   1062            {
   1063              return ZSUCCESS;
   \   000023   7900         MOV     R1,#0x0
   \   000025   802B         SJMP    ??osal_nv_item_init_2
   1064            }
   1065            else if ( initItem( TRUE, id, len, buf ) )
   \                     ??osal_nv_item_init_1:
   \   000027                ; Setup parameters for call to function initItem
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   AC..         MOV     R4,?V0 + 0
   \   00002E   AD..         MOV     R5,?V0 + 1
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??initItem?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   600F         JZ      ??osal_nv_item_init_3
   1066            {
   1067              if ( failF )
   \   000041   90....       MOV     DPTR,#failF
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6005         JZ      ??osal_nv_item_init_4
   1068              {
   1069                (void)initNV();  // See comment at the declaration of failF.
   \   000047                ; Setup parameters for call to function initNV
   \   000047   12....       LCALL   ??initNV?relay
   1070                return NV_OPER_FAILED;
   \   00004A   8004         SJMP    ??osal_nv_item_init_3
   1071              }
   1072              else
   1073              {
   1074                return NV_ITEM_UNINIT;
   \                     ??osal_nv_item_init_4:
   \   00004C   7909         MOV     R1,#0x9
   \   00004E   8002         SJMP    ??osal_nv_item_init_2
   1075              }
   1076            }
   1077            else
   1078            {
   1079              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_3:
   \   000050   790A         MOV     R1,#0xa
   1080            }
   \                     ??osal_nv_item_init_2:
   \   000052   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1081          }
   1082          
   1083          /*********************************************************************
   1084           * @fn      osal_nv_item_len
   1085           *
   1086           * @brief   Get the data length of the item stored in NV memory.
   1087           *
   1088           * @param   id  - Valid NV item Id.
   1089           *
   1090           * @return  Item length, if found; zero otherwise.
   1091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1092          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1093          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1094            uint16 offset = findItem( id );
   \   00000A                ; Setup parameters for call to function findItem
   \   00000A   12....       LCALL   ??findItem?relay
   1095          
   1096            if ( offset == OSAL_NV_ITEM_NULL )
   \   00000D   EA           MOV     A,R2
   \   00000E   7001         JNZ     ??osal_nv_item_len_0
   \   000010   EB           MOV     A,R3
   \                     ??osal_nv_item_len_0:
   \   000011   7006         JNZ     ??osal_nv_item_len_1
   1097            {
   1098              return 0;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8028         SJMP    ??CrossCallReturnLabel_40
   1099            }
   1100            else
   1101            {
   1102              osalNvHdr_t hdr;
   1103              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_1:
   \   000019                ; Setup parameters for call to function HalFlashRead
   \   000019   75..08       MOV     ?V0 + 0,#0x8
   \   00001C   75..00       MOV     ?V0 + 1,#0x0
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   74F8         MOV     A,#-0x8
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74FF         MOV     A,#-0x1
   \   000033   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1104              return hdr.len;
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?Subroutine21 & 0xFFFF
   1105            }
   \                     ??CrossCallReturnLabel_40:
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   7F02         MOV     R7,#0x2
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
   1106          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   3B           ADDC    A,R3
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   FB           MOV     R3,A
   \   000001   90....       MOV     DPTR,#findPg
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0
   1107          
   1108          /*********************************************************************
   1109           * @fn      osal_nv_write
   1110           *
   1111           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1112           *          an element of an item by indexing into the item with an offset.
   1113           *
   1114           * @param   id  - Valid NV item Id.
   1115           * @param   ndx - Index offset into item
   1116           * @param   len - Length of data to write.
   1117           * @param  *buf - Data to write.
   1118           *
   1119           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1120           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1123          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V0 + 2,R4
   \   000016   8D..         MOV     ?V0 + 3,R5
   1124            uint8 rtrn = ZSUCCESS;
   \   000018   75..00       MOV     ?V0 + 1,#0x0
   1125          
   1126            /* Global fail flag for fail due to low bus voltage has less impact on code
   1127             * size than passing back a return value all the way from the lowest level.
   1128             */
   1129            failF = FALSE;
   \   00001B   E4           CLR     A
   \   00001C   90....       MOV     DPTR,#failF
   \   00001F   F0           MOVX    @DPTR,A
   1130          
   1131            if ( len != 0 )
   \   000020   741F         MOV     A,#0x1f
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   7002         JNZ     ??osal_nv_write_0
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \                     ??osal_nv_write_0:
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1132            {
   1133              osalNvHdr_t hdr;
   1134              uint16 origOff, srcOff;
   1135              uint16 cnt;
   1136              uint8 *ptr;
   1137          
   1138              origOff = srcOff = findItem( id );
   \   00002F                ; Setup parameters for call to function findItem
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000037   12....       LCALL   ??findItem?relay
   \   00003A   8A..         MOV     ?V0 + 4,R2
   \   00003C   8B..         MOV     ?V0 + 5,R3
   \   00003E   A8..         MOV     R0,?V0 + 4
   \   000040   A9..         MOV     R1,?V0 + 5
   \   000042   E8           MOV     A,R0
   \   000043   FE           MOV     R6,A
   \   000044   E9           MOV     A,R1
   \   000045   FF           MOV     R7,A
   \   000046   7405         MOV     A,#0x5
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine7 & 0xFFFF
   1139              if ( srcOff == OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_5:
   \   00004E   EE           MOV     A,R6
   \   00004F   7001         JNZ     ??osal_nv_write_2
   \   000051   EF           MOV     A,R7
   \                     ??osal_nv_write_2:
   \   000052   7005         JNZ     ??osal_nv_write_3
   1140              {
   1141                return NV_ITEM_UNINIT;
   \   000054   7909         MOV     R1,#0x9
   \   000056   02....       LJMP    ??osal_nv_write_4 & 0xFFFF
   1142              }
   1143          
   1144              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   000059                ; Setup parameters for call to function HalFlashRead
   \   000059   75..08       MOV     ?V0 + 4,#0x8
   \   00005C   75..00       MOV     ?V0 + 5,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7409         MOV     A,#0x9
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AC82         MOV     R4,DPL
   \   00006B   AD83         MOV     R5,DPH
   \   00006D   74F8         MOV     A,#-0x8
   \   00006F   2E           ADD     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   74FF         MOV     A,#-0x1
   \   000073   3F           ADDC    A,R7
   \   000074   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   1145              if ( hdr.len < (ndx + len) )
   \   00007A   7409         MOV     A,#0x9
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   C082         PUSH    DPL
   \   000081   C083         PUSH    DPH
   \   000083   741F         MOV     A,#0x1f
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00008B   D083         POP     DPH
   \   00008D   D082         POP     DPL
   \   00008F   C3           CLR     C
   \   000090   E0           MOVX    A,@DPTR
   \   000091   98           SUBB    A,R0
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   99           SUBB    A,R1
   \   000095   5005         JNC     ??osal_nv_write_5
   1146              {
   1147                return NV_OPER_FAILED;
   \   000097   790A         MOV     R1,#0xa
   \   000099   02....       LJMP    ??osal_nv_write_4 & 0xFFFF
   1148              }
   1149          
   1150              srcOff += ndx;
   \                     ??osal_nv_write_5:
   \   00009C   12....       LCALL   ?Subroutine31 & 0xFFFF
   1151              ptr = buf;
   \                     ??CrossCallReturnLabel_61:
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F5..         MOV     ?V0 + 6,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F5..         MOV     ?V0 + 7,A
   1152              cnt = len;
   \   0000A9   741F         MOV     A,#0x1f
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B9   8019         SJMP    ??osal_nv_write_6
   1153              while ( cnt )
   1154              {
   1155                uint8 tmp;
   1156                HalFlashRead(findPg, srcOff++, &tmp, 1);
   1157                if ( tmp != *ptr++ )
   1158                {
   1159                  break;
   1160                }
   1161                cnt--;
   \                     ??osal_nv_write_7:
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   24FF         ADD     A,#-0x1
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   F8           MOV     R0,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   34FF         ADDC    A,#-0x1
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   F9           MOV     R1,A
   \   0000CB   E8           MOV     A,R0
   \   0000CC   7001         JNZ     ??osal_nv_write_8
   \   0000CE   E9           MOV     A,R1
   \                     ??osal_nv_write_8:
   \   0000CF   7003         JNZ     $+5
   \   0000D1   02....       LJMP    ??osal_nv_write_9 & 0xFFFF
   \                     ??osal_nv_write_6:
   \   0000D4                ; Setup parameters for call to function HalFlashRead
   \   0000D4   75..01       MOV     ?V0 + 4,#0x1
   \   0000D7   78..         MOV     R0,#?V0 + 4
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   AC82         MOV     R4,DPL
   \   0000E3   AD83         MOV     R5,DPH
   \   0000E5   EE           MOV     A,R6
   \   0000E6   FA           MOV     R2,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   EE           MOV     A,R6
   \   0000EF   2401         ADD     A,#0x1
   \   0000F1   0E           INC     R6
   \   0000F2   EF           MOV     A,R7
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   FF           MOV     R7,A
   \   0000F6   A8..         MOV     R0,?V0 + 6
   \   0000F8   A9..         MOV     R1,?V0 + 7
   \   0000FA   8882         MOV     DPL,R0
   \   0000FC   8983         MOV     DPH,R1
   \   0000FE   A3           INC     DPTR
   \   0000FF   8582..       MOV     ?V0 + 6,DPL
   \   000102   8583..       MOV     ?V0 + 7,DPH
   \   000105   85..82       MOV     DPL,?XSP + 0
   \   000108   85..83       MOV     DPH,?XSP + 1
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FA           MOV     R2,A
   \   00010D   8882         MOV     DPL,R0
   \   00010F   8983         MOV     DPH,R1
   \   000111   E0           MOVX    A,@DPTR
   \   000112   6A           XRL     A,R2
   \   000113   60A6         JZ      ??osal_nv_write_7
   1162              }
   1163          
   1164              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1165              {
   1166                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000115                ; Setup parameters for call to function initItem
   \   000115   85..82       MOV     DPL,?XSP + 0
   \   000118   85..83       MOV     DPH,?XSP + 1
   \   00011B   8582..       MOV     ?V0 + 4,DPL
   \   00011E   8583..       MOV     ?V0 + 5,DPH
   \   000121   78..         MOV     R0,#?V0 + 4
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   740B         MOV     A,#0xb
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000136   7900         MOV     R1,#0x0
   \   000138   12....       LCALL   ??initItem?relay
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   E9           MOV     A,R1
   \   000141   F5..         MOV     ?V0 + 0,A
   1167          
   1168                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000143   7003         JNZ     $+5
   \   000145   02....       LJMP    ??osal_nv_write_10 & 0xFFFF
   1169                {
   1170                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000148   7409         MOV     A,#0x9
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000150   7401         MOV     A,#0x1
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ?Subroutine7 & 0xFFFF
   1171                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??CrossCallReturnLabel_7:
   \   000158   E5..         MOV     A,?V0 + 0
   \   00015A   C3           CLR     C
   \   00015B   33           RLC     A
   \   00015C   F8           MOV     R0,A
   \   00015D   E4           CLR     A
   \   00015E   33           RLC     A
   \   00015F   F9           MOV     R1,A
   \   000160   E8           MOV     A,R0
   \   000161   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000163   F8           MOV     R0,A
   \   000164   E9           MOV     A,R1
   \   000165   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   000167   F9           MOV     R1,A
   \   000168   7403         MOV     A,#0x3
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000170   7403         MOV     A,#0x3
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000178   C082         PUSH    DPL
   \   00017A   C083         PUSH    DPH
   \   00017C   7401         MOV     A,#0x1
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000184   D083         POP     DPH
   \   000186   D082         POP     DPL
   \   000188   12....       LCALL   ?Subroutine23 & 0xFFFF
   1172                  uint8 srcPg = findPg;
   \                     ??CrossCallReturnLabel_46:
   \   00018B   90....       MOV     DPTR,#findPg
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0 + 6,A
   1173                  srcOff = origOff;
   1174          
   1175                  setItem( srcPg, srcOff, eNvXfer );
   \   000191                ; Setup parameters for call to function setItem
   \   000191   7C00         MOV     R4,#0x0
   \   000193   7405         MOV     A,#0x5
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine16 & 0xFFFF
   1176          
   1177                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_25:
   \   00019B                ; Setup parameters for call to function xferBuf
   \   00019B   78..         MOV     R0,#?V0 + 2
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   8E..         MOV     ?V0 + 4,R6
   \   0001A2   8F..         MOV     ?V0 + 5,R7
   \   0001A4   78..         MOV     R0,#?V0 + 4
   \   0001A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A9   AC..         MOV     R4,?V0 + 0
   \   0001AB   7409         MOV     A,#0x9
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001B3   A9..         MOV     R1,?V0 + 6
   \   0001B5   12....       LCALL   ??xferBuf?relay
   \   0001B8   7404         MOV     A,#0x4
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
   1178                  srcOff += ndx;
   1179                  dstOff += ndx;
   \   0001BD   12....       LCALL   ?Subroutine31 & 0xFFFF
   1180          
   1181                  writeBuf( dstPg, dstOff, len, buf );
   \                     ??CrossCallReturnLabel_62:
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C6   7421         MOV     A,#0x21
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001CE   12....       LCALL   ??writeBuf?relay
   \   0001D1   7402         MOV     A,#0x2
   \   0001D3   12....       LCALL   ?DEALLOC_XSTACK8
   1182                  srcOff += len;
   1183                  dstOff += len;
   1184          
   1185                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001D6                ; Setup parameters for call to function xferBuf
   \   0001D6   7409         MOV     A,#0x9
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   C3           CLR     C
   \   0001DD   95..         SUBB    A,?V0 + 2
   \   0001DF   FA           MOV     R2,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   95..         SUBB    A,?V0 + 3
   \   0001E4   FB           MOV     R3,A
   \   0001E5   741F         MOV     A,#0x1f
   \   0001E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EA   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001ED   EA           MOV     A,R2
   \   0001EE   C3           CLR     C
   \   0001EF   98           SUBB    A,R0
   \   0001F0   F5..         MOV     ?V0 + 4,A
   \   0001F2   EB           MOV     A,R3
   \   0001F3   99           SUBB    A,R1
   \   0001F4   F5..         MOV     ?V0 + 5,A
   \   0001F6   78..         MOV     R0,#?V0 + 4
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   7421         MOV     A,#0x21
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   E0           MOVX    A,@DPTR
   \   000201   2E           ADD     A,R6
   \   000202   F5..         MOV     ?V0 + 4,A
   \   000204   A3           INC     DPTR
   \   000205   E0           MOVX    A,@DPTR
   \   000206   3F           ADDC    A,R7
   \   000207   F5..         MOV     ?V0 + 5,A
   \   000209   78..         MOV     R0,#?V0 + 4
   \   00020B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020E   AC..         MOV     R4,?V0 + 0
   \   000210   7409         MOV     A,#0x9
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000218   7423         MOV     A,#0x23
   \   00021A   12....       LCALL   ?XSTACK_DISP0_8
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   28           ADD     A,R0
   \   00021F   FA           MOV     R2,A
   \   000220   A3           INC     DPTR
   \   000221   E0           MOVX    A,@DPTR
   \   000222   39           ADDC    A,R1
   \   000223   FB           MOV     R3,A
   \   000224   A9..         MOV     R1,?V0 + 6
   \   000226   12....       LCALL   ??xferBuf?relay
   \   000229   7404         MOV     A,#0x4
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   1186          
   1187                  // Calculate and write the new checksum.
   1188                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00022E   7403         MOV     A,#0x3
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000236   C082         PUSH    DPL
   \   000238   C083         PUSH    DPH
   \   00023A   7401         MOV     A,#0x1
   \   00023C   12....       LCALL   ?XSTACK_DISP0_8
   \   00023F   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000242   D083         POP     DPH
   \   000244   D082         POP     DPL
   \   000246   12....       LCALL   ?Subroutine23 & 0xFFFF
   1189                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   \                     ??CrossCallReturnLabel_47:
   \   000249                ; Setup parameters for call to function calcChkF
   \   000249   7409         MOV     A,#0x9
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000251   12....       LCALL   ??calcChkF?relay
   \   000254   7401         MOV     A,#0x1
   \   000256   12....       LCALL   ?XSTACK_DISP0_8
   \   000259   EA           MOV     A,R2
   \   00025A   F0           MOVX    @DPTR,A
   \   00025B   A3           INC     DPTR
   \   00025C   EB           MOV     A,R3
   \   00025D   F0           MOVX    @DPTR,A
   1190                  dstOff -= OSAL_NV_HDR_SIZE;
   \   00025E   EE           MOV     A,R6
   \   00025F   24F8         ADD     A,#-0x8
   \   000261   FE           MOV     R6,A
   \   000262   EF           MOV     A,R7
   \   000263   34FF         ADDC    A,#-0x1
   \   000265   FF           MOV     R7,A
   1191                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   \   000266                ; Setup parameters for call to function writeWordH
   \   000266   7401         MOV     A,#0x1
   \   000268   12....       LCALL   ?XSTACK_DISP0_8
   \   00026B   AC82         MOV     R4,DPL
   \   00026D   AD83         MOV     R5,DPH
   \   00026F   7404         MOV     A,#0x4
   \   000271   2E           ADD     A,R6
   \   000272   FA           MOV     R2,A
   \   000273   E4           CLR     A
   \   000274   3F           ADDC    A,R7
   \   000275   FB           MOV     R3,A
   \   000276   A9..         MOV     R1,?V0 + 0
   \   000278   12....       LCALL   ??writeWordH?relay
   1192                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00027B                ; Setup parameters for call to function HalFlashRead
   \   00027B   75..08       MOV     ?V0 + 2,#0x8
   \   00027E   75..00       MOV     ?V0 + 3,#0x0
   \   000281   78..         MOV     R0,#?V0 + 2
   \   000283   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000286   7409         MOV     A,#0x9
   \   000288   12....       LCALL   ?XSTACK_DISP0_8
   \   00028B   AC82         MOV     R4,DPL
   \   00028D   AD83         MOV     R5,DPH
   \   00028F   EE           MOV     A,R6
   \   000290   FA           MOV     R2,A
   \   000291   EF           MOV     A,R7
   \   000292   FB           MOV     R3,A
   \   000293   A9..         MOV     R1,?V0 + 0
   \   000295   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000298   12....       LCALL   ?DEALLOC_XSTACK8
   1193          
   1194                  if ( tmp == hdr.chk )
   \   00029B   7401         MOV     A,#0x1
   \   00029D   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A0   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0002A3   740B         MOV     A,#0xb
   \   0002A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   68           XRL     A,R0
   \   0002AA   7003         JNZ     ??osal_nv_write_11
   \   0002AC   A3           INC     DPTR
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   69           XRL     A,R1
   \                     ??osal_nv_write_11:
   \   0002AF   700C         JNZ     ??osal_nv_write_12
   1195                  {
   1196                    setItem( srcPg, origOff, eNvZero );
   \   0002B1                ; Setup parameters for call to function setItem
   \   0002B1   7C01         MOV     R4,#0x1
   \   0002B3   7405         MOV     A,#0x5
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   12....       LCALL   ?Subroutine16 & 0xFFFF
   1197                  }
   \                     ??CrossCallReturnLabel_26:
   \   0002BB   8003         SJMP    ??osal_nv_write_13
   1198                  else
   1199                  {
   1200                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_12:
   \   0002BD   75..0A       MOV     ?V0 + 1,#0xa
   1201                  }
   1202          
   1203                  if ( dstPg == pgRes )
   \                     ??osal_nv_write_13:
   \   0002C0   90....       MOV     DPTR,#pgRes
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   65..         XRL     A,?V0 + 0
   \   0002C6   7010         JNZ     ??osal_nv_write_9
   1204                  {
   1205                    compactPage( comPg );
   \   0002C8                ; Setup parameters for call to function compactPage
   \   0002C8   85..82       MOV     DPL,?XSP + 0
   \   0002CB   85..83       MOV     DPH,?XSP + 1
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F9           MOV     R1,A
   \   0002D0   12....       LCALL   ??compactPage?relay
   \   0002D3   8003         SJMP    ??osal_nv_write_9
   1206                  }
   1207                }
   1208                else
   1209                {
   1210                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_10:
   \   0002D5   75..0A       MOV     ?V0 + 1,#0xa
   1211                }
   1212              }
   1213            }
   1214          
   1215            if ( failF )
   \                     ??osal_nv_write_9:
   \   0002D8   90....       MOV     DPTR,#failF
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   6006         JZ      ??osal_nv_write_1
   1216            {
   1217              (void)initNV();  // See comment at the declaration of failF.
   \   0002DE                ; Setup parameters for call to function initNV
   \   0002DE   12....       LCALL   ??initNV?relay
   1218              rtrn = NV_OPER_FAILED;
   \   0002E1   75..0A       MOV     ?V0 + 1,#0xa
   1219            }
   1220          
   1221            return rtrn;
   \                     ??osal_nv_write_1:
   \   0002E4   A9..         MOV     R1,?V0 + 1
   \                     ??osal_nv_write_4:
   \   0002E6   740F         MOV     A,#0xf
   \   0002E8                REQUIRE ?Subroutine2
   \   0002E8                ; // Fall through to label ?Subroutine2
   1222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   35..         ADDC    A,?V0 + 3
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function writeBuf
   \   000008   7421         MOV     A,#0x21
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 3
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A9..         MOV     R1,?V0 + 6
   \   000005   12....       LCALL   ??setItem?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   A9..         MOV     R1,?V0 + 0
   \   00000B   22           RET
   1223          
   1224          /*********************************************************************
   1225           * @fn      osal_nv_read
   1226           *
   1227           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1228           *          an element of an item by indexing into the item with an offset.
   1229           *          Read data is copied into *buf.
   1230           *
   1231           * @param   id  - Valid NV item Id.
   1232           * @param   ndx - Index offset into item
   1233           * @param   len - Length of data to read.
   1234           * @param  *buf - Data is read into this buffer.
   1235           *
   1236           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1237           *          Otherwise, NV_OPER_FAILED for failure.
   1238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1239          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1240          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   740E         MOV     A,#0xe
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   1241            uint16 offset;
   1242          
   1243            offset = findItem( id );
   \   00001B                ; Setup parameters for call to function findItem
   \   00001B   12....       LCALL   ??findItem?relay
   1244            if ( offset == OSAL_NV_ITEM_NULL )
   \   00001E   EA           MOV     A,R2
   \   00001F   7001         JNZ     ??osal_nv_read_0
   \   000021   EB           MOV     A,R3
   \                     ??osal_nv_read_0:
   \   000022   7004         JNZ     ??osal_nv_read_1
   1245            {
   1246              return NV_OPER_FAILED;
   \   000024   790A         MOV     R1,#0xa
   \   000026   8017         SJMP    ??osal_nv_read_2
   1247            }
   1248          
   1249            HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_1:
   \   000028                ; Setup parameters for call to function HalFlashRead
   \   000028   78..         MOV     R0,#?V0 + 2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   EE           MOV     A,R6
   \   00002E   FC           MOV     R4,A
   \   00002F   EF           MOV     A,R7
   \   000030   FD           MOV     R5,A
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   2A           ADD     A,R2
   \   000034   FA           MOV     R2,A
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1250          
   1251            return ZSUCCESS;
   \   00003D   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_2:
   \   00003F   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1252          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1253          
   1254          /*********************************************************************
   1255          *********************************************************************/

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     calcChkF                0      0     52
       -> HalFlashRead       0      0     42
     compactPage             0      0     59
       -> writeWordH         0      0     48
       -> calcChkF           0      0     48
       -> setItem            0      0     48
       -> writeBuf           0      0     52
       -> xferBuf            0      0     56
       -> setItem            0      0     48
       -> HalFlashRead       0      0     52
       -> erasePage          0      0     48
       -> setPageUse         0      0     48
     erasePage               0      0     33
       -> HalAdcCheckVdd     0      0     18
       -> HalFlashErase      0      0     18
     findItem                0      0     43
       -> initPage           0      0     24
     initItem                1      0     52
       -> writeItem          0      0     38
       -> compactPage        0      0     32
     initNV                  0      0     53
       -> HalFlashRead       0      0     44
       -> setPageUse         0      0     40
       -> initPage           0      0     40
       -> setPageUse         0      0     40
       -> compactPage        0      0     40
       -> erasePage          0      0     40
       -> initNV             0      0     40
     initPage                0      0     48
       -> HalFlashRead       0      0     56
       -> calcChkF           0      0     52
       -> findItem           0      0     52
       -> setItem            0      0     52
       -> setItem            0      0     52
     osal_nv_init            2      0      0
       -> initNV             4      0      0
     osal_nv_item_init       0      0     18
       -> findItem           0      0     28
       -> initItem           0      0     32
       -> initNV             0      0     28
     osal_nv_item_len        0      0     20
       -> findItem           0      0     36
       -> HalFlashRead       0      0     40
     osal_nv_read            0      0     20
       -> findItem           0      0     28
       -> HalFlashRead       0      0     32
     osal_nv_write           2      0     39
       -> findItem           0      0     62
       -> HalFlashRead       0      0     66
       -> HalFlashRead       0      0     66
       -> initItem           0      0     66
       -> setItem            0      0     62
       -> xferBuf            0      0     70
       -> writeBuf           0      0     66
       -> xferBuf            0      0     70
       -> calcChkF           0      0     62
       -> writeWordH         0      0     62
       -> HalFlashRead       0      0     66
       -> setItem            0      0     62
       -> compactPage        0      0     62
       -> initNV             0      0     62
     setItem                 0      0     55
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> writeWord          0      0     44
     setPageUse              0      0     44
       -> writeWord          0      0     34
     writeBuf                1      0     55
       -> HalFlashRead       0      0     44
       -> writeWord          0      0     40
       -> HalAdcCheckVdd     0      0     40
       -> HalFlashWrite      0      0     44
       -> HalFlashRead       0      0     44
       -> writeWord          0      0     40
     writeItem               0      0     48
       -> setPageUse         0      0     54
       -> writeWord          0      0     54
       -> HalFlashRead       0      0     58
       -> writeBuf           0      0     58
       -> calcChkF           0      0     54
       -> writeWordH         0      0     54
       -> HalFlashRead       0      0     58
     writeWord               0      0     43
       -> HalAdcCheckVdd     0      0     28
       -> HalFlashWrite      0      0     32
     writeWordH              1      0     44
       -> writeWord          0      0     26
     xferBuf                 1      0     58
       -> HalFlashRead       0      0     46
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42
       -> HalFlashRead       0      0     46
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _nvBuf                    12288
     _nvIEEE                       8
     pgOff                        12
     pgLost                       12
     pgRes                         1
     findPg                        1
     failF                         1
     initNV                      223
     ?Subroutine0                  5
     ??Subroutine50_0              1
     ??Subroutine51_0              6
     setPageUse                   52
     ?Subroutine1                  3
     ??Subroutine41_0              5
     ??Subroutine42_0              2
     ??Subroutine43_0             12
     initPage                    448
     ?Subroutine32                 4
     ?Subroutine8                  5
     ?Subroutine39                11
     ?Subroutine27                11
     ?Subroutine38                17
     ?Subroutine29                11
     ?Subroutine19                 6
     ??Subroutine46_0              6
     ?Subroutine21                 4
     ?Subroutine36                 6
     ?Subroutine2                  3
     ??Subroutine47_0              5
     erasePage                    46
     compactPage                 337
     ?Subroutine20                 5
     ?Subroutine15                15
     ?Subroutine10                 8
     ?Subroutine6                  7
     ?Subroutine3                  3
     ??Subroutine44_0              5
     ?Subroutine33                13
     ?Subroutine25                13
     findItem                     71
     initItem                    209
     ?Subroutine17                 8
     ?Subroutine13                 4
     ?Subroutine37                 9
     setItem                     139
     ?Subroutine11                 7
     ?Subroutine35                14
     calcChkF                    149
     ?Subroutine4                  8
     ?Subroutine40                13
     writeWord                    81
     writeWordH                   64
     writeBuf                    385
     ?Subroutine28                19
     ?Subroutine18                12
     ??Subroutine45_0              7
     ?Subroutine12                 5
     ?Subroutine7                  6
     xferBuf                     363
     ?Subroutine34                13
     ?Subroutine30                17
     ?Subroutine24                10
     ??Subroutine49_0              1
     writeItem                   516
     ?Subroutine26                10
     ?Subroutine9                  6
     osal_nv_init                 14
     osal_nv_item_init            85
     osal_nv_item_len             75
     ?Subroutine5                  1
     ??Subroutine48_0              4
     osal_nv_write               744
     ?Subroutine31                11
     ?Subroutine23                 9
     ?Subroutine22                10
     ?Subroutine16                 9
     ?Subroutine14                12
     osal_nv_read                 66
     ??initNV?relay                6
     ??setPageUse?relay            6
     ??initPage?relay              6
     ??erasePage?relay             6
     ??compactPage?relay           6
     ??findItem?relay              6
     ??initItem?relay              6
     ??setItem?relay               6
     ??calcChkF?relay              6
     ??writeWord?relay             6
     ??writeWordH?relay            6
     ??writeBuf?relay              6
     ??xferBuf?relay               6
     ??writeItem?relay             6
     ??osal_nv_init?relay          6
     ??osal_nv_item_init?relay     6
     ??osal_nv_item_len?relay      6
     ??osal_nv_write?relay         6
     ??osal_nv_read?relay          6

 
  4 484 bytes in segment BANKED_CODE
    114 bytes in segment BANK_RELAYS
      8 bytes in segment IEEE_ADDRESS_SPACE
     27 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  4 598 bytes of CODE  memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
