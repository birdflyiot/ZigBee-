###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             23/Dec/2016  12:23:41 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_led.c                       #
#    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11  #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_led.c" -D ZIGBEEPRO -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D coordinator -lC          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" --diag_suppress Pe001,Pa010 -o               #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\" -e --require_prototypes --debug --core=plain  #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü #
#                          \ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷        #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\ #
#                          ¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë       #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\NWK\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SAPI\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\ZDO\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\" -I                          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\HIGH_LEVEL\" -I                #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "D:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\" -I "D:\Program Files      #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\CLIB\" -Ohz                           #
#    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\hal_led.lst                                    #
#    Object file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\hal_led.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2009-03-13 05:45:44 -0700 (Fri, 13 Mar 2009) $
      4            Revision:       $Revision: 19408 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          
     78          /***************************************************************************************************
     79           *                                           GLOBAL VARIABLES
     80           ***************************************************************************************************/
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     89          #endif
     90          
     91          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     93          #endif
     94          
     95          /***************************************************************************************************
     96           *                                            LOCAL FUNCTION
     97           ***************************************************************************************************/
     98          #if (HAL_LED == TRUE)
     99          void HalLedUpdate (void);
    100          void HalLedOnOff (uint8 leds, uint8 mode);
    101          #endif /* HAL_LED */
    102          
    103          /***************************************************************************************************
    104           *                                            FUNCTIONS - API
    105           ***************************************************************************************************/
    106          
    107          /***************************************************************************************************
    108           * @fn      HalLedInit
    109           *
    110           * @brief   Initialize LED Service
    111           *
    112           * @param   init - pointer to void that contains the initialized value
    113           *
    114           * @return  None
    115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalLedInit (void)
   \                     HalLedInit:
    117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_LED == TRUE)
    119            /* Initialize all LEDs to OFF */
    120            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??HalLedSet?relay
    121          #endif /* HAL_LED */
    122          #ifdef BLINK_LEDS
    123            /* Initialize sleepActive to FALSE */
    124            HalLedStatusControl.sleepActive = FALSE;
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF
    125          #endif
    126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000004                REQUIRE ??Subroutine9_0
   \   000004                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    127          
    128          /***************************************************************************************************
    129           * @fn      HalLedSet
    130           *
    131           * @brief   Tun ON/OFF/TOGGLE given LEDs
    132           *
    133           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    134           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    135           * @return  None
    136           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    138          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
    139          
    140          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    141            uint8 led;
    142            HalLedControl_t *sts;
    143          
    144            switch (mode)
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for HalLedSet>_0`:
   \   00000D   01           DB        1
   \   00000E   00           DB        0
   \   00000F   01           DB        1
   \   000010   ....         DW        ??HalLedSet_0
   \   000012   03           DB        3
   \   000013   02           DB        2
   \   000014   ....         DW        ??HalLedSet_1
   \   000016   04           DB        4
   \   000017   ....         DW        ??HalLedSet_2
   \   000019   08           DB        8
   \   00001A   ....         DW        ??HalLedSet_0
   \   00001C   ....         DW        ??HalLedSet_3
    145            {
    146              case HAL_LED_MODE_BLINK:
    147                /* Default blink, 1 time, D% duty cycle */
    148                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7A01         MOV     R2,#0x1
   \                     ??HalLedSet_4:
   \   000026   12....       LCALL   ??HalLedBlink?relay
   \   000029   804B         SJMP    ??HalLedSet_3
    149                break;
    150          
    151              case HAL_LED_MODE_FLASH:
    152                /* Default flash, N times, D% duty cycle */
    153                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_2:
   \   00002B                ; Setup parameters for call to function HalLedBlink
   \   00002B   7CE8         MOV     R4,#-0x18
   \   00002D   7D03         MOV     R5,#0x3
   \   00002F   7B05         MOV     R3,#0x5
   \   000031   7A32         MOV     R2,#0x32
   \   000033   80F1         SJMP    ??HalLedSet_4
    154                break;
    155          
    156              case HAL_LED_MODE_ON:
    157              case HAL_LED_MODE_OFF:
    158              case HAL_LED_MODE_TOGGLE:
    159          
    160                led = HAL_LED_1;
   \                     ??HalLedSet_0:
   \   000035   75..01       MOV     ?V0 + 2,#0x1
    161                leds &= HAL_LED_ALL;
   \   000038   53..0F       ANL     ?V0 + 0,#0xf
    162                sts = HalLedStatusControl.HalLedControlTable;
   \   00003B   7E..         MOV     R6,#(HalLedStatusControl & 0xff)
   \   00003D   7F..         MOV     R7,#((HalLedStatusControl >> 8) & 0xff)
   \   00003F   801D         SJMP    ??HalLedSet_5
    163          
    164                while (leds)
    165                {
    166                  if (leds & led)
    167                  {
    168                    if (mode != HAL_LED_MODE_TOGGLE)
    169                    {
    170                      sts->mode = mode;  /* ON or OFF */
    171                    }
    172                    else
    173                    {
    174                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
   \                     ??HalLedSet_6:
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6401         XRL     A,#0x1
   \                     ??HalLedSet_7:
   \   000044   F0           MOVX    @DPTR,A
    175                    }
    176                    HalLedOnOff (led, sts->mode);
   \   000045                ; Setup parameters for call to function HalLedOnOff
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   A9..         MOV     R1,?V0 + 2
   \   000049   12....       LCALL   ??HalLedOnOff?relay
    177                    leds ^= led;
   \   00004C   E5..         MOV     A,?V0 + 2
   \   00004E   62..         XRL     ?V0 + 0,A
    178                  }
    179                  led <<= 1;
   \                     ??HalLedSet_8:
   \   000050   E5..         MOV     A,?V0 + 2
   \   000052   C3           CLR     C
   \   000053   33           RLC     A
   \   000054   F5..         MOV     ?V0 + 2,A
    180                  sts++;
   \   000056   EE           MOV     A,R6
   \   000057   2409         ADD     A,#0x9
   \   000059   FE           MOV     R6,A
   \   00005A   EF           MOV     A,R7
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FF           MOV     R7,A
   \                     ??HalLedSet_5:
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   6014         JZ      ??HalLedSet_3
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   55..         ANL     A,?V0 + 0
   \   000066   60E8         JZ      ??HalLedSet_8
   \   000068   7408         MOV     A,#0x8
   \   00006A   65..         XRL     A,?V0 + 1
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   60CF         JZ      ??HalLedSet_6
   \   000072   E5..         MOV     A,?V0 + 1
   \   000074   80CE         SJMP    ??HalLedSet_7
    181                }
    182                break;
    183          
    184              default:
    185                break;
    186            }
    187          
    188          #elif (HAL_LED == TRUE)
    189            LedOnOff(leds, mode);
    190          #else
    191            // HAL LED is disabled, suppress unused argument warnings
    192            (void) leds;
    193            (void) mode;
    194          #endif /* BLINK_LEDS && HAL_LED   */
    195          
    196            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   000076   90....       MOV     DPTR,#HalLedState
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   7F03         MOV     R7,#0x3
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          }
    199          
    200          /***************************************************************************************************
    201           * @fn      HalLedBlink
    202           *
    203           * @brief   Blink the leds
    204           *
    205           * @param   leds       - bit mask value of leds to be blinked
    206           *          numBlinks  - number of blinks
    207           *          percent    - the percentage in each period where the led
    208           *                       will be on
    209           *          period     - length of each cycle in milliseconds
    210           *
    211           * @return  None
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    214          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 4,R1
   \   000017   8A..         MOV     ?V0 + 7,R2
   \   000019   8B..         MOV     ?V0 + 6,R3
    215          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    216            uint8 led;
    217            HalLedControl_t *sts;
    218          
    219            if (leds && percent && period)
   \   00001B   E9           MOV     A,R1
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000021   EB           MOV     A,R3
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   7002         JNZ     ??HalLedBlink_1
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \                     ??HalLedBlink_1:
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
    220            {
    221              if (percent < 100)
   \   000037   EB           MOV     A,R3
   \   000038   C3           CLR     C
   \   000039   9464         SUBB    A,#0x64
   \   00003B   4003         JC      $+5
   \   00003D   02....       LJMP    ??HalLedBlink_2 & 0xFFFF
    222              {
    223                led = HAL_LED_1;
   \   000040   75..01       MOV     ?V0 + 5,#0x1
    224                leds &= HAL_LED_ALL;
   \   000043   53..0F       ANL     ?V0 + 4,#0xf
    225                sts = HalLedStatusControl.HalLedControlTable;
   \   000046   7E..         MOV     R6,#(HalLedStatusControl & 0xff)
   \   000048   7F..         MOV     R7,#((HalLedStatusControl >> 8) & 0xff)
   \   00004A   807B         SJMP    ??HalLedBlink_3
    226          
    227                while (leds)
    228                {
    229                  if (leds & led)
   \                     ??HalLedBlink_4:
   \   00004C   E5..         MOV     A,?V0 + 5
   \   00004E   55..         ANL     A,?V0 + 4
   \   000050   6067         JZ      ??HalLedBlink_5
    230                  {
    231                    /* Store the current state of the led before going to blinking */
    232                    preBlinkState |= (led & HalLedState);
   \   000052   90....       MOV     DPTR,#HalLedState
   \   000055   E0           MOVX    A,@DPTR
   \   000056   55..         ANL     A,?V0 + 5
   \   000058   FA           MOV     R2,A
   \   000059   90....       MOV     DPTR,#preBlinkState
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   4A           ORL     A,R2
   \   00005E   F0           MOVX    @DPTR,A
    233          
    234                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \   00005F   E4           CLR     A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   F0           MOVX    @DPTR,A
    235                    sts->time  = period;                              /* Time for one on/off cycle */
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E8           MOV     A,R0
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E9           MOV     A,R1
   \   00007B   F0           MOVX    @DPTR,A
    236                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E5..         MOV     A,?V0 + 6
   \   000084   F0           MOVX    @DPTR,A
    237                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   E5..         MOV     A,?V0 + 7
   \   00008C   F0           MOVX    @DPTR,A
    238                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   00008D   7007         JNZ     ??HalLedBlink_6
   \   00008F   7404         MOV     A,#0x4
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   F0           MOVX    @DPTR,A
    239                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6:
   \   000096                ; Setup parameters for call to function osal_GetSystemClock
   \   000096   12....       LCALL   ??osal_GetSystemClock?relay
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   EA           MOV     A,R2
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   EB           MOV     A,R3
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   EC           MOV     A,R4
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   ED           MOV     A,R5
   \   0000AC   F0           MOVX    @DPTR,A
    240                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   D2E1         SETB    0xE0 /* A   */.1
   \   0000B4   F0           MOVX    @DPTR,A
    241                    leds ^= led;
   \   0000B5   E5..         MOV     A,?V0 + 5
   \   0000B7   62..         XRL     ?V0 + 4,A
    242                  }
    243                  led <<= 1;
   \                     ??HalLedBlink_5:
   \   0000B9   E5..         MOV     A,?V0 + 5
   \   0000BB   C3           CLR     C
   \   0000BC   33           RLC     A
   \   0000BD   F5..         MOV     ?V0 + 5,A
    244                  sts++;
   \   0000BF   EE           MOV     A,R6
   \   0000C0   2409         ADD     A,#0x9
   \   0000C2   FE           MOV     R6,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   3400         ADDC    A,#0x0
   \   0000C6   FF           MOV     R7,A
    245                }
   \                     ??HalLedBlink_3:
   \   0000C7   E5..         MOV     A,?V0 + 4
   \   0000C9   7081         JNZ     ??HalLedBlink_4
    246                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000CB                ; Setup parameters for call to function osal_set_event
   \   0000CB   7A02         MOV     R2,#0x2
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   90....       MOV     DPTR,#Hal_TaskID
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   ??osal_set_event?relay
   \   0000D7   8009         SJMP    ??HalLedBlink_7
    247              }
    248              else
    249              {
    250                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_2:
   \   0000D9                ; Setup parameters for call to function HalLedSet
   \   0000D9   7A01         MOV     R2,#0x1
   \   0000DB   8002         SJMP    ??HalLedBlink_8
    251              }
    252            }
    253            else
    254            {
    255              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000DD                ; Setup parameters for call to function HalLedSet
   \   0000DD   7A00         MOV     R2,#0x0
   \                     ??HalLedBlink_8:
   \   0000DF   12....       LCALL   ??HalLedSet?relay
    256            }
    257          #elif (HAL_LED == TRUE)
    258            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    259            HalLedOnOff (leds, percent);                              /* Toggle */
    260          #else
    261            // HAL LED is disabled, suppress unused argument warnings
    262            (void) leds;
    263            (void) numBlinks;
    264            (void) percent;
    265            (void) period;
    266          #endif /* BLINK_LEDS && HAL_LED */
    267          }
   \                     ??HalLedBlink_7:
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4                REQUIRE ?Subroutine1
   \   0000E4                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          
    269          #if (HAL_LED == TRUE)
    270          /***************************************************************************************************
    271           * @fn      HalLedUpdate
    272           *
    273           * @brief   Update leds to work with blink
    274           *
    275           * @param   none
    276           *
    277           * @return  none
    278           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          void HalLedUpdate (void)
   \                     HalLedUpdate:
    280          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    281            uint8 led;
    282            uint8 pct;
    283            uint8 leds;
    284            HalLedControl_t *sts;
    285            uint32 time;
    286            uint16 next;
    287            uint16 wait;
    288          
    289            next = 0;
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    290            led  = HAL_LED_1;
   \   000013   7401         MOV     A,#0x1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
    291            leds = HAL_LED_ALL;
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    292            sts = HalLedStatusControl.HalLedControlTable;
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   74..         MOV     A,#(HalLedStatusControl & 0xff)
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#((HalLedStatusControl >> 8) & 0xff)
   \   00002F   F0           MOVX    @DPTR,A
    293          
    294            /* Check if sleep is active or not */
    295            if (!HalLedStatusControl.sleepActive)
   \   000030   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??HalLedUpdate_0 & 0xFFFF
    296            {
    297              while (leds)
    298              {
    299                if (leds & led)
   \                     ??HalLedUpdate_1:
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   D0E0         POP     A
   \   000049   FA           MOV     R2,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   5A           ANL     A,R2
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??HalLedUpdate_2 & 0xFFFF
    300                {
    301                  if (sts->mode & HAL_LED_MODE_BLINK)
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000059   4003         JC      $+5
   \   00005B   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
    302                  {
    303                    time = osal_GetSystemClock();
   \   00005E                ; Setup parameters for call to function osal_GetSystemClock
   \   00005E   12....       LCALL   ??osal_GetSystemClock?relay
   \   000061   8A..         MOV     ?V0 + 0,R2
   \   000063   8B..         MOV     ?V0 + 1,R3
   \   000065   8C..         MOV     ?V0 + 2,R4
   \   000067   8D..         MOV     ?V0 + 3,R5
   \   000069   7409         MOV     A,#0x9
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?L_MOV_TO_X
    304                    if (time >= sts->next)
   \   000073   7401         MOV     A,#0x1
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2405         ADD     A,#0x5
   \   00007B   F8           MOV     R0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   F9           MOV     R1,A
   \   000081   7407         MOV     A,#0x7
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E8           MOV     A,R0
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E9           MOV     A,R1
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   7407         MOV     A,#0x7
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?L_MOV_X
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?UL_GT_X
   \   0000A2   5003         JNC     $+5
   \   0000A4   02....       LJMP    ??HalLedUpdate_4 & 0xFFFF
    305                    {
    306                      if (sts->mode & HAL_LED_MODE_ON)
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   7401         MOV     A,#0x1
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BE   504E         JNC     ??HalLedUpdate_5
    307                      {
    308                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
   \   0000C0   7464         MOV     A,#0x64
   \   0000C2   C3           CLR     C
   \   0000C3   9A           SUBB    A,R2
   \   0000C4   C0E0         PUSH    A
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
    309                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D6   C2E0         CLR     0xE0 /* A   */.0
   \   0000D8   F0           MOVX    @DPTR,A
    310                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
   \   0000D9                ; Setup parameters for call to function HalLedOnOff
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   12....       LCALL   ?Subroutine5 & 0xFFFF
    311          
    312                        if (!(sts->mode & HAL_LED_MODE_FLASH))
   \                     ??CrossCallReturnLabel_8:
   \   0000DE   7401         MOV     A,#0x1
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E6   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000E8   403B         JC      ??CrossCallReturnLabel_9
    313                        {
    314                          sts->todo--;                        /* Not continuous, reduce count */
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   2401         ADD     A,#0x1
   \   0000F2   08           INC     R0
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   F9           MOV     R1,A
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   8983         MOV     DPH,R1
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   14           DEC     A
   \   0000FE   F0           MOVX    @DPTR,A
    315                          if (!sts->todo)
   \   0000FF   7024         JNZ     ??CrossCallReturnLabel_9
    316                          {
    317                            sts->mode ^= HAL_LED_MODE_BLINK;  /* No more blinks */
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   12....       LCALL   ?Subroutine3 & 0xFFFF
    318                          }
    319                        }
    320                      }
   \                     ??CrossCallReturnLabel_4:
   \   000109   6402         XRL     A,#0x2
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   8017         SJMP    ??CrossCallReturnLabel_9
    321                      else
    322                      {
    323                        pct = sts->onPct;                     /* Percentage of cycle for on */
   \                     ??HalLedUpdate_5:
   \   00010E   7404         MOV     A,#0x4
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   EA           MOV     A,R2
   \   000114   F0           MOVX    @DPTR,A
    324                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
   \   000115   7401         MOV     A,#0x1
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00011D   D2E0         SETB    0xE0 /* A   */.0
   \   00011F   F0           MOVX    @DPTR,A
    325                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
   \   000120                ; Setup parameters for call to function HalLedOnOff
   \   000120   7A01         MOV     R2,#0x1
   \   000122   12....       LCALL   ?Subroutine5 & 0xFFFF
    326                      }
    327          
    328                      if (sts->mode & HAL_LED_MODE_BLINK)
   \                     ??CrossCallReturnLabel_9:
   \   000125   7401         MOV     A,#0x1
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00012D   5066         JNC     ??HalLedUpdate_6
    329                      {
    330                        wait = (((uint32)pct * (uint32)sts->time) / 100);
   \   00012F   7404         MOV     A,#0x4
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F5..         MOV     ?V0 + 4,A
   \   000137   75..00       MOV     ?V0 + 5,#0x0
   \   00013A   75..00       MOV     ?V0 + 6,#0x0
   \   00013D   75..00       MOV     ?V0 + 7,#0x0
   \   000140   7401         MOV     A,#0x1
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F5..         MOV     ?V0 + 0,A
   \   00014E   A3           INC     DPTR
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F5..         MOV     ?V0 + 1,A
   \   000152   75..00       MOV     ?V0 + 2,#0x0
   \   000155   75..00       MOV     ?V0 + 3,#0x0
   \   000158   78..         MOV     R0,#?V0 + 4
   \   00015A   79..         MOV     R1,#?V0 + 0
   \   00015C   12....       LCALL   ?L_MUL
   \   00015F   90....       MOV     DPTR,#__Constant_64
   \   000162   78..         MOV     R0,#?V0 + 0
   \   000164   12....       LCALL   ?L_MOV_X
   \   000167   78..         MOV     R0,#?V0 + 4
   \   000169   79..         MOV     R1,#?V0 + 0
   \   00016B   12....       LCALL   ?UL_DIV_MOD
   \   00016E   AE..         MOV     R6,?V0 + 4
   \   000170   AF..         MOV     R7,?V0 + 5
    331                        sts->next = time + wait;
   \   000172   7409         MOV     A,#0x9
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   8E..         MOV     ?V0 + 0,R6
   \   000179   8F..         MOV     ?V0 + 1,R7
   \   00017B   75..00       MOV     ?V0 + 2,#0x0
   \   00017E   75..00       MOV     ?V0 + 3,#0x0
   \   000181   78..         MOV     R0,#?V0 + 0
   \   000183   12....       LCALL   ?L_ADD_X
   \   000186   7407         MOV     A,#0x7
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ?Subroutine4 & 0xFFFF
    332                      }
   \                     ??CrossCallReturnLabel_15:
   \   00018E   78..         MOV     R0,#?V0 + 0
   \   000190   12....       LCALL   ?L_MOV_TO_X
   \   000193   804B         SJMP    ??HalLedUpdate_7
    333                      else
    334                      {
    335                        /* no more blink, no more wait */
    336                        wait = 0;
   \                     ??HalLedUpdate_6:
   \   000195   7E00         MOV     R6,#0x0
   \   000197   7F00         MOV     R7,#0x0
    337                        /* After blinking, set the LED back to the state before it blinks */
    338                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   90....       MOV     DPTR,#preBlinkState
   \   0001A3   FA           MOV     R2,A
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   5A           ANL     A,R2
   \   0001A6   6004         JZ      ??HalLedUpdate_8
   \   0001A8   7A01         MOV     R2,#0x1
   \   0001AA   8002         SJMP    ??HalLedUpdate_9
   \                     ??HalLedUpdate_8:
   \   0001AC   7A00         MOV     R2,#0x0
   \                     ??HalLedUpdate_9:
   \   0001AE                ; Setup parameters for call to function HalLedSet
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F9           MOV     R1,A
   \   0001B6   12....       LCALL   ??HalLedSet?relay
    339                        /* Clear the saved bit */
    340                        preBlinkState &= (led ^ 0xFF);
   \   0001B9   85..82       MOV     DPL,?XSP + 0
   \   0001BC   85..83       MOV     DPH,?XSP + 1
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   64FF         XRL     A,#0xff
   \   0001C2   FA           MOV     R2,A
   \   0001C3   90....       MOV     DPTR,#preBlinkState
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   5A           ANL     A,R2
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   8015         SJMP    ??HalLedUpdate_7
    341                      }
    342                    }
    343                    else
    344                    {
    345                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_4:
   \   0001CB   7409         MOV     A,#0x9
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   78..         MOV     R0,#?V0 + 4
   \   0001D2   12....       LCALL   ?L_MOV_X
   \   0001D5   E5..         MOV     A,?V0 + 0
   \   0001D7   C3           CLR     C
   \   0001D8   95..         SUBB    A,?V0 + 4
   \   0001DA   FE           MOV     R6,A
   \   0001DB   E5..         MOV     A,?V0 + 1
   \   0001DD   95..         SUBB    A,?V0 + 5
   \   0001DF   FF           MOV     R7,A
    346                    }
    347          
    348                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_7:
   \   0001E0   7405         MOV     A,#0x5
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   7002         JNZ     ??HalLedUpdate_10
   \   0001E8   A3           INC     DPTR
   \   0001E9   E0           MOVX    A,@DPTR
   \                     ??HalLedUpdate_10:
   \   0001EA   6017         JZ      ??HalLedUpdate_11
   \   0001EC   EE           MOV     A,R6
   \   0001ED   7001         JNZ     ??HalLedUpdate_12
   \   0001EF   EF           MOV     A,R7
   \                     ??HalLedUpdate_12:
   \   0001F0   601B         JZ      ??HalLedUpdate_3
   \   0001F2   7405         MOV     A,#0x5
   \   0001F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   F8           MOV     R0,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   F9           MOV     R1,A
   \   0001FC   C3           CLR     C
   \   0001FD   EE           MOV     A,R6
   \   0001FE   98           SUBB    A,R0
   \   0001FF   EF           MOV     A,R7
   \   000200   99           SUBB    A,R1
   \   000201   500A         JNC     ??HalLedUpdate_3
    349                    {
    350                      next = wait;
   \                     ??HalLedUpdate_11:
   \   000203   7405         MOV     A,#0x5
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   EE           MOV     A,R6
   \   000209   F0           MOVX    @DPTR,A
   \   00020A   A3           INC     DPTR
   \   00020B   EF           MOV     A,R7
   \   00020C   F0           MOVX    @DPTR,A
    351                    }
    352                  }
    353                  leds ^= led;
   \                     ??HalLedUpdate_3:
   \   00020D   85..82       MOV     DPL,?XSP + 0
   \   000210   85..83       MOV     DPH,?XSP + 1
   \   000213   E0           MOVX    A,@DPTR
   \   000214   FA           MOV     R2,A
   \   000215   7403         MOV     A,#0x3
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   6A           XRL     A,R2
   \   00021C   F0           MOVX    @DPTR,A
    354                }
    355                led <<= 1;
   \                     ??HalLedUpdate_2:
   \   00021D   85..82       MOV     DPL,?XSP + 0
   \   000220   85..83       MOV     DPH,?XSP + 1
   \   000223   E0           MOVX    A,@DPTR
   \   000224   C3           CLR     C
   \   000225   33           RLC     A
   \   000226   F0           MOVX    @DPTR,A
    356                sts++;
   \   000227   7401         MOV     A,#0x1
   \   000229   12....       LCALL   ?XSTACK_DISP0_8
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   2409         ADD     A,#0x9
   \   00022F   F8           MOV     R0,A
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   3400         ADDC    A,#0x0
   \   000234   F9           MOV     R1,A
   \   000235   7401         MOV     A,#0x1
   \   000237   12....       LCALL   ?XSTACK_DISP0_8
   \   00023A   E8           MOV     A,R0
   \   00023B   F0           MOVX    @DPTR,A
   \   00023C   A3           INC     DPTR
   \   00023D   E9           MOV     A,R1
   \   00023E   F0           MOVX    @DPTR,A
    357              }
   \   00023F   7403         MOV     A,#0x3
   \   000241   12....       LCALL   ?XSTACK_DISP0_8
   \   000244   E0           MOVX    A,@DPTR
   \   000245   6003         JZ      $+5
   \   000247   02....       LJMP    ??HalLedUpdate_1 & 0xFFFF
    358          
    359              if (next)
   \   00024A   7405         MOV     A,#0x5
   \   00024C   12....       LCALL   ?XSTACK_DISP0_8
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   7002         JNZ     ??HalLedUpdate_13
   \   000252   A3           INC     DPTR
   \   000253   E0           MOVX    A,@DPTR
   \                     ??HalLedUpdate_13:
   \   000254   6016         JZ      ??HalLedUpdate_0
    360              {
    361                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   000256                ; Setup parameters for call to function osal_start_timerEx
   \   000256   7405         MOV     A,#0x5
   \   000258   12....       LCALL   ?XSTACK_DISP0_8
   \   00025B   E0           MOVX    A,@DPTR
   \   00025C   FC           MOV     R4,A
   \   00025D   A3           INC     DPTR
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   FD           MOV     R5,A
   \   000260   7A02         MOV     R2,#0x2
   \   000262   7B00         MOV     R3,#0x0
   \   000264   90....       MOV     DPTR,#Hal_TaskID
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F9           MOV     R1,A
   \   000269   12....       LCALL   ??osal_start_timerEx?relay
    362              }
    363            }
    364          }
   \                     ??HalLedUpdate_0:
   \   00026C   740D         MOV     A,#0xd
   \   00026E   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine7_0
   \   000006                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??HalLedOnOff?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000003   A2E1         MOV     C,0xE0 /* A   */.1
   \   000005   22           RET
    365          
    366          /***************************************************************************************************
    367           * @fn      HalLedOnOff
    368           *
    369           * @brief   Turns specified LED ON or OFF
    370           *
    371           * @param   leds - LED bit mask
    372           *          mode - LED_ON,LED_OFF,
    373           *
    374           * @return  none
    375           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            if (leds & HAL_LED_1)
   \   000004   E9           MOV     A,R1
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   500B         JNC     ??HalLedOnOff_0
    379            {
    380              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV     A,#0x1
   \   00000B   6A           XRL     A,R2
   \   00000C   7004         JNZ     ??HalLedOnOff_1
    381              {
    382                HAL_TURN_ON_LED1();
   \   00000E   C290         CLR     0x90.0
   \   000010   8002         SJMP    ??HalLedOnOff_0
    383              }
    384              else
    385              {
    386                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   D290         SETB    0x90.0
    387              }
    388            }
    389          
    390            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV     A,R1
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500B         JNC     ??HalLedOnOff_2
    391            {
    392              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV     A,#0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7004         JNZ     ??HalLedOnOff_3
    393              {
    394                HAL_TURN_ON_LED2();
   \   00001E   C291         CLR     0x90.1
   \   000020   8002         SJMP    ??HalLedOnOff_2
    395              }
    396              else
    397              {
    398                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   D291         SETB    0x90.1
    399              }
    400            }
    401          
    402            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV     A,R1
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500B         JNC     ??HalLedOnOff_4
    403            {
    404              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV     A,#0x1
   \   00002B   6A           XRL     A,R2
   \   00002C   7004         JNZ     ??HalLedOnOff_5
    405              {
    406                HAL_TURN_ON_LED3();
   \   00002E   C290         CLR     0x90.0
   \   000030   8002         SJMP    ??HalLedOnOff_4
    407              }
    408              else
    409              {
    410                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   D290         SETB    0x90.0
    411              }
    412            }
    413          
    414            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV     A,R1
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   500B         JNC     ??HalLedOnOff_6
    415            {
    416              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV     A,#0x1
   \   00003B   6A           XRL     A,R2
   \   00003C   7004         JNZ     ??HalLedOnOff_7
    417              {
    418                HAL_TURN_ON_LED4();
   \   00003E   C290         CLR     0x90.0
   \   000040   8005         SJMP    ??HalLedOnOff_8
    419              }
    420              else
    421              {
    422                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   D290         SETB    0x90.0
    423              }
    424            }
    425          
    426            /* Remember current state */
    427            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV     A,R2
   \   000045   6007         JZ      ??HalLedOnOff_9
    428            {
    429              HalLedState |= leds;
   \                     ??HalLedOnOff_8:
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   49           ORL     A,R1
   \   00004C   8009         SJMP    ??HalLedOnOff_10
    430            }
    431            else
    432            {
    433              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_9:
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   69           XRL     A,R1
   \   000051   FB           MOV     R3,A
   \   000052   90....       MOV     DPTR,#HalLedState
   \   000055   E0           MOVX    A,@DPTR
   \   000056   5B           ANL     A,R3
    434            }
   \                     ??HalLedOnOff_10:
   \   000057   80..         SJMP    ??Subroutine9_0
   \   000059                REQUIRE _A_P1
    435          }
    436          #endif /* HAL_LED */
    437          
    438          /***************************************************************************************************
    439           * @fn      HalGetLedState
    440           *
    441           * @brief   Dim LED2 - Dim (set level) of LED2
    442           *
    443           * @param   none
    444           *
    445           * @return  led state
    446           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          uint8 HalLedGetState ()
   \                     HalLedGetState:
    448          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    449          #if (HAL_LED == TRUE)
    450            return HalLedState;
   \   000004   90....       MOV     DPTR,#HalLedState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   80..         SJMP    ??Subroutine10_0
    451          #else
    452            return 0;
    453          #endif
    454          }
    455          
    456          /***************************************************************************************************
    457           * @fn      HalLedEnterSleep
    458           *
    459           * @brief   Store current LEDs state before sleep
    460           *
    461           * @param   none
    462           *
    463           * @return  none
    464           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    466          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    467          #ifdef BLINK_LEDS
    468            /* Sleep ON */
    469            HalLedStatusControl.sleepActive = TRUE;
   \   000004   7401         MOV     A,#0x1
   \   000006   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000009   F0           MOVX    @DPTR,A
    470          #endif /* BLINK_LEDS */
    471          
    472          #if (HAL_LED == TRUE)
    473            /* Save the state of each led */
    474            HalSleepLedState = 0;
    475            HalSleepLedState |= HAL_STATE_LED1();
   \   00000A   E590         MOV     A,0x90
   \   00000C   FA           MOV     R2,A
    476            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00000D   E590         MOV     A,0x90
   \   00000F   FB           MOV     R3,A
    477            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   000010   E590         MOV     A,0x90
   \   000012   FC           MOV     R4,A
    478            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   000013   A290         MOV     C,0x90.0
   \   000015   E4           CLR     A
   \   000016   92E0         MOV     0xE0 /* A   */.0,C
   \   000018   F4           CPL     A
   \   000019   5401         ANL     A,#0x1
   \   00001B   33           RLC     A
   \   00001C   33           RLC     A
   \   00001D   33           RLC     A
   \   00001E   54F8         ANL     A,#0xf8
   \   000020   C0E0         PUSH    A
   \   000022   EC           MOV     A,R4
   \   000023   A2E0         MOV     C,0xE0 /* A   */.0
   \   000025   E4           CLR     A
   \   000026   92E0         MOV     0xE0 /* A   */.0,C
   \   000028   F4           CPL     A
   \   000029   5401         ANL     A,#0x1
   \   00002B   33           RLC     A
   \   00002C   33           RLC     A
   \   00002D   54FC         ANL     A,#0xfc
   \   00002F   C0E0         PUSH    A
   \   000031   EB           MOV     A,R3
   \   000032   A2E1         MOV     C,0xE0 /* A   */.1
   \   000034   E4           CLR     A
   \   000035   92E0         MOV     0xE0 /* A   */.0,C
   \   000037   F4           CPL     A
   \   000038   5401         ANL     A,#0x1
   \   00003A   C3           CLR     C
   \   00003B   33           RLC     A
   \   00003C   C0E0         PUSH    A
   \   00003E   EA           MOV     A,R2
   \   00003F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000041   E4           CLR     A
   \   000042   92E0         MOV     0xE0 /* A   */.0,C
   \   000044   F4           CPL     A
   \   000045   5401         ANL     A,#0x1
   \   000047   FA           MOV     R2,A
   \   000048   D0E0         POP     A
   \   00004A   4A           ORL     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   D0E0         POP     A
   \   00004E   4A           ORL     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   D0E0         POP     A
   \   000052   4A           ORL     A,R2
   \   000053   90....       MOV     DPTR,#HalSleepLedState
   \   000056   F0           MOVX    @DPTR,A
    479          
    480            /* TURN OFF all LEDs to save power */
    481            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000057                ; Setup parameters for call to function HalLedOnOff
   \   000057   7A00         MOV     R2,#0x0
   \   000059   790F         MOV     R1,#0xf
   \   00005B   12....       LCALL   ??HalLedOnOff?relay
    482          #endif /* HAL_LED */
    483          
    484          }
   \   00005E   80..         SJMP    ??Subroutine10_0
   \   000060                REQUIRE _A_P1
    485          
    486          /***************************************************************************************************
    487           * @fn      HalLedExitSleep
    488           *
    489           * @brief   Restore current LEDs state after sleep
    490           *
    491           * @param   none
    492           *
    493           * @return  none
    494           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    496          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    497          #if (HAL_LED == TRUE)
    498            /* Load back the saved state */
    499            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV     R2,#0x1
   \   000006   90....       MOV     DPTR,#HalSleepLedState
   \   000009   12....       LCALL   ??Subroutine7_0 & 0xFFFF
    500          
    501            /* Restart - This takes care BLINKING LEDS */
    502            HalLedUpdate();
   \                     ??CrossCallReturnLabel_10:
   \   00000C                ; Setup parameters for call to function HalLedUpdate
   \   00000C   12....       LCALL   ??HalLedUpdate?relay
    503          #endif /* HAL_LED */
    504          
    505          #ifdef BLINK_LEDS
    506            /* Sleep OFF */
    507            HalLedStatusControl.sleepActive = FALSE;
   \   00000F   02....       LJMP    ?Subroutine0 & 0xFFFF
    508          #endif /* BLINK_LEDS */
    509          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedBlink?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedOnOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedGetState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    510          
    511          /***************************************************************************************************
    512          ***************************************************************************************************/
    513          
    514          
    515          
    516          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     HalLedBlink                  1      0     29
       -> osal_GetSystemClock     0      0     36
       -> osal_set_event          0      0     36
       -> HalLedSet               0      0     36
       -> HalLedSet               0      0     36
     HalLedEnterSleep             5      0      0
       -> HalLedOnOff             4      0      0
     HalLedExitSleep              2      0      0
       -> HalLedOnOff             4      0      0
       -> HalLedUpdate            4      0      0
     HalLedGetState               2      0      0
     HalLedInit                   2      0      0
       -> HalLedSet               4      0      0
     HalLedOnOff                  2      0     29
     HalLedSet                    1      0     40
       -> HalLedBlink             0      0     22
       -> HalLedBlink             0      0     22
       -> HalLedOnOff             0      0     22
     HalLedUpdate                 1      0     29
       -> osal_GetSystemClock     0      0     58
       -> HalLedOnOff             0      0     58
       -> HalLedOnOff             0      0     58
       -> HalLedSet               0      0     58
       -> osal_start_timerEx      0      0     58


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P1                       1
     HalLedState                 1
     HalSleepLedState            1
     preBlinkState               1
     HalLedStatusControl        37
     HalLedInit                 14
     ?Subroutine0                4
     ??Subroutine9_0             1
     ??Subroutine10_0            7
     HalLedSet                 128
     HalLedBlink               228
     ?Subroutine1                8
     HalLedUpdate              625
     ?Subroutine5                6
     ??Subroutine7_0             6
     ?Subroutine4                2
     ??Subroutine8_0             7
     ?Subroutine3                4
     ?Subroutine6               10
     ?Subroutine2                6
     HalLedOnOff                89
     HalLedGetState             11
     HalLedEnterSleep           96
     HalLedExitSleep            18
     __Constant_64               4
     ??HalLedInit?relay          6
     ??HalLedSet?relay           6
     ??HalLedBlink?relay         6
     ??HalLedUpdate?relay        6
     ??HalLedOnOff?relay         6
     ??HalLedGetState?relay      6
     ??HalLedEnterSleep?relay    6
     ??HalLedExitSleep?relay     6

 
 1 270 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 1 318 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    40 bytes of XDATA memory

Errors: none
Warnings: none
