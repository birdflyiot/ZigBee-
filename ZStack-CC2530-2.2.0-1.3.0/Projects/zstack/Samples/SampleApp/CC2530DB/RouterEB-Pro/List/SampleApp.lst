###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             16/Sep/2015  11:39:51 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\S #
#                          ource\SampleApp.c                                  #
#    Command line       =  -f E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó° #
#                          ´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-C #
#                          C2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí #
#                          ¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ #
#                          ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wConfig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0     #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\S #
#                          ource\SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D      #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´ #
#                          «PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ± #
#                          Á÷µç»ú¼ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\ #
#                           -lA E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼ #
#                          Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack #
#                          -CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\RouterEB-Pro\List\ --diag_suppress    #
#                          Pe001,Pa010 -o E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó #
#                          ×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼Ìµ #
#                          çÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\RouterEB-Pro\Obj\ -e        #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´« #
#                          PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á #
#                          ÷µç»ú¼ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\ -I                 #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\SOURCE\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«P #
#                          C²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷ #
#                          µç»ú¼ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1 #
#                          Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZSt #
#                          ack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I   #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I  #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC253 #
#                          0EB\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1 #
#                          Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZSt #
#                          ack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´ #
#                          ¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ #
#                          ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ #
#                          INCLUDE\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü° #
#                          ´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷ #
#                          \ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü #
#                          1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZS #
#                          tack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ì #
#                          í¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZSta #
#                          ck-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC #
#                          \ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼ #
#                          Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack #
#                          -CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ #
#                           -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó #
#                          °´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack- #
#                          CC2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\   #
#                          -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó° #
#                          ´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-C #
#                          C2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\    #
#                          -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó° #
#                          ´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-C #
#                          C2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I  #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         #
#                          E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\  #
#                          -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó° #
#                          ´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-C #
#                          C2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDAT #
#                          A\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí #
#                          ¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStac #
#                          k-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUD #
#                          E\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí #
#                          ¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStac #
#                          k-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü #
#                          1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZS #
#                          tack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí #
#                          ¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ #
#                          ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -I "D:\Program   #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\" -I "D:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\RouterEB-Pro\List\SampleApp.lst            #
#    Object file        =  E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü #
#                          ×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC25 #
#                          30-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\RouterEB-Pro\Obj\SampleApp.r51             #
#                                                                             #
#                                                                             #
###############################################################################

E:\ÏîÄ¿Á·Ï°\ZigBee\ÒÆÖ²»Ø´«PC²¢Ìí¼Ó×Ü°´¼ü1Ìí¼Ó°´¼ü×é²¥ÖÐ¶Ï°´¼üÖÐ¶ÏÇý¶¯½ÚµãÖ±Á÷µç»ú¼ÌµçÆ÷\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          /*LED*/
     79          #define LED1R P1_0
     80          #define LED2Y P1_1
     81          
     82          /*Ö±Á÷µç»ú*/
     83          #define A1 P1_2	
     84          #define A2 P1_3
     85          
     86          /*KEY*/
     87          #define KEYC P0_4
     88          
     89          void delay(int xms);
     90          
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          /*********************************************************************
    100           * TYPEDEFS
    101           */
    102          
    103          /*********************************************************************
    104           * GLOBAL VARIABLES
    105           */
    106          
    107          // This list should be filled with Application specific Cluster IDs.
    108          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
    109          {
    110            SAMPLEAPP_PERIODIC_SWITCHOFFCLUSTERID,
    111            SAMPLEAPP_PERIODIC_SWITCHONCLUSTERID,
    112            SAMPLEAPP_FLASH_CLUSTERID
    113          };
    114          
    115          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
    116          {
    117            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    118            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    119            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    120            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    121            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    122            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    123            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    124            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    125            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    126          };
    127          
    128          // This is the Endpoint/Interface description.  It is defined here, but
    129          // filled-in in SampleApp_Init().  Another way to go would be to fill
    130          // in the structure here and make it a "const" (in code space).  The
    131          // way it's defined in this sample app it is define in RAM.
    132          endPointDesc_t SampleApp_epDesc;
    133          
    134          /*********************************************************************
    135           * EXTERNAL VARIABLES
    136           */
    137          
    138          /*********************************************************************
    139           * EXTERNAL FUNCTIONS
    140           */
    141          
    142          /*********************************************************************
    143           * LOCAL VARIABLES
    144           */
    145          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
    146                                    // This variable will be received when
    147                                    // SampleApp_Init() is called.
    148          devStates_t SampleApp_NwkState;
    149          
    150          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
    151          
    152          afAddrType_t SampleApp_Periodic_DstAddr;
    153          afAddrType_t SampleApp_Flash_DstAddr;
    154          
    155          afAddrType_t Group_DstAddr;//Íø·ä×é²¥Í¨ÐÅ¶¨Òå
    156          
    157          aps_Group_t SampleApp_Group;
    158          aps_Group_t WEBEE_Group;  //·Ö×éÄÚÈÝ
    159          
    160          uint8 SampleAppPeriodicCounter = 0;
    161          uint8 SampleAppFlashCounter = 0;
    162          
    163          uint8 count = 0xFF;
    164          
    165          /*********************************************************************
    166           * LOCAL FUNCTIONS
    167           */
    168          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    169          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    170          void SampleApp_SendPeriodicMessage( void );
    171          void SampleApp_SendSwitchbackMessage( void );
    172          void SampleApp_SendGroupMessageOK(void); //Íø·ä×é²¥Í¨Ñ¶¶¨Òå
    173          
    174          void SampleApp_SendGroupMessageCANCEL(void);
    175          
    176          void SampleApp_SendGroupMessageSWITCH(void);
    177          
    178          //void SampleApp_SendGroupMessageWHOLE1(void);
    179          
    180          void SampleApp_SendFlashMessage( uint16 flashTime );
    181          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    182          
    183          /*********************************************************************
    184           * NETWORK LAYER CALLBACKS
    185           */
    186          
    187          /*********************************************************************
    188           * PUBLIC FUNCTIONS
    189           */
    190          
    191          /*********************************************************************
    192           * @fn      SampleApp_Init
    193           *
    194           * @brief   Initialization function for the Generic App Task.
    195           *          This is called during initialization and should contain
    196           *          any application specific initialization (ie. hardware
    197           *          initialization/setup, table initialization, power up
    198           *          notificaiton ... ).
    199           *
    200           * @param   task_id - the ID assigned by OSAL.  This ID should be
    201           *                    used to send messages and set timers.
    202           *
    203           * @return  none
    204           */
    205          void SampleApp_Init( uint8 task_id )
    206          {
    207            SampleApp_TaskID = task_id;
    208            SampleApp_NwkState = DEV_INIT;
    209            SampleApp_TransID = 0;
    210            
    211           /***********´®¿Ú³õÊ¼»¯************/
    212            MT_UartInit();//³õÊ¼»¯
    213            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
    214            HalUARTWrite(0,"Hello World\n",12);
    215            
    216            
    217            
    218            // Device hardware initialization can be added here or in main() (Zmain.c).
    219            // If the hardware is application specific - add it here.
    220            // If the hardware is other parts of the device add it in main().
    221          
    222           #if defined ( BUILD_ALL_DEVICES )
    223            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    224            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    225            // together - if they are - we will start up a coordinator. Otherwise,
    226            // the device will start as a router.
    227            if ( readCoordinatorJumper() )
    228              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    229            else
    230              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    231          #endif // BUILD_ALL_DEVICES
    232          
    233          #if defined ( HOLD_AUTO_START )
    234            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    235            //  from starting the device and wait for the application to
    236            //  start the device.
    237            ZDOInitDevice(0);
    238          #endif
    239          
    240            // Setup for the periodic message's destination address
    241            // Broadcast to everyone
    242            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //(afAddrMode_t)AddrBroadcast;
    243            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    244            SampleApp_Periodic_DstAddr.addr.shortAddr = 0x0000 ; //0xFFFF;
    245          
    246            // Setup for the flash command's destination address - Group 1
    247            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
    248            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    249            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
    250            
    251              // Íø·ä×é²¥Í¨Ñ¶¶¨Òå
    252            Group_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
    253            Group_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    254            Group_DstAddr.addr.shortAddr = WEBEE_GROUP;
    255            
    256          
    257            // Fill out the endpoint description.
    258            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
    259            SampleApp_epDesc.task_id = &SampleApp_TaskID;
    260            SampleApp_epDesc.simpleDesc
    261                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
    262            SampleApp_epDesc.latencyReq = noLatencyReqs;
    263          
    264            // Register the endpoint description with the AF
    265            afRegister( &SampleApp_epDesc );
    266          
    267            // Register for all key events - This app will handle all key events
    268            RegisterForKeys( SampleApp_TaskID );
    269          
    270            // By default, all devices start out in Group 1
    271            SampleApp_Group.ID = 0x0001;
    272            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
    273            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    274            
    275            WEBEE_Group.ID = 0x0002;// ×éID
    276            osal_memcpy( SampleApp_Group.name, "Group 2", 7  );//×éÃû³Æ
    277            aps_AddGroup( SAMPLEAPP_ENDPOINT, &WEBEE_Group );
    278          
    279          #if defined ( LCD_SUPPORTED )
    280            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    281          #endif
    282          }
    283          
    284          /*********************************************************************
    285           * @fn      SampleApp_ProcessEvent
    286           *
    287           * @brief   Generic Application Task event processor.  This function
    288           *          is called to process all events for the task.  Events
    289           *          include timers, messages and any other user defined events.
    290           *
    291           * @param   task_id  - The OSAL assigned task ID.
    292           * @param   events - events to process.  This is a bit map and can
    293           *                   contain more than one event.
    294           *
    295           * @return  none
    296           */
    297          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
    298          {
    299            afIncomingMSGPacket_t *MSGpkt;
    300            (void)task_id;  // Intentionally unreferenced parameter
    301          
    302            if ( events & SYS_EVENT_MSG )
    303            {
    304              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
    305              while ( MSGpkt )
    306              {
    307                switch ( MSGpkt->hdr.event )
    308                {
    309                  
    310                  case CMD_SERIAL_MSG:  //´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬±àÒëÊ±²»¶¨ÒåMT_TASK£¬ÔòÓÉMT_UART²ãÖ±½Ó´«µÝµ½´ËÓ¦ÓÃ²ã
    311                 // Èç¹ûÊÇÓÉMT_UART²ã´«¹ýÀ´µÄÊý¾Ý£¬ÔòÉÏÊöÀý×ÓÖÐ29 00 14 31¶¼ÊÇÆÕÍ¨Êý¾Ý£¬´®¿Ú¿ØÖÆÊ±ºòÓÃµÄ¡£   
    312                  SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    313                  break;
    314                  
    315                  // Received when a key is pressed
    316                  case KEY_CHANGE:
    317                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    318                    break;
    319                  
    320                  // Received when a messages is received (OTA) for this endpoint
    321                  case AF_INCOMING_MSG_CMD:
    322                    SampleApp_MessageMSGCB( MSGpkt );
    323                    break;
    324          
    325                  // Received whenever the device changes state in the network
    326                  case ZDO_STATE_CHANGE:
    327                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    328          //          if ( (SampleApp_NwkState == DEV_ZB_COORD)
    329          //              || (SampleApp_NwkState == DEV_ROUTER)
    330          //              || (SampleApp_NwkState == DEV_END_DEVICE) )
    331                    if(SampleApp_NwkState == DEV_END_DEVICE)
    332                    {
    333                      // Start sending the periodic message in a regular interval.
    334                      osal_start_timerEx( SampleApp_TaskID,
    335                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    336                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    337                    }
    338                    else
    339                    {
    340                      // Device is no longer in the network
    341                    }
    342                    break;
    343          
    344                  default:
    345                    break;
    346                }
    347          
    348                // Release the memory
    349                osal_msg_deallocate( (uint8 *)MSGpkt );
    350          
    351                // Next - if one is available
    352                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
    353              }
    354          
    355              // return unprocessed events
    356              return (events ^ SYS_EVENT_MSG);
    357            }
    358          
    359            // Send a message out - This event is generated by a timer
    360            //  (setup in SampleApp_Init()).
    361            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
    362            {
    363              // Send the periodic message
    364          //    SampleApp_SendPeriodicMessage();
    365              //Ìæ»»³É×é²¥Í¨Ñ¶µÄ³ÌÐò
    366          //   SampleApp_SendGroupMessage();
    367              // Setup to send message again in normal period (+ a little jitter)
    368             
    369              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    370                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    371          
    372              // return unprocessed events
    373              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
    374            }
    375          
    376            // Discard unknown events
    377            return 0;
    378          }
    379          
    380          /*********************************************************************
    381           * Event Generation Functions
    382           */
    383          /*********************************************************************
    384           * @fn      SampleApp_HandleKeys
    385           *
    386           * @brief   Handles all key events for this device.
    387           *
    388           * @param   shift - true if in shift/alt.
    389           * @param   keys - bit field for key events. Valid entries:
    390           *                 HAL_KEY_SW_2
    391           *                 HAL_KEY_SW_1
    392           *
    393           * @return  none
    394           */
    395          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
    396          {
    397            (void)shift;  // Intentionally unreferenced parameter
    398            
    399            if ( keys & HAL_KEY_SW_6 )//KEY OK
    400            {
    401              /* This key sends the Flash Command is sent to Group 1.
    402               * This device will not receive the Flash Command from this
    403               * device (even if it belongs to group 1).
    404               */
    405              P1DIR |= 0x03;
    406              for(int i=0;i<10;i++)  //LEDÉÁË¸ÈýÏÂ
    407              {
    408                LED1R = 0;
    409                LED2Y = 0;
    410                delay(30000);
    411                delay(30000);
    412                delay(30000);
    413                LED1R = 1;
    414                LED2Y = 1;
    415                delay(30000);
    416                delay(30000);
    417                delay(30000);
    418              }
    419             
    420              SampleApp_SendGroupMessageOK();
    421              //SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
    422            }
    423            
    424            if ( keys & HAL_KEY_SW_7 )  //KEY CANCEL
    425            {
    426              P1DIR |= 0x03;
    427              for(int i=0;i<10;i++)  //LEDÉÁË¸ÈýÏÂ
    428              {
    429                LED1R = 0;
    430                LED2Y = 0;
    431                delay(30000);
    432                delay(30000);
    433                delay(30000);
    434                LED1R = 1;
    435                LED2Y = 1;
    436                delay(30000);
    437                delay(30000);
    438                delay(30000);
    439              }
    440              SampleApp_SendGroupMessageCANCEL();
    441            }
    442          
    443            if ( keys & HAL_KEY_SW_5 )  //S5 ¼ÌµçÆ÷
    444            {
    445              P1DIR |= 0x03;
    446              for(int i=0;i<10;i++)  //LEDÉÁË¸ÈýÏÂ
    447              {
    448                LED1R = 0;
    449                LED2Y = 0;
    450                delay(30000);
    451                delay(30000);
    452                delay(30000);
    453                LED1R = 1;
    454                LED2Y = 1;
    455                delay(30000);
    456                delay(30000);
    457                delay(30000);
    458              }
    459              SampleApp_SendGroupMessageSWITCH();
    460            }
    461            
    462            
    463            if ( keys & HAL_KEY_SW_4 )  //S4 ×Ü¿ª¹Ø1
    464            {
    465              P1DIR |= 0x03;
    466              for(int i=0;i<10;i++)  //LEDÉÁË¸ÈýÏÂ
    467              {
    468                LED1R = 0;
    469                LED2Y = 0;
    470                delay(30000);
    471                delay(30000);
    472                delay(30000);
    473                LED1R = 1;
    474                LED2Y = 1;
    475                delay(30000);
    476                delay(30000);
    477                delay(30000);
    478              }
    479          //    SampleApp_SendGroupMessageWHOLE1();
    480            }
    481            
    482            if ( keys & HAL_KEY_SW_2 )
    483            {
    484              /* The Flashr Command is sent to Group 1.
    485               * This key toggles this device in and out of group 1.
    486               * If this device doesn't belong to group 1, this application
    487               * will not receive the Flash command sent to group 1.
    488               */
    489              aps_Group_t *grp;
    490              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    491              if ( grp )
    492              {
    493                // Remove from the group
    494                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    495              }
    496              else
    497              {
    498                // Add to the flash group
    499                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    500              }
    501            }
    502          }
    503          
    504          /*********************************************************************
    505           * LOCAL FUNCTIONS
    506           */
    507          
    508          /*********************************************************************
    509           * @fn      SampleApp_MessageMSGCB
    510           *
    511           * @brief   Data message processor callback.  This function processes
    512           *          any incoming data - probably from other devices.  So, based
    513           *          on cluster ID, perform the intended action.
    514           *
    515           * @param   none
    516           *
    517           * @return  none
    518           */
    519          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    520          {
    521            /*16½øÖÆ×ªASCIIÂë±í-Íø·ä*/
    522          //  uint8 asc_16[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'},i;
    523          //  uint8 asc[2]={'1','0'},i;
    524          //  uint16 flashTime;  
    525            switch ( pkt->clusterId )
    526            {
    527              //Õý×ª
    528            case WEBEE_GROUP_CLUSTERID:
    529              P1DIR |= 0x0F;//0x03;        
    530              LED1R=1;
    531              LED2Y=1;
    532              
    533              /***********Ö±Á÷µç»ú***********/
    534              P0 = 0x03;//¹Ø±Õµç»ú              
    535              
    536              A1 = ~pkt->cmd.Data[1];//A1=1;
    537              delay(30000);
    538              delay(30000);
    539              delay(30000);
    540              delay(30000);
    541              A2 = ~pkt->cmd.Data[0];//A2=0;
    542              delay(30000);
    543              delay(30000);
    544              delay(30000);
    545              delay(30000);
    546              
    547              A1 = 0;//¹Ø±Õµç»ú
    548              A2 = 0;
    549              
    550              break;
    551              
    552              //·´×ª
    553            case WEBEE_GROUP_CANCELCLUSTERID:
    554              P1DIR |= 0x0F;//0x03;        
    555              LED1R=1;
    556              LED2Y=1;
    557              
    558              /***********Ö±Á÷µç»ú***********/
    559              P0 = 0x03;//¹Ø±Õµç»ú              
    560              
    561              A1 = ~pkt->cmd.Data[0];//A1=0;
    562              delay(30000);
    563              delay(30000);
    564              delay(30000);
    565              delay(30000);
    566              A2 = ~pkt->cmd.Data[1];//A2=1;
    567              delay(30000);
    568              delay(30000);
    569              delay(30000);
    570              delay(30000);
    571              
    572              A1 = 0;//¹Ø±Õµç»ú
    573              A2 = 0;
    574              
    575              break;
    576              
    577              //¼ÌµçÆ÷
    578            case WEBEE_GROUP_SWITCHCLUSTERID:
    579              //³õÊ¼»¯LEDºÍ¼ÌµçÆ÷¶Ë¿Ú
    580              P1DIR |= 0x07;        
    581              
    582              LED1R=1;
    583              LED2Y=1;
    584              
    585          //    P1_4 = 1; //¹Ø±Õ¼ÌµçÆ÷
    586              //¼ÌµçÆ÷
    587              if(pkt->cmd.Data[0]==0)
    588              {
    589                P1_4=~P1_4;      
    590                count = ~count;            
    591              }
    592              SampleApp_SendSwitchbackMessage(); 
    593              
    594              break;
    595              
    596            case WEBEE_GROUP_WHOLE1CLUSTERID:
    597              
    598              break;
    599              
    600            case SAMPLEAPP_PERIODIC_SWITCHOFFCLUSTERID:
    601              P1DIR |= 0x07;            
    602              LED1R=0;
    603          //    LED2Y=0;
    604          //    for(i=0;i<1;i++)
    605          //    {
    606          //      HalUARTWrite(0,&asc[pkt->cmd.Data[i]],1); //´òÓ¡ÊÕµ½Êý¾Ý
    607                HalUARTWrite(0,"OFF",1);
    608                HalUARTWrite(0,"\n",1);
    609          //    }
    610              break;
    611              
    612            case SAMPLEAPP_PERIODIC_SWITCHONCLUSTERID:
    613              P1DIR |= 0x07;   
    614          //    LED1R=0;
    615              LED2Y=0;
    616          //    for(i=0;i<1;i++)
    617          //    {
    618          //      HalUARTWrite(0,&asc[pkt->cmd.Data[i]],1); //´òÓ¡ÊÕµ½Êý¾Ý
    619                HalUARTWrite(0,"ON",2);
    620                HalUARTWrite(0,"\n",1);
    621          //    }
    622              break;
    623              
    624            case SAMPLEAPP_FLASH_CLUSTERID:
    625              flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
                     ^
Error[Pe020]: identifier "flashTime" is undefined
    626              HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    627              break;
    628            }
    629          }
    630          
    631          void SampleApp_SendGroupMessageOK( void )
    632          {
    633            uint8 data[2]={0,1};
    634            if ( AF_DataRequest( &Group_DstAddr,
    635                                &SampleApp_epDesc,
    636                                WEBEE_GROUP_CLUSTERID,
    637                                2,
    638                                data,
    639                                &SampleApp_TransID,
    640                                AF_DISCV_ROUTE,
    641                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    642            {
    643            }
    644            else
    645            {
    646              // Error occurred in request to send.
    647            }
    648          
    649          }
    650          
    651          void SampleApp_SendGroupMessageCANCEL( void )
    652          {
    653            uint8 data[2]={0,1};
    654            if ( AF_DataRequest( &Group_DstAddr,
    655                                &SampleApp_epDesc,
    656                                WEBEE_GROUP_CANCELCLUSTERID,
    657                                2,
    658                                data,
    659                                &SampleApp_TransID,
    660                                AF_DISCV_ROUTE,
    661                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    662            {
    663            }
    664            else
    665            {
    666              // Error occurred in request to send.
    667            }
    668          
    669          }
    670          
    671          void SampleApp_SendGroupMessageSWITCH( void )
    672          {
    673            uint8 data[1]={0};  
    674            if ( AF_DataRequest( &Group_DstAddr,
    675                                 &SampleApp_epDesc,
    676                                 WEBEE_GROUP_SWITCHCLUSTERID,
    677                                 1,
    678                                 data,
    679                                 &SampleApp_TransID,
    680                                 AF_DISCV_ROUTE,
    681                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    682            
    683            {
    684            }
    685            else
    686            {
    687              // Error occurred in request to send.
    688            }
    689          }
    690          
    691          void SampleApp_SendSwitchbackMessage( void )
    692          {
    693            if(count == 0)
    694            {
    695              uint8 data[1]={0};
    696              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, 
    697                                  &SampleApp_epDesc,
    698                                  SAMPLEAPP_PERIODIC_SWITCHONCLUSTERID,
    699                                  1,
    700                                  data,
    701                                  &SampleApp_TransID,
    702                                  AF_DISCV_ROUTE,
    703                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    704              {
    705              }
    706              else
    707              {
    708                // Error occurred in request to send.
    709              }
    710            }
    711            else
    712            {
    713              uint8 data[1]={1};
    714              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, 
    715                                  &SampleApp_epDesc,
    716                                  SAMPLEAPP_PERIODIC_SWITCHOFFCLUSTERID,
    717                                  1,
    718                                  data,
    719                                  &SampleApp_TransID,
    720                                  AF_DISCV_ROUTE,
    721                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    722              {
    723              }
    724              else
    725              {
    726                // Error occurred in request to send.
    727              }
    728            }
    729          }
    730          
    731          //void SampleApp_SendGroupMessageWHOLE1( void )
    732          //{
    733          //  uint8 data[1]={0};  
    734          //  if ( AF_DataRequest( &Group_DstAddr,
    735          //                       &SampleApp_epDesc,
    736          //                       WEBEE_GROUP_WHOLE1CLUSTERID,
    737          //                       1,
    738          //                       data,
    739          //                       &SampleApp_TransID,
    740          //                       AF_DISCV_ROUTE,
    741          //                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    742          //  
    743          //  {
    744          //  }
    745          //  else
    746          //  {
    747          //    // Error occurred in request to send.
    748          //  }
    749          //}
    750          
    751          void delay(int xms)
    752          {
    753            int i,j;
    754            for(i=xms;i>0;i--)
    755              for(j=587;j>0;j--);
    756          }
    757          /*********************************************************************
    758           * @fn      SampleApp_SendPeriodicMessage
    759           *
    760           * @brief   Send the periodic message.
    761           *
    762           * @param   none
    763           *
    764           * @return  none
    765           */
    766          void SampleApp_SendPeriodicMessage( void )
    767          {
    768            
    769          }
    770          
    771          
    772          /*********************************************************************
    773           * @fn      SampleApp_SendFlashMessage
    774           *
    775           * @brief   Send the flash message to group 1.
    776           *
    777           * @param   flashTime - in milliseconds
    778           *
    779           * @return  none
    780           */
    781          //void SampleApp_SendFlashMessage( uint16 flashTime )
    782          //{
    783          //  uint8 buffer[3];
    784          //  buffer[0] = (uint8)(SampleAppFlashCounter++);
    785          //  buffer[1] = LO_UINT16( flashTime );
    786          //  buffer[2] = HI_UINT16( flashTime );
    787          //
    788          //  if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    789          //                       SAMPLEAPP_FLASH_CLUSTERID,
    790          //                       3,
    791          //                       buffer,
    792          //                       &SampleApp_TransID,
    793          //                       AF_DISCV_ROUTE,
    794          //                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    795          //  {
    796          //  }
    797          //  else
    798          //  {
    799          //    // Error occurred in request to send.
    800          //  }
    801          //}
    802          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)//·¢ËÍ FE 02 01 F1  ,Ôò·µ»Ø01 F1
    803          {
    804           uint8 i,len,*str=NULL;
    805           str=cmdMsg->msg;
    806           len=*str; //msgÀïµÄµÚ1¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
    807           
    808           for(i=1;i<=len;i++)
    809           HalUARTWrite(0,str+i,1 ); 
    810           HalUARTWrite(0,"\n",1 );//»»ÐÐ  
    811          
    812            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    813                                 SAMPLEAPP_COM_CLUSTERID,
    814                                 len,// Êý¾Ý³¤¶È         
    815                                 str+1,//Êý¾ÝÄÚÈÝ
    816                                 &SampleApp_TransID,//  ´ØID  ??
    817                                 AF_DISCV_ROUTE,
    818                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    819            {
    820            }
    821            else
    822            {
    823              // Error occurred in request to send.
    824            }
    825           
    826          }
    827          /*********************************************************************
    828          *********************************************************************/

Errors: 1
Warnings: none
