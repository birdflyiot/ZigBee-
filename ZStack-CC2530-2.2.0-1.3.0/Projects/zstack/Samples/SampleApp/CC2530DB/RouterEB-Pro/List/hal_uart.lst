###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             12/Sep/2015  22:23:36 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥ #
#                          ¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee200 #
#                          7_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                 #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_uart.c                      #
#    Command line       =  -f "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ #
#                          —È‘¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBe #
#                          e2007_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas             #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wRouter.cfg" (-DCPU32MHZ                    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Components\h #
#                          al\target\CC2530EB\hal_uart.c" -D ZIGBEEPRO -D     #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\" #
#                           -lA "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° #
#                           µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞                           #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\Rou #
#                          terEB-Pro\List\" --diag_suppress Pe001,Pa010 -o    #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\"  #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\ #
#                          ∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞         #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\"   #
#                          -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ #
#                          —È‘¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBe #
#                          e2007_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas             #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞ #
#                          Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞                      #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I                     #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã #
#                          \∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞        #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I    #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡ #
#                          Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞           #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\" -I              #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂ #
#                          ‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞          #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\SAPI\" -I             #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂ #
#                          ‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞          #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\ZDO\" -I              #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡ #
#                          Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞           #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\" -I                   #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã #
#                          \∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞        #
#                           µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee200 #
#                          7_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1. #
#                          3.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I         #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘ #
#                          ¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee20 #
#                          07_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "D:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "D:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥ #
#                          ¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee200 #
#                          7_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                 #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\h #
#                          al_uart.lst                                        #
#    Object file        =  E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥ #
#                          ¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee200 #
#                          7_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas                 #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\ha #
#                          l_uart.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\◊ ¡œ\ZigBee\ ‘—Èœ‰π‚≈Ã\∂‡Õ®µ¿Õ¯πÿ÷˜∞Âª˘¥° µ—È‘¥¬Î°æ1°ø\zigbee—ßœ∞  µ—È‘¥≥Ã–Ú\Zigbee2007\ZigBee2007_PRO≥Ã–Ú\ZigBee2007_PRO≥Ã–Ú\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-03-19 15:13:41 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19475 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   E5FF         MOV     A,0xff
   \   000009   85FFFF       MOV     0xff,0xff
   \   00000C   53F1FE       ANL     0xf1,#0xfe
   \   00000F   43F30C       ORL     0xf3,#0xc
   \   000012   E5F3         MOV     A,0xf3
   \   000014   53F2F3       ANL     0xf2,#0xf3
   \   000017   E5F2         MOV     A,0xf2
   \   000019   758680       MOV     0x86,#-0x80
   \   00001C   75C480       MOV     0xc4,#-0x80
   \   00001F   7470         MOV     A,#0x70
   \   000021   90....       MOV     DPTR,#(dmaCh1234 + 26)
   \   000024   F0           MOVX    @DPTR,A
   \   000025   74C1         MOV     A,#-0x3f
   \   000027   90....       MOV     DPTR,#(dmaCh1234 + 27)
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   90....       MOV     DPTR,#(dmaCh1234 + 28)
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   541F         ANL     A,#0x1f
   \   000031   F0           MOVX    @DPTR,A
   \   000032   740F         MOV     A,#0xf
   \   000034   90....       MOV     DPTR,#(dmaCh1234 + 30)
   \   000037   F0           MOVX    @DPTR,A
   \   000038   744A         MOV     A,#0x4a
   \   00003A   90....       MOV     DPTR,#(dmaCh1234 + 31)
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   7470         MOV     A,#0x70
   \   000040   90....       MOV     DPTR,#(dmaCh1234 + 16)
   \   000043   F0           MOVX    @DPTR,A
   \   000044   74C1         MOV     A,#-0x3f
   \   000046   90....       MOV     DPTR,#(dmaCh1234 + 17)
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   90....       MOV     DPTR,#(dmaCh1234 + 20)
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   541F         ANL     A,#0x1f
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74CE         MOV     A,#-0x32
   \   000053   90....       MOV     DPTR,#(dmaCh1234 + 22)
   \   000056   F0           MOVX    @DPTR,A
   \   000057   90....       MOV     DPTR,#(dmaCh1234 + 23)
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   540F         ANL     A,#0xf
   \   00005D   4410         ORL     A,#0x10
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   74..         MOV     A,#((dmaCfg >> 8) & 0xff)
   \   000062   90....       MOV     DPTR,#(dmaCh1234 + 18)
   \   000065   F0           MOVX    @DPTR,A
   \   000066   74..         MOV     A,#(dmaCfg & 0xff)
   \   000068   90....       MOV     DPTR,#(dmaCh1234 + 19)
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   7480         MOV     A,#-0x80
   \   00006E   90....       MOV     DPTR,#(dmaCh1234 + 21)
   \   000071   F0           MOVX    @DPTR,A
   \   000072   E4           CLR     A
   \   000073   90....       MOV     DPTR,#(dmaCh1234 + 20)
   \   000076   F0           MOVX    @DPTR,A
   \   000077   7412         MOV     A,#0x12
   \   000079   90....       MOV     DPTR,#(dmaCh1234 + 23)
   \   00007C   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00007F                REQUIRE U0CSR
   \   00007F                REQUIRE U0UCR
   \   00007F                REQUIRE PERCFG
   \   00007F                REQUIRE ADCCFG
   \   00007F                REQUIRE P0SEL
   \   00007F                REQUIRE P2DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine17_0
   \   000001                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   90....       MOV     DPTR,#(dmaCfg + 524)
   \   000016   E8           MOV     A,R0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FC           MOV     R4,A
   \   000022   7403         MOV     A,#0x3
   \   000024   6C           XRL     A,R4
   \   000025   6005         JZ      ??HalUARTOpenDMA_0
   \   000027   7404         MOV     A,#0x4
   \   000029   6C           XRL     A,R4
   \   00002A   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002C   75C2D8       MOV     0xc2,#-0x28
   \   00002F   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000031   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for HalUARTOpenDMA>_0`:
   \   000038   00           DB        0
   \   000039   03           DB        3
   \   00003A   ....         DW        ??HalUARTOpenDMA_3
   \   00003C   ....         DW        ??HalUARTOpenDMA_4
   \   00003E   ....         DW        ??HalUARTOpenDMA_5
   \   000040   ....         DW        ??HalUARTOpenDMA_6
   \   000042   ....         DW        ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_4:
   \   000044   75C508       MOV     0xc5,#0x8
   \   000047   7423         MOV     A,#0x23
   \   000049   801A         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00004B   75C509       MOV     0xc5,#0x9
   \   00004E   7412         MOV     A,#0x12
   \   000050   8013         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000052   75C50A       MOV     0xc5,#0xa
   \   000055   7409         MOV     A,#0x9
   \   000057   800C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000059   75C50A       MOV     0xc5,#0xa
   \   00005C   7406         MOV     A,#0x6
   \   00005E   8005         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_3:
   \   000060   75C50B       MOV     0xc5,#0xb
   \   000063   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000065   90....       MOV     DPTR,#(dmaCfg + 520)
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   600D         JZ      ??HalUARTOpenDMA_9
   \   000072   75C442       MOV     0xc4,#0x42
   \   000075   43F310       ORL     0xf3,#0x10
   \   000078   C285         CLR     0x80.5
   \   00007A   43FD20       ORL     0xfd,#0x20
   \   00007D   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   00007F   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   000082   9070C1       MOV     DPTR,#0x70c1
   \   000085   E0           MOVX    A,@DPTR
   \   000086   90....       MOV     DPTR,#dmaCfg
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   53D1F7       ANL     0xd1,#0xf7
   \   000090   75D608       MOV     0xd6,#0x8
   \   000093                ; Setup parameters for call to function osal_memset
   \   000093   FC           MOV     R4,A
   \   000094   7D01         MOV     R5,#0x1
   \   000096   74FF         MOV     A,#-0x1
   \   000098   65C2         XRL     A,0xc2
   \   00009A   F9           MOV     R1,A
   \   00009B   7A..         MOV     R2,#(dmaCfg & 0xff)
   \   00009D   7B..         MOV     R3,#((dmaCfg >> 8) & 0xff)
   \   00009F   12....       LCALL   ??osal_memset?relay
   \   0000A2   438640       ORL     0x86,#0x40
   \   0000A5   75C100       MOV     0xc1,#0x0
   \   0000A8   E4           CLR     A
   \   0000A9   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000B0   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000B3                REQUIRE U0CSR
   \   0000B3                REQUIRE _A_P0
   \   0000B3                REQUIRE U0DBUF
   \   0000B3                REQUIRE U0BAUD
   \   0000B3                REQUIRE U0UCR
   \   0000B3                REQUIRE U0GCR
   \   0000B3                REQUIRE DMAARM
   \   0000B3                REQUIRE P0SEL
   \   0000B3                REQUIRE P0DIR
   \   0000B3                REQUIRE DMAIRQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(unsigned char *, uint16)
   \                     HalUARTReadDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8033         SJMP    ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E5..         MOV     A,?V0 + 0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   85C2..       MOV     ?V0 + 0,0xc2
   \   00001A   74FF         MOV     A,#-0x1
   \   00001C   65..         XRL     A,?V0 + 0
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V0 + 1
   \   000028   F0           MOVX    @DPTR,A
   \   000029   90....       MOV     DPTR,#(dmaCfg + 256)
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   04           INC     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   C3           CLR     C
   \   000030   9480         SUBB    A,#-0x80
   \   000032   4002         JC      ??HalUARTReadDMA_2
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000036   E8           MOV     A,R0
   \   000037   2401         ADD     A,#0x1
   \   000039   08           INC     R0
   \   00003A   E9           MOV     A,R1
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F9           MOV     R1,A
   \                     ??HalUARTReadDMA_0:
   \   00003E   C3           CLR     C
   \   00003F   E8           MOV     A,R0
   \   000040   9C           SUBB    A,R4
   \   000041   E9           MOV     A,R1
   \   000042   9D           SUBB    A,R5
   \   000043   500C         JNC     ??HalUARTReadDMA_3
   \   000045   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   65C2         XRL     A,0xc2
   \   00004F   60BA         JZ      ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000051   C285         CLR     0x80.5
   \   000053   E8           MOV     A,R0
   \   000054   FA           MOV     R2,A
   \   000055   E9           MOV     A,R1
   \   000056   FB           MOV     R3,A
   \   000057                REQUIRE ?Subroutine1
   \   000057                REQUIRE _A_P0
   \   000057                REQUIRE U0BAUD
   \   000057                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#(dmaCfg + 256)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   33           RLC     A
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   EE           MOV     A,R6
   \   00000B   24..         ADD     A,#(dmaCfg & 0xff)
   \   00000D   F582         MOV     DPL,A
   \   00000F   EF           MOV     A,R7
   \   000010   34..         ADDC    A,#((dmaCfg >> 8) & 0xff)
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   \   00000D   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000010   E0           MOVX    A,@DPTR
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000014   25..         ADD     A,?V0 + 4
   \   000016   F8           MOV     R0,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V0 + 5
   \   00001A   F9           MOV     R1,A
   \   00001B   C3           CLR     C
   \   00001C   E8           MOV     A,R0
   \   00001D   9481         SUBB    A,#-0x7f
   \   00001F   E9           MOV     A,R1
   \   000020   9400         SUBB    A,#0x0
   \   000022   4007         JC      ??HalUARTWriteDMA_0
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   00002B   E5A8         MOV     A,0xa8
   \   00002D   FA           MOV     R2,A
   \   00002E   C2AF         CLR     0xa8.7
   \   000030   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000033   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000036   EA           MOV     A,R2
   \   000037   A2E7         MOV     C,0xE0 /* A   */.7
   \   000039   92AF         MOV     0xa8.7,C
   \   00003B   7A00         MOV     R2,#0x0
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   8019         SJMP    ??CrossCallReturnLabel_4
   \                     ??HalUARTWriteDMA_2:
   \   000041   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000044   C0E0         PUSH    A
   \   000046   8C..         MOV     ?V0 + 0,R4
   \   000048   75..00       MOV     ?V0 + 1,#0x0
   \   00004B   7407         MOV     A,#0x7
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?S_SHL
   \   000052   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000055   D0E0         POP     A
   \   000057   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00005A   C3           CLR     C
   \   00005B   EA           MOV     A,R2
   \   00005C   95..         SUBB    A,?V0 + 4
   \   00005E   EB           MOV     A,R3
   \   00005F   95..         SUBB    A,?V0 + 5
   \   000061   40DE         JC      ??HalUARTWriteDMA_2
   \   000063   A2AF         MOV     C,0xa8.7
   \   000065   E4           CLR     A
   \   000066   92E0         MOV     0xE0 /* A   */.0,C
   \   000068   FC           MOV     R4,A
   \   000069   C2AF         CLR     0xa8.7
   \   00006B   90....       MOV     DPTR,#(dmaCfg + 518)
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6F           XRL     A,R7
   \   000070   6038         JZ      ??HalUARTWriteDMA_3
   \   000072   EC           MOV     A,R4
   \   000073   A2E0         MOV     C,0xE0 /* A   */.0
   \   000075   92AF         MOV     0xa8.7,C
   \   000077   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   8019         SJMP    ??CrossCallReturnLabel_5
   \                     ??HalUARTWriteDMA_4:
   \   000080   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000083   C0E0         PUSH    A
   \   000085   8C..         MOV     ?V0 + 0,R4
   \   000087   75..00       MOV     ?V0 + 1,#0x0
   \   00008A   7407         MOV     A,#0x7
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?S_SHL
   \   000091   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000094   D0E0         POP     A
   \   000096   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000099   C3           CLR     C
   \   00009A   EA           MOV     A,R2
   \   00009B   95..         SUBB    A,?V0 + 4
   \   00009D   EB           MOV     A,R3
   \   00009E   95..         SUBB    A,?V0 + 5
   \   0000A0   40DE         JC      ??HalUARTWriteDMA_4
   \   0000A2   A2AF         MOV     C,0xa8.7
   \   0000A4   E4           CLR     A
   \   0000A5   92E0         MOV     0xE0 /* A   */.0,C
   \   0000A7   FC           MOV     R4,A
   \   0000A8   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_3:
   \   0000AA   8F82         MOV     DPL,R7
   \   0000AC   A882         MOV     R0,DPL
   \   0000AE   E8           MOV     A,R0
   \   0000AF   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000B2   EE           MOV     A,R6
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   7401         MOV     A,#0x1
   \   0000B6   68           XRL     A,R0
   \   0000B7   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000BA   7006         JNZ     ??HalUARTWriteDMA_5
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000C1   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_5:
   \   0000C2   EC           MOV     A,R4
   \   0000C3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000C5   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000C7   7F08         MOV     R7,#0x8
   \   0000C9   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000CC                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 7
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E..         MOV     ?V0 + 2,R6
   \   000002   E5..         MOV     A,?V0 + 2
   \   000004   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   000006   F8           MOV     R0,A
   \   000007   E4           CLR     A
   \   000008   34..         ADDC    A,#(((dmaCfg + 260) >> 8) & 0xff)
   \   00000A   F9           MOV     R1,A
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   28           ADD     A,R0
   \   00000E   F582         MOV     DPL,A
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   39           ADDC    A,R1
   \   000013   F583         MOV     DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FF           MOV     R7,A
   \   000002   8F82         MOV     DPL,R7
   \   000004   AC82         MOV     R4,DPL
   \   000006   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000009   FE           MOV     R6,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   0E           INC     R6
   \   000002   EA           MOV     A,R2
   \   000003   2401         ADD     A,#0x1
   \   000005   0A           INC     R2
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#(((dmaCfg + 516) >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#(dmaCfg + 256)
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??HalUARTPollDMA_0 & 0xFFFF
   \   000014   8A82         MOV     DPL,R2
   \   000016   AC82         MOV     R4,DPL
   \   000018   EC           MOV     A,R4
   \   000019   F8           MOV     R0,A
   \   00001A   7900         MOV     R1,#0x0
   \                     ??HalUARTPollDMA_1:
   \   00001C   E8           MOV     A,R0
   \   00001D   FA           MOV     R2,A
   \   00001E   E9           MOV     A,R1
   \   00001F   FB           MOV     R3,A
   \   000020   EA           MOV     A,R2
   \   000021   C3           CLR     C
   \   000022   33           RLC     A
   \   000023   FA           MOV     R2,A
   \   000024   EB           MOV     A,R3
   \   000025   33           RLC     A
   \   000026   FB           MOV     R3,A
   \   000027   EA           MOV     A,R2
   \   000028   24..         ADD     A,#(dmaCfg & 0xff)
   \   00002A   F582         MOV     DPL,A
   \   00002C   EB           MOV     A,R3
   \   00002D   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000030   7010         JNZ     ??HalUARTPollDMA_2
   \   000032   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000035   4004         JC      ??HalUARTPollDMA_3
   \   000037   7800         MOV     R0,#0x0
   \   000039   7900         MOV     R1,#0x0
   \                     ??HalUARTPollDMA_3:
   \   00003B   EC           MOV     A,R4
   \   00003C   68           XRL     A,R0
   \   00003D   7001         JNZ     ??HalUARTPollDMA_4
   \   00003F   E9           MOV     A,R1
   \                     ??HalUARTPollDMA_4:
   \   000040   70DA         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   000042   90....       MOV     DPTR,#(dmaCfg + 258)
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FC           MOV     R4,A
   \   000047   90....       MOV     DPTR,#(dmaCfg + 257)
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   E8           MOV     A,R0
   \   00004D   6A           XRL     A,R2
   \   00004E   7001         JNZ     ??HalUARTPollDMA_5
   \   000050   E9           MOV     A,R1
   \                     ??HalUARTPollDMA_5:
   \   000051   600F         JZ      ??HalUARTPollDMA_6
   \   000053   E8           MOV     A,R0
   \   000054   F0           MOVX    @DPTR,A
   \   000055   EC           MOV     A,R4
   \   000056   7006         JNZ     ??HalUARTPollDMA_7
   \   000058   E595         MOV     A,0x95
   \   00005A   90....       MOV     DPTR,#(dmaCfg + 259)
   \   00005D   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   00005E   74C6         MOV     A,#-0x3a
   \   000060   8020         SJMP    ??HalUARTPollDMA_8
   \                     ??HalUARTPollDMA_6:
   \   000062   EC           MOV     A,R4
   \   000063   6021         JZ      ??HalUARTPollDMA_9
   \   000065   90....       MOV     DPTR,#(dmaCfg + 259)
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   E595         MOV     A,0x95
   \   00006C   C3           CLR     C
   \   00006D   9A           SUBB    A,R2
   \   00006E   FA           MOV     R2,A
   \   00006F   C3           CLR     C
   \   000070   9C           SUBB    A,R4
   \   000071   500E         JNC     ??HalUARTPollDMA_10
   \   000073   90....       MOV     DPTR,#(dmaCfg + 258)
   \   000076   E0           MOVX    A,@DPTR
   \   000077   C3           CLR     C
   \   000078   9A           SUBB    A,R2
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   E595         MOV     A,0x95
   \   00007C   90....       MOV     DPTR,#(dmaCfg + 259)
   \   00007F   8004         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_10:
   \   000081   E4           CLR     A
   \                     ??HalUARTPollDMA_8:
   \   000082   90....       MOV     DPTR,#(dmaCfg + 258)
   \                     ??HalUARTPollDMA_11:
   \   000085   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_9:
   \   000086                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000086   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   000089   8A..         MOV     ?V0 + 0,R2
   \   00008B   8B..         MOV     ?V0 + 1,R3
   \   00008D   A8..         MOV     R0,?V0 + 0
   \   00008F   A9..         MOV     R1,?V0 + 1
   \   000091   C3           CLR     C
   \   000092   E8           MOV     A,R0
   \   000093   9470         SUBB    A,#0x70
   \   000095   E9           MOV     A,R1
   \   000096   9400         SUBB    A,#0x0
   \   000098   400A         JC      ??HalUARTPollDMA_12
   \   00009A   0E           INC     R6
   \   00009B   8024         SJMP    ??HalUARTPollDMA_13
   \                     ??HalUARTPollDMA_0:
   \   00009D   E4           CLR     A
   \   00009E   90....       MOV     DPTR,#(dmaCfg + 258)
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   801D         SJMP    ??HalUARTPollDMA_13
   \                     ??HalUARTPollDMA_12:
   \   0000A4   C3           CLR     C
   \   0000A5   E8           MOV     A,R0
   \   0000A6   9440         SUBB    A,#0x40
   \   0000A8   E9           MOV     A,R1
   \   0000A9   9400         SUBB    A,#0x0
   \   0000AB   4006         JC      ??HalUARTPollDMA_14
   \   0000AD   0E           INC     R6
   \   0000AE   0E           INC     R6
   \   0000AF   D285         SETB    0x80.5
   \   0000B1   800E         SJMP    ??HalUARTPollDMA_13
   \                     ??HalUARTPollDMA_14:
   \   0000B3   E8           MOV     A,R0
   \   0000B4   7001         JNZ     ??HalUARTPollDMA_15
   \   0000B6   E9           MOV     A,R1
   \                     ??HalUARTPollDMA_15:
   \   0000B7   6008         JZ      ??HalUARTPollDMA_13
   \   0000B9   90....       MOV     DPTR,#(dmaCfg + 258)
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   7002         JNZ     ??HalUARTPollDMA_13
   \   0000BF   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_13:
   \   0000C1   90....       MOV     DPTR,#(dmaCfg + 519)
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6006         JZ      ??HalUARTPollDMA_16
   \   0000C7   E4           CLR     A
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   D2E4         SETB    0xE0 /* A   */.4
   \   0000CC   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_16:
   \   0000CD   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   601D         JZ      ??HalUARTPollDMA_17
   \   0000D3   E595         MOV     A,0x95
   \   0000D5   FB           MOV     R3,A
   \   0000D6   90....       MOV     DPTR,#(dmaCfg + 520)
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   C0E0         PUSH    A
   \   0000DC   90....       MOV     DPTR,#(dmaCfg + 521)
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EB           MOV     A,R3
   \   0000E2   C3           CLR     C
   \   0000E3   9A           SUBB    A,R2
   \   0000E4   FA           MOV     R2,A
   \   0000E5   D0E0         POP     A
   \   0000E7   C3           CLR     C
   \   0000E8   9A           SUBB    A,R2
   \   0000E9   5005         JNC     ??HalUARTPollDMA_17
   \   0000EB   E4           CLR     A
   \   0000EC   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000EF   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_17:
   \   0000F0   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   605B         JZ      ??HalUARTPollDMA_18
   \   0000F6   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   7055         JNZ     ??HalUARTPollDMA_18
   \   0000FC   E4           CLR     A
   \   0000FD   90....       MOV     DPTR,#(dmaCfg + 523)
   \   000100   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000103   12....       LCALL   ?S_SHL
   \   000106   E5..         MOV     A,?V0 + 0
   \   000108   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   00010A   E5..         MOV     A,?V0 + 1
   \   00010C   34..         ADDC    A,#(((dmaCfg + 260) >> 8) & 0xff)
   \   00010E   90....       MOV     DPTR,#(dmaCh1234 + 24)
   \   000111   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000114   12....       LCALL   ?S_SHL
   \   000117   E5..         MOV     A,?V0 + 0
   \   000119   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   00011B   90....       MOV     DPTR,#(dmaCh1234 + 25)
   \   00011E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000121   90....       MOV     DPTR,#(dmaCh1234 + 29)
   \   000124   F0           MOVX    @DPTR,A
   \   000125   90....       MOV     DPTR,#(dmaCh1234 + 28)
   \   000128   E0           MOVX    A,@DPTR
   \   000129   54E0         ANL     A,#0xe0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   90....       MOV     DPTR,#(dmaCfg + 518)
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A2AF         MOV     C,0xa8.7
   \   000136   E4           CLR     A
   \   000137   92E0         MOV     0xE0 /* A   */.0,C
   \   000139   FA           MOV     R2,A
   \   00013A   C2AF         CLR     0xa8.7
   \   00013C   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_19:
   \   00013F   00           NOP
   \   000140   E5D6         MOV     A,0xd6
   \   000142   A2E4         MOV     C,0xE0 /* A   */.4
   \   000144   50F9         JNC     ??HalUARTPollDMA_19
   \   000146   53D1EF       ANL     0xd1,#0xef
   \   000149   75D710       MOV     0xd7,#0x10
   \   00014C   EA           MOV     A,R2
   \   00014D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014F   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_18:
   \   000151   EE           MOV     A,R6
   \   000152   601B         JZ      ??HalUARTPollDMA_20
   \   000154   90....       MOV     DPTR,#(dmaCfg + 524)
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F8           MOV     R0,A
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   8882         MOV     DPL,R0
   \   00015E   8983         MOV     DPH,R1
   \   000160   E582         MOV     A,DPL
   \   000162   7002         JNZ     ??HalUARTPollDMA_21
   \   000164   E583         MOV     A,DPH
   \                     ??HalUARTPollDMA_21:
   \   000166   6007         JZ      ??HalUARTPollDMA_20
   \   000168                ; Setup parameters for indirect call
   \   000168   EE           MOV     A,R6
   \   000169   FA           MOV     R2,A
   \   00016A   7900         MOV     R1,#0x0
   \   00016C   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   00016F   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000172                REQUIRE _A_P0
   \   000172                REQUIRE U0BAUD
   \   000172                REQUIRE _A_IEN0
   \   000172                REQUIRE ST0
   \   000172                REQUIRE DMAARM
   \   000172                REQUIRE DMAREQ
   \   000172                REQUIRE DMAIRQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   75..00       MOV     ?V0 + 1,#0x0
   \   00000A   7407         MOV     A,#0x7
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#(dmaCfg & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C                REQUIRE ??Subroutine16_0
   \   00000C                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   34..         ADDC    A,#((dmaCfg >> 8) & 0xff)
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   65C2         XRL     A,0xc2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#(dmaCfg + 256)
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00000F   7027         JNZ     ??HalUARTRxAvailDMA_0
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   \                     ??HalUARTRxAvailDMA_1:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   \   000019   EC           MOV     A,R4
   \   00001A   C3           CLR     C
   \   00001B   33           RLC     A
   \   00001C   FC           MOV     R4,A
   \   00001D   ED           MOV     A,R5
   \   00001E   33           RLC     A
   \   00001F   FD           MOV     R5,A
   \   000020   EC           MOV     A,R4
   \   000021   24..         ADD     A,#(dmaCfg & 0xff)
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000029   7008         JNZ     ??HalUARTRxAvailDMA_2
   \   00002B   EA           MOV     A,R2
   \   00002C   2401         ADD     A,#0x1
   \   00002E   0A           INC     R2
   \   00002F   EB           MOV     A,R3
   \   000030   3400         ADDC    A,#0x0
   \   000032   FB           MOV     R3,A
   \                     ??HalUARTRxAvailDMA_2:
   \   000033   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000036   40DD         JC      ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   000038   80..         SJMP    ??Subroutine17_0
   \   00003A                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   9480         SUBB    A,#-0x80
   \   00000C   E9           MOV     A,R1
   \   00000D   9400         SUBB    A,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53D1EF       ANL     0xd1,#0xef
   \   000007   90....       MOV     DPTR,#(dmaCfg + 518)
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   7401         MOV     A,#0x1
   \   00000E   68           XRL     A,R0
   \   00000F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7401         MOV     A,#0x1
   \   000016   90....       MOV     DPTR,#(dmaCfg + 519)
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   E595         MOV     A,0x95
   \   00001C   90....       MOV     DPTR,#(dmaCfg + 521)
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   7401         MOV     A,#0x1
   \   000022   90....       MOV     DPTR,#(dmaCfg + 522)
   \   000025   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000028   6006         JZ      ??HalUARTIsrDMA_0
   \   00002A   7401         MOV     A,#0x1
   \   00002C   90....       MOV     DPTR,#(dmaCfg + 523)
   \   00002F   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   000030   80..         SJMP    ??Subroutine17_0
   \   000032                REQUIRE ST0
   \   000032                REQUIRE DMAIRQ
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          
     84          /******************************************************************************
     85           * @fn      HalUARTInit
     86           *
     87           * @brief   Initialize the UART
     88           *
     89           * @param   none
     90           *
     91           * @return  none
     92           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          void HalUARTInit(void)
   \                     HalUARTInit:
     94          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     95          #if HAL_UART_DMA
     96            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   ??HalUARTInitDMA?relay
     97          #endif
     98          #if HAL_UART_ISR
     99            HalUARTInitISR();
    100          #endif
    101          }
   \   000007   80..         SJMP    ??Subroutine17_0
    102          
    103          /******************************************************************************
    104           * @fn      HalUARTOpen
    105           *
    106           * @brief   Open a port according tp the configuration specified by parameter.
    107           *
    108           * @param   port   - UART port
    109           *          config - contains configuration information
    110           *
    111           * @return  Status of the function call
    112           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    114          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    115          #if (HAL_UART_DMA == 1)
    116            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   ??HalUARTOpenDMA?relay
    117          #endif
    118          #if (HAL_UART_DMA == 2)
    119            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    120          #endif
    121          #if (HAL_UART_ISR == 1)
    122            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    123          #endif
    124          #if (HAL_UART_ISR == 2)
    125            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    126          #endif
    127            
    128          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    129            // UART is not enabled. Do nothing.
    130            (void) port;   // unused argument
    131            (void) config; // unused argument
    132          #endif
    133            
    134            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   80..         SJMP    ?Subroutine2
    135          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    136          
    137          /*****************************************************************************
    138           * @fn      HalUARTRead
    139           *
    140           * @brief   Read a buffer from the UART
    141           *
    142           * @param   port - USART module designation
    143           *          buf  - valid data buffer at least 'len' bytes in size
    144           *          len  - max length number of bytes to copy to 'buf'
    145           *
    146           * @return  length of buffer that was read
    147           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    149          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    150          #if (HAL_UART_DMA == 1)
    151            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL   ??HalUARTReadDMA?relay
   \   00000B   8004         SJMP    ??HalUARTRead_1
    152          #endif
    153          #if (HAL_UART_DMA == 2)
    154            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    155          #endif
    156          #if (HAL_UART_ISR == 1)
    157            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    158          #endif
    159          #if (HAL_UART_ISR == 2)
    160            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    161          #endif
    162          
    163          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    164            // UART is not enabled. Do nothing.
    165            // Unused arguments
    166            (void) port;
    167            (void) buf;
    168            (void) len;
    169          #endif
    170            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011   80..         SJMP    ?Subroutine2
    171          }
    172          
    173          /******************************************************************************
    174           * @fn      HalUARTWrite
    175           *
    176           * @brief   Write a buffer to the UART.
    177           *
    178           * @param   port - UART port
    179           *          buf  - pointer to the buffer that will be written, not freed
    180           *          len  - length of
    181           *
    182           * @return  length of the buffer that was sent
    183           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    185          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    186          #if (HAL_UART_DMA == 1)
    187            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   ??HalUARTWriteDMA?relay
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    188          #endif
    189          #if (HAL_UART_DMA == 2)
    190            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    191          #endif
    192          #if (HAL_UART_ISR == 1)
    193            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    194          #endif
    195          #if (HAL_UART_ISR == 2)
    196            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    197          #endif
    198          
    199          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    200            // UART is not enabled. Do nothing.
    201            // Unused arguments
    202            (void) port;
    203            (void) buf;
    204            (void) len;
    205          #endif
    206            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    207          }
    208          
    209          /******************************************************************************
    210           * @fn      HalUARTSuspend
    211           *
    212           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    213           *
    214           * @param   None
    215           *
    216           * @return  None
    217           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    219          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    220          #if HAL_UART_DMA
    221            HalUARTSuspendDMA();
   \   000000   5386BF       ANL     0x86,#0xbf
    222          #endif
    223          #if HAL_UART_ISR
    224            HalUARTSuspendISR();
    225          #endif
    226          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE U0CSR
    227          
    228          /******************************************************************************
    229           * @fn      HalUARTResume
    230           *
    231           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    232           *
    233           * @param   None
    234           *
    235           * @return  None
    236           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void HalUARTResume( void )
   \                     HalUARTResume:
    238          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    239          #if HAL_UART_DMA
    240            HalUARTResumeDMA();
   \   000000   43C480       ORL     0xc4,#0x80
   \   000003   438640       ORL     0x86,#0x40
    241          #endif
    242          #if HAL_UART_ISR
    243            HalUARTResumeISR();
    244          #endif
    245          }
   \   000006   02....       LJMP    ?BRET
   \   000009                REQUIRE U0CSR
   \   000009                REQUIRE U0UCR
    246          
    247          /***************************************************************************************************
    248           * @fn      HalUARTPoll
    249           *
    250           * @brief   Poll the UART.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void HalUARTPoll(void)
   \                     HalUARTPoll:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258          #if HAL_UART_DMA
    259            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   ??HalUARTPollDMA?relay
    260          #endif
    261          #if HAL_UART_ISR
    262            HalUARTPollISR();
    263          #endif
    264          }
   \   000007   80..         SJMP    ??Subroutine17_0
    265          
    266          /**************************************************************************************************
    267           * @fn      Hal_UART_RxBufLen()
    268           *
    269           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    270           *
    271           * @param   port - UART port
    272           *
    273           * @return  length of current Rx Buffer
    274           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    276          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    277          #if (HAL_UART_DMA == 1)
    278            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    279          #endif
    280          #if (HAL_UART_DMA == 2)
    281            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    282          #endif
    283          #if (HAL_UART_ISR == 1)
    284            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    285          #endif
    286          #if (HAL_UART_ISR == 2)
    287            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    288          #endif
    289          
    290          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    291            // UART is not enabled. Do nothing.
    292            // Unused argument
    293            (void) port;
    294          #endif
    295            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine2
    296          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInitDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpenDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTReadDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWriteDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPollDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRxAvailDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTIsrDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTSuspend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTResume?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_UART_RxBufLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    297          
    298          /******************************************************************************
    299          ******************************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     HalUARTInit                2      0      0
       -> HalUARTInitDMA        4      0      0
     HalUARTInitDMA             2      0      0
     HalUARTIsrDMA              3      0      0
     HalUARTOpen                0      0      9
       -> HalUARTOpenDMA        0      0     18
     HalUARTOpenDMA             2      0      9
       -> osal_memset           4      0      0
     HalUARTPoll                2      0      0
       -> HalUARTPollDMA        4      0      0
     HalUARTPollDMA             1      0     10
       -> HalUARTRxAvailDMA     0      0     20
     HalUARTRead                0      0      9
       -> HalUARTReadDMA        0      0     18
     HalUARTReadDMA             1      0     19
     HalUARTResume              0      0      0
     HalUARTRxAvailDMA          2      0     10
     HalUARTSuspend             0      0      0
     HalUARTWrite               0      0      9
       -> HalUARTWriteDMA       0      0     18
     HalUARTWriteDMA            1      0     25
     Hal_UART_RxBufLen          0      0      9
       -> HalUARTRxAvailDMA     0      0     18


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_P0                        1
     U0CSR                        1
     ST0                          1
     _A_IEN0                      1
     U0DBUF                       1
     U0BAUD                       1
     U0UCR                        1
     U0GCR                        1
     DMAIRQ                       1
     DMAARM                       1
     DMAREQ                       1
     PERCFG                       1
     ADCCFG                       1
     P0SEL                        1
     P0DIR                        1
     P2DIR                        1
     dmaCfg                     526
     HalUARTInitDMA             127
     ?Subroutine0                 1
     ??Subroutine17_0             7
     HalUARTOpenDMA             179
     HalUARTReadDMA              87
     ?Subroutine1                 5
     ?Subroutine7                21
     HalUARTWriteDMA            204
     ?Subroutine13               12
     ?Subroutine11                4
     ?Subroutine10               22
     ?Subroutine8                11
     ?Subroutine5                11
     ?Subroutine12                4
     ?Subroutine15               10
     ?Subroutine14                5
     HalUARTPollDMA             370
     ?Subroutine4                15
     ?Subroutine6                12
     ??Subroutine16_0             9
     ?Subroutine3                 9
     HalUARTRxAvailDMA           58
     ?Subroutine9                16
     HalUARTIsrDMA               50
     HalUARTInit                  9
     HalUARTOpen                 15
     ?Subroutine2                 5
     HalUARTRead                 19
     HalUARTWrite                17
     HalUARTSuspend               6
     HalUARTResume                9
     HalUARTPoll                  9
     Hal_UART_RxBufLen           19
     ??HalUARTInitDMA?relay       6
     ??HalUARTOpenDMA?relay       6
     ??HalUARTReadDMA?relay       6
     ??HalUARTWriteDMA?relay      6
     ??HalUARTPollDMA?relay       6
     ??HalUARTRxAvailDMA?relay    6
     ??HalUARTIsrDMA?relay        6
     ??HalUARTInit?relay          6
     ??HalUARTOpen?relay          6
     ??HalUARTRead?relay          6
     ??HalUARTWrite?relay         6
     ??HalUARTSuspend?relay       6
     ??HalUARTResume?relay        6
     ??HalUARTPoll?relay          6
     ??Hal_UART_RxBufLen?relay    6

 
 1 357 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
 1 447 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
   526 bytes of XDATA memory

Errors: none
Warnings: none
