///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            24/Dec/2016  13:07:32 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\ /
//                          hal\target\CC2530EB\hal_key.c                     /
//    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø        /
//                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wEndev.cfg" (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Co /
//                          mponents\hal\target\CC2530EB\hal_key.c" -D        /
//                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D         /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -D xSensor01 -D xSensor02 -D  /
//                          xSensor03 -D xSensor04 -D xSensor05 -D xSensor06  /
//                          -D xSensor07 -D xSensor08 -D xSensor09 -D         /
//                          Sensor10 -D xController01 -D xController02 -D     /
//                          xController03 -D xController4 -D xController05    /
//                          -D xController06 -D xController07 -D              /
//                          xController08 -D xController09 -D Controller10    /
//                          -lC "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø       /
//                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø /
//                            DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë          /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" --diag_suppress Pe001,Pa010 -o              /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\O /
//                          bj\" -e --require_prototypes --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I    /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI /
//                          2530DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª /
//                          ¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë        /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgb /
//                          ee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë   /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\TARGET\CC2530EB\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\MCU\CCSOC\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\INCLUDE\" -I                        /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\NWK\" -I                  /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SEC\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SAPI\" -I                          /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SYS\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\ZDO\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\ZMAC\" -I                       /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SADDR\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SDATA\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\HIGH_LEVEL\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I     /
//                          "D:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\" -I "D:\Program Files     /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.4\8051\INC\CLIB\" -Ohz                          /
//    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\hal_key.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,0203H
        PUBLIC ??HalKeyEnterSleep?relay
        FUNCTION ??HalKeyEnterSleep?relay,0203H
        PUBLIC ??HalKeyExitSleep?relay
        FUNCTION ??HalKeyExitSleep?relay,0203H
        PUBLIC ??HalKeyInit?relay
        FUNCTION ??HalKeyInit?relay,0203H
        PUBLIC ??HalKeyPoll?relay
        FUNCTION ??HalKeyPoll?relay,0203H
        PUBLIC ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,0203H
        PUBLIC ??halGetJoyKeyInput?relay
        FUNCTION ??halGetJoyKeyInput?relay,0203H
        PUBWEAK `??halKeyPort0Isr??INTVEC 107`
        PUBWEAK `??halKeyPort2Isr??INTVEC 51`
        PUBLIC ??halProcessKeyInterrupt?relay
        FUNCTION ??halProcessKeyInterrupt?relay,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalKeyEnterSleep
        FUNCTION HalKeyEnterSleep,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyExitSleep
        FUNCTION HalKeyExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Hal_KeyIntEnable
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0SEL
        PUBWEAK P2IFG
        PUBWEAK PICTL
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK _A_P2
        PUBLIC halGetJoyKeyInput
        FUNCTION halGetJoyKeyInput,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeyPort0Isr
        FUNCTION halKeyPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halKeyPort2Isr
        FUNCTION halKeyPort2Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halProcessKeyInterrupt
        FUNCTION halProcessKeyInterrupt,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalAdcRead          SYMBOL "HalAdcRead"
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
HalKeyConfig        SYMBOL "HalKeyConfig"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
HalKeyEnterSleep    SYMBOL "HalKeyEnterSleep"
??HalKeyEnterSleep?relay SYMBOL "?relay", HalKeyEnterSleep
HalKeyExitSleep     SYMBOL "HalKeyExitSleep"
??HalKeyExitSleep?relay SYMBOL "?relay", HalKeyExitSleep
HalKeyInit          SYMBOL "HalKeyInit"
??HalKeyInit?relay  SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
??HalKeyPoll?relay  SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
halGetJoyKeyInput   SYMBOL "halGetJoyKeyInput"
??halGetJoyKeyInput?relay SYMBOL "?relay", halGetJoyKeyInput
halKeyPort0Isr      SYMBOL "halKeyPort0Isr"
`??halKeyPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", halKeyPort0Isr
halKeyPort2Isr      SYMBOL "halKeyPort2Isr"
`??halKeyPort2Isr??INTVEC 51` SYMBOL "??INTVEC 51", halKeyPort2Isr
halProcessKeyInterrupt SYMBOL "halProcessKeyInterrupt"
??halProcessKeyInterrupt?relay SYMBOL "?relay", halProcessKeyInterrupt

        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN Hal_TaskID

// J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2008-12-15 07:19:03 -0800 (Mon, 15 Dec 2008) $
//    4   Revision:       $Revision: 18611 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8 
//    9   Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   41        to occur every 100ms.  This should be long enough to naturally
//   42        debounce the keys.  The KeyRead() function remembers the key
//   43        state of the previous poll and will only return a non-zero
//   44        value if the key state changes.
//   45 
//   46  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   47        25ms after the interrupt occurs by the ISR.  This delay is used
//   48        for key debouncing.  The ISR disables any further Key interrupt
//   49        until KeyRead() is executed.  KeyRead() will re-enable Key
//   50        interrupts after executing.  Unlike polling, when interrupts
//   51        are enabled, the previous key state is not remembered.  This
//   52        means that KeyRead() will return the current state of the keys
//   53        (not a change in state of the keys).
//   54 
//   55  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   56        the ISR.  Therefore, the joystick movements will only be detected
//   57        during a pushbutton interrupt caused by S1 or the center joystick
//   58        pushbutton.
//   59 
//   60  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   61        high state to a low state.  This transition is typically clean.  The
//   62        duration of the low state is around 200ms.  When the signal returns
//   63        to the high state, there is a high likelihood of signal bounce, which
//   64        causes a unwanted interrupts.  Normally, we would set the interrupt
//   65        edge to falling edge to generate an interrupt when S1 is pushed, but
//   66        because of the signal bounce, it is better to set the edge to rising
//   67        edge to generate an interrupt when S1 is released.  The debounce logic
//   68        can then filter out the signal bounce.  The result is that we typically
//   69        get only 1 interrupt per button push.  This mechanism is not totally
//   70        foolproof because occasionally, signal bound occurs during the falling
//   71        edge as well.  A similar mechanism is used to handle the joystick
//   72        pushbutton on the DB.  For the EB, we do not have independent control
//   73        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   74        a result, only one or the other pushbuttons work reasonably well with
//   75        interrupts.  The default is the make the S1 switch on the EB work more
//   76        reliably.
//   77 
//   78 *********************************************************************/
//   79 
//   80 /**************************************************************************************************
//   81  *                                            INCLUDES
//   82  **************************************************************************************************/
//   83 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1
//   84 #include "hal_defs.h"
//   85 #include "hal_types.h"
//   86 #include "hal_drivers.h"
//   87 #include "hal_adc.h"
//   88 #include "hal_key.h"
//   89 #include "osal.h"
//   90 
//   91 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   92 
//   93 /**************************************************************************************************
//   94  *                                              MACROS
//   95  **************************************************************************************************/
//   96 
//   97 /**************************************************************************************************
//   98  *                                            CONSTANTS
//   99  **************************************************************************************************/
//  100 #define HAL_KEY_RISING_EDGE   0
//  101 #define HAL_KEY_FALLING_EDGE  1
//  102 
//  103 #define HAL_KEY_DEBOUNCE_VALUE  25
//  104 #define HAL_KEY_POLLING_VALUE   100
//  105 
//  106 /* CPU port interrupt */
//  107 #define HAL_KEY_CPU_PORT_0_IF P0IF
//  108 #define HAL_KEY_CPU_PORT_2_IF P2IF
//  109 
//  110 /* SW_6 is at P0.5 */
//  111 #define HAL_KEY_SW_6_PORT   P0
//  112 #define HAL_KEY_SW_6_BIT    BV(5)
//  113 #define HAL_KEY_SW_6_SEL    P0SEL
//  114 #define HAL_KEY_SW_6_DIR    P0DIR
//  115 
//  116 /* edge interrupt */
//  117 #define HAL_KEY_SW_6_EDGEBIT  BV(0) //P0ICON
//  118 #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
//  119 
//  120 
//  121 /* SW_6 interrupts */
//  122 #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
//  123 #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  124 #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
//  125 #define HAL_KEY_SW_6_ICTLBIT  BV(5) /* P0IEN - P0.1 enable/disable bit */
//  126 #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
//  127 
//  128 #define HAL_KEY_SW_7_EN     TRUE
//  129 
//  130 /* SW_7 is at P0.4 */
//  131 #define HAL_KEY_SW_7_PORT   P0
//  132 #define HAL_KEY_SW_7_BIT    BV(4)
//  133 #define HAL_KEY_SW_7_SEL    P0SEL
//  134 #define HAL_KEY_SW_7_DIR    P0DIR
//  135 
//  136 /* edge interrupt */
//  137 #define HAL_KEY_SW_7_EDGEBIT  BV(0) //P0ICON
//  138 #define HAL_KEY_SW_7_EDGE     HAL_KEY_FALLING_EDGE
//  139 
//  140 
//  141 /* SW_7 interrupts */
//  142 #define HAL_KEY_SW_7_IEN      IEN1  /* CPU interrupt mask register */
//  143 #define HAL_KEY_SW_7_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  144 #define HAL_KEY_SW_7_ICTL     P0IEN /* Port Interrupt Control register */
//  145 #define HAL_KEY_SW_7_ICTLBIT  BV(4) /* P0IEN - P0.1 enable/disable bit */
//  146 #define HAL_KEY_SW_7_PXIFG    P0IFG /* Interrupt flag at source */
//  147 
//  148 /* SW_5 is at P0.6 */
//  149 #define HAL_KEY_SW_5_PORT   P0
//  150 #define HAL_KEY_SW_5_BIT    BV(6)
//  151 #define HAL_KEY_SW_5_SEL    P0SEL
//  152 #define HAL_KEY_SW_5_DIR    P0DIR
//  153 
//  154 /* edge interrupt */
//  155 #define HAL_KEY_SW_5_EDGEBIT  BV(0)
//  156 #define HAL_KEY_SW_5_EDGE     HAL_KEY_FALLING_EDGE
//  157 
//  158 /* SW_5 interrupts */
//  159 #define HAL_KEY_SW_5_IEN      IEN1  /* CPU interrupt mask register */
//  160 #define HAL_KEY_SW_5_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  161 #define HAL_KEY_SW_5_ICTL     P0IEN /* Port Interrupt Control register */
//  162 #define HAL_KEY_SW_5_ICTLBIT  BV(6) /* P0IEN - P0.1 enable/disable bit */
//  163 #define HAL_KEY_SW_5_PXIFG    P0IFG /* Interrupt flag at source */
//  164 
//  165 /* SW_4 is at P0.6 */
//  166 #define HAL_KEY_SW_4_PORT   P0
//  167 #define HAL_KEY_SW_4_BIT    BV(6)
//  168 #define HAL_KEY_SW_4_SEL    P0SEL
//  169 #define HAL_KEY_SW_4_DIR    P0DIR
//  170 
//  171 /* edge interrupt */
//  172 #define HAL_KEY_SW_4_EDGEBIT  BV(0)
//  173 #define HAL_KEY_SW_4_EDGE     HAL_KEY_FALLING_EDGE
//  174 
//  175 /* SW_4 interrupts */
//  176 #define HAL_KEY_SW_4_IEN      IEN1  /* CPU interrupt mask register */
//  177 #define HAL_KEY_SW_4_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  178 #define HAL_KEY_SW_4_ICTL     P0IEN /* Port Interrupt Control register */
//  179 #define HAL_KEY_SW_4_ICTLBIT  BV(6) /* P0IEN - P0.1 enable/disable bit */
//  180 #define HAL_KEY_SW_4_PXIFG    P0IFG /* Interrupt flag at source */
//  181 
//  182 
//  183 
//  184 
//  185 /* Joy stick move at P2.0 */
//  186 #define HAL_KEY_JOY_MOVE_PORT   P2
//  187 #define HAL_KEY_JOY_MOVE_BIT    BV(0)
//  188 #define HAL_KEY_JOY_MOVE_SEL    P2SEL
//  189 #define HAL_KEY_JOY_MOVE_DIR    P2DIR
//  190 
//  191 /* edge interrupt */
//  192 #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
//  193 #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
//  194 
//  195 /* Joy move interrupts */
//  196 #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
//  197 #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
//  198 #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
//  199 #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
//  200 #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
//  201 
//  202 #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
//  203 
//  204 
//  205 /**************************************************************************************************
//  206  *                                            TYPEDEFS
//  207  **************************************************************************************************/
//  208 
//  209 
//  210 /**************************************************************************************************
//  211  *                                        GLOBAL VARIABLES
//  212  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  213 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
halKeySavedKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  214 static halKeyCBack_t pHalKeyProcessFunction;
pHalKeyProcessFunction:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  215 static uint8 HalKeyConfigured;
HalKeyConfigured:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  216 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
Hal_KeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  217 
//  218 /**************************************************************************************************
//  219  *                                        FUNCTIONS - Local
//  220  **************************************************************************************************/
//  221 void halProcessKeyInterrupt(void);
//  222 uint8 halGetJoyKeyInput(void);
//  223 
//  224 
//  225 
//  226 /**************************************************************************************************
//  227  *                                        FUNCTIONS - API
//  228  **************************************************************************************************/
//  229 
//  230 
//  231 /**************************************************************************************************
//  232  * @fn      HalKeyInit
//  233  *
//  234  * @brief   Initilize Key Service
//  235  *
//  236  * @param   none
//  237  *
//  238  * @return  None
//  239  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 void HalKeyInit( void )
HalKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalKeyInit
//  241 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  242   /* Initialize previous key to 0 */
//  243   halKeySavedKeys = 0;
        CLR     A
        MOV     DPTR,#halKeySavedKeys
        MOVX    @DPTR,A
//  244 
//  245   HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0xdf
//  246   HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0xdf
//  247   
//  248   HAL_KEY_SW_7_SEL &= ~(HAL_KEY_SW_7_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0xef
//  249   HAL_KEY_SW_7_DIR &= ~(HAL_KEY_SW_7_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0xef
//  250   
//  251   
//  252   HAL_KEY_SW_5_SEL &= ~(HAL_KEY_SW_5_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0xbf
//  253   HAL_KEY_SW_5_DIR &= ~(HAL_KEY_SW_5_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0xbf
//  254   
//  255   
//  256   HAL_KEY_SW_4_SEL &= ~(HAL_KEY_SW_4_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0xbf
//  257   HAL_KEY_SW_4_DIR &= ~(HAL_KEY_SW_4_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0xbf
//  258 
//  259  // HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
//  260 //  HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
//  261 
//  262 
//  263   /* Initialize callback function */
//  264   pHalKeyProcessFunction  = NULL;
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  265 
//  266   /* Start with key is not configured */
//  267   HalKeyConfigured = FALSE;
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock0
//  268 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  269 
//  270 
//  271 /**************************************************************************************************
//  272  * @fn      HalKeyConfig
//  273  *
//  274  * @brief   Configure the Key serivce
//  275  *
//  276  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  277  *          cback - pointer to the CallBack function
//  278  *
//  279  * @return  None
//  280  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  281 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
HalKeyConfig:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalKeyConfig
//  282 {
        FUNCALL HalKeyConfig, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalKeyConfig, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  283   /* Enable/Disable Interrupt or */
//  284   Hal_KeyIntEnable = interruptEnable;
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    @DPTR,A
//  285 
//  286   /* Register the callback fucntion */
//  287   pHalKeyProcessFunction = cback;
        MOV     DPTR,#pHalKeyProcessFunction
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  288 
//  289   /* Determine if interrupt is enable or not */
//  290   if (Hal_KeyIntEnable)
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JZ      ??HalKeyConfig_0
//  291   {
//  292     /* Rising/Falling edge configuratinn */
//  293 
//  294     PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  295     PICTL &= ~(HAL_KEY_SW_7_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  296     PICTL &= ~(HAL_KEY_SW_5_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  297     PICTL &= ~(HAL_KEY_SW_4_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  298     
//  299     /* For falling edge, the bit must be set. */
//  300   #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
//  301     PICTL |= HAL_KEY_SW_6_EDGEBIT;
        ORL     0x8c,#0x1
//  302   #endif
//  303 //    PICTL &= ~(HAL_KEY_SW_7_EDGEBIT);    /* Clear the edge bit */
//  304     /* For falling edge, the bit must be set. */
//  305   #if (HAL_KEY_SW_7_EDGE == HAL_KEY_FALLING_EDGE)
//  306     PICTL |= HAL_KEY_SW_7_EDGEBIT;
        ORL     0x8c,#0x1
//  307   #endif
//  308     
//  309   #if (HAL_KEY_SW_5_EDGE == HAL_KEY_FALLING_EDGE)
//  310     PICTL |= HAL_KEY_SW_5_EDGEBIT;
        ORL     0x8c,#0x1
//  311   #endif
//  312     
//  313   #if (HAL_KEY_SW_4_EDGE == HAL_KEY_FALLING_EDGE)
//  314     PICTL |= HAL_KEY_SW_4_EDGEBIT;
        ORL     0x8c,#0x1
//  315   #endif
//  316 
//  317 
//  318 
//  319     /* Interrupt configuration:
//  320      * - Enable interrupt generation at the port
//  321      * - Enable CPU interrupt
//  322      * - Clear any pending interrupt
//  323      */
//  324     HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
        ORL     0xab,#0x20
//  325     HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
        SETB    0xb8.5
//  326     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
        MOV     0x89,#-0x21
//  327 
//  328     HAL_KEY_SW_7_ICTL |= HAL_KEY_SW_7_ICTLBIT;
        ORL     0xab,#0x10
//  329     HAL_KEY_SW_7_IEN |= HAL_KEY_SW_7_IENBIT;
        SETB    0xb8.5
//  330     HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT);
        MOV     0x89,#-0x11
//  331     
//  332     
//  333     HAL_KEY_SW_5_ICTL |= HAL_KEY_SW_5_ICTLBIT;
        LCALL   ?Subroutine3 & 0xFFFF
//  334     HAL_KEY_SW_5_IEN |= HAL_KEY_SW_5_IENBIT;
//  335     HAL_KEY_SW_5_PXIFG = ~(HAL_KEY_SW_5_BIT);
//  336     
//  337     HAL_KEY_SW_4_ICTL |= HAL_KEY_SW_4_ICTLBIT;
??CrossCallReturnLabel_0:
        LCALL   ?Subroutine3 & 0xFFFF
//  338     HAL_KEY_SW_4_IEN |= HAL_KEY_SW_4_IENBIT;
//  339     HAL_KEY_SW_4_PXIFG = ~(HAL_KEY_SW_4_BIT);
//  340 
//  341 
//  342     /* Rising/Falling edge configuratinn */
//  343 
//  344   //  HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
//  345     /* For falling edge, the bit must be set. */
//  346   #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
//  347   //  HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
//  348   #endif
//  349 
//  350 
//  351     /* Interrupt configuration:
//  352      * - Enable interrupt generation at the port
//  353      * - Enable CPU interrupt
//  354      * - Clear any pending interrupt
//  355      */
//  356    // HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
//  357   //  HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
//  358   //  HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
//  359 
//  360 
//  361     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  362     if (HalKeyConfigured == TRUE)
??CrossCallReturnLabel_1:
        MOV     DPTR,#HalKeyConfigured
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??HalKeyConfig_1
//  363     {
//  364       osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??HalKeyConfig_1
//  365     }
//  366   }
//  367   else    /* Interrupts NOT enabled */
//  368   {
//  369     HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt   */
??HalKeyConfig_0:
        ANL     0xab,#0xdf
//  370     HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
        CLR     0xb8.5
//  371     HAL_KEY_SW_7_ICTL &= ~(HAL_KEY_SW_7_ICTLBIT); /* don't generate interrupt   */
        ANL     0xab,#0xef
//  372     HAL_KEY_SW_7_IEN &= ~(HAL_KEY_SW_7_IENBIT);   /* Clear interrupt enable bit */
        CLR     0xb8.5
//  373     
//  374     HAL_KEY_SW_5_ICTL &= ~(HAL_KEY_SW_5_ICTLBIT); /* don't generate interrupt */
        ANL     0xab,#0xbf
//  375     HAL_KEY_SW_5_IEN &= ~(HAL_KEY_SW_5_IENBIT);   /* Clear interrupt enable bit */
        CLR     0xb8.5
//  376     
//  377     HAL_KEY_SW_4_ICTL &= ~(HAL_KEY_SW_4_ICTLBIT); /* don't generate interrupt */
        ANL     0xab,#0xbf
//  378     HAL_KEY_SW_4_IEN &= ~(HAL_KEY_SW_4_IENBIT);   /* Clear interrupt enable bit */
        CLR     0xb8.5
//  379 
//  380     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  381   }
//  382 
//  383   /* Key now is configured */
//  384   HalKeyConfigured = TRUE;
??HalKeyConfig_1:
        MOV     A,#0x1
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
//  385 }
        MOV     R7,A
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE P0IFG
        REQUIRE P0IEN
        REQUIRE _A_IEN1
        REQUIRE PICTL

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        ORL     0xab,#0x40
        SETB    0xb8.5
        MOV     0x89,#-0x41
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  386 
//  387 
//  388 /**************************************************************************************************
//  389  * @fn      HalKeyRead
//  390  *
//  391  * @brief   Read the current value of a key
//  392  *
//  393  * @param   None
//  394  *
//  395  * @return  keys - current keys status
//  396  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  397 uint8 HalKeyRead ( void )
HalKeyRead:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalKeyRead
//  398 {
        FUNCALL HalKeyRead, halGetJoyKeyInput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  399   uint8 keys = 0;
        MOV     R6,#0x0
//  400 
//  401 #ifdef HAL_BOARD_CC2530EB_REV17
//  402   if ( (HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active high */
//  403 #elif defined (HAL_BOARD_CC2530EB_REV13)
//  404   if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
        MOV     C,0x80.5
        JC      ??HalKeyRead_0
//  405 #endif
//  406   {
//  407     keys |= HAL_KEY_SW_6;
        MOV     R6,#0x20
//  408   }
//  409 #ifdef HAL_BOARD_CC2530EB_REV17
//  410   if ( (HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active high */
//  411 #elif defined (HAL_BOARD_CC2530EB_REV13)
//  412   if (!(HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active low */
??HalKeyRead_0:
        MOV     C,0x80.4
        JC      ??HalKeyRead_1
//  413 #endif
//  414   {
//  415     keys |= HAL_KEY_SW_7;
        MOV     A,R6
        SETB    0xE0 /* A   */.6
        MOV     R6,A
//  416   }
//  417 
//  418 
//  419  // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
//  420   {
//  421     keys |= halGetJoyKeyInput();
//  422   }
//  423 
//  424   return keys;
??HalKeyRead_1:
        ; Setup parameters for call to function halGetJoyKeyInput
        LCALL   ??halGetJoyKeyInput?relay
        MOV     A,R1
        ORL     A,R6
        CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1
//  425 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,A
        CFI EndBlock cfiBlock7
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  426 
//  427 
//  428 /**************************************************************************************************
//  429  * @fn      HalKeyPoll
//  430  *
//  431  * @brief   Called by hal_driver to poll the keys
//  432  *
//  433  * @param   None
//  434  *
//  435  * @return  None
//  436  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  437 void HalKeyPoll (void)
HalKeyPoll:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function HalKeyPoll
//  438 {
        FUNCALL HalKeyPoll, halGetJoyKeyInput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  439   uint8 keys = 0;
        MOV     ?V0 + 0,#0x0
//  440 
//  441   if (!(HAL_KEY_SW_6_PORT & HAL_KEY_SW_6_BIT))    /* Key is active low */
        MOV     C,0x80.5
        JC      ??HalKeyPoll_0
//  442   {
//  443     keys |= HAL_KEY_SW_6;
        MOV     ?V0 + 0,#0x20
//  444   }
//  445   if (!(HAL_KEY_SW_7_PORT & HAL_KEY_SW_7_BIT))    /* Key is active low */
??HalKeyPoll_0:
        MOV     C,0x80.4
        JC      ??HalKeyPoll_1
//  446   {
//  447     keys |= HAL_KEY_SW_7;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.6
        MOV     ?V0 + 0,A
//  448   }
//  449 
//  450  // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
//  451   {
//  452     keys |= halGetJoyKeyInput();
??HalKeyPoll_1:
        ; Setup parameters for call to function halGetJoyKeyInput
        LCALL   ??halGetJoyKeyInput?relay
        MOV     A,R1
        ORL     ?V0 + 0,A
//  453   }
//  454 
//  455   /* If interrupts are not enabled, previous key status and current key status
//  456    * are compared to find out if a key has changed status.
//  457    */
//  458   if (!Hal_KeyIntEnable)
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_2
//  459   {
//  460     if (keys == halKeySavedKeys)
        MOV     DPTR,#halKeySavedKeys
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JZ      ??HalKeyPoll_3
//  461     {
//  462       /* Exit - since no keys have changed */
//  463       return;
//  464     }
//  465     /* Store the current keys for comparation next time */
//  466     halKeySavedKeys = keys;
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  467   }
//  468   else
//  469   {
//  470     /* Key interrupt handled here */
//  471   }
//  472 
//  473   
//  474    if (HAL_PUSH_BUTTON1())
??HalKeyPoll_2:
        MOV     C,0xa0.1
        JC      ??HalKeyPoll_4
//  475   {
//  476     keys |= HAL_KEY_SW_6;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.5
        MOV     ?V0 + 0,A
//  477   }
//  478   
//  479   if (HAL_PUSH_BUTTON2())
??HalKeyPoll_4:
        MOV     C,0x80.4
        JC      ??HalKeyPoll_5
//  480   {
//  481     keys |= HAL_KEY_SW_7;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.6
        MOV     ?V0 + 0,A
//  482   }
//  483   
//  484   if (HAL_PUSH_BUTTON3())
??HalKeyPoll_5:
        MOV     C,0x80.6
        JC      ??HalKeyPoll_6
//  485   {
//  486     keys |= HAL_KEY_SW_5;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.2
        MOV     ?V0 + 0,A
//  487   }
//  488   
//  489   if (HAL_PUSH_BUTTON4())
??HalKeyPoll_6:
        MOV     C,0x80.6
        JC      ??HalKeyPoll_7
//  490   {
//  491     keys |= HAL_KEY_SW_4;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.3
        MOV     ?V0 + 0,A
//  492   }
//  493   
//  494   
//  495   /* Invoke Callback if new keys were depressed */
//  496   if (keys && (pHalKeyProcessFunction))
??HalKeyPoll_7:
        MOV     A,?V0 + 0
        JZ      ??HalKeyPoll_3
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_8
        INC     DPTR
        MOVX    A,@DPTR
??HalKeyPoll_8:
        JZ      ??HalKeyPoll_3
//  497   {
//  498     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
        ; Setup parameters for indirect call
        MOV     R2,#0x0
        MOV     R1,?V0 + 0
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  499   }
??HalKeyPoll_3:
        SJMP    ??Subroutine5_0
        CFI EndBlock cfiBlock9
        REQUIRE _A_P0
        REQUIRE _A_P2
//  500 }
//  501 
//  502 /**************************************************************************************************
//  503  * @fn      halGetJoyKeyInput
//  504  *
//  505  * @brief   Map the ADC value to its corresponding key.
//  506  *
//  507  * @param   None
//  508  *
//  509  * @return  keys - current joy key status
//  510  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  511 uint8 halGetJoyKeyInput(void)
halGetJoyKeyInput:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function halGetJoyKeyInput
//  512 {
        FUNCALL halGetJoyKeyInput, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  513   /* The joystick control is encoded as an analog voltage.
//  514    * Read the JOY_LEVEL analog value and map it to joy movement.
//  515    */
//  516   uint8 adc;
//  517   uint8 ksave0 = 0;
        MOV     R6,#0x0
//  518   uint8 ksave1;
//  519 
//  520   /* Keep on reading the ADC until two consecutive key decisions are the same. */
//  521   do
//  522   {
//  523     ksave1 = ksave0;    /* save previouse key reading */
??halGetJoyKeyInput_0:
        MOV     A,R6
        MOV     R7,A
//  524 
//  525     adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x1
        MOV     R1,#0x6
        LCALL   ??HalAdcRead?relay
//  526 
//  527     if ((adc >= 28) && (adc <= 38))
        MOV     A,#-0x1c
        ADD     A,R2
        CLR     C
        SUBB    A,#0xb
        JNC     ??halGetJoyKeyInput_1
//  528     {
//  529        ksave0 |= HAL_KEY_LEFT;//HAL_KEY_UP;
        MOV     A,R6
        SETB    0xE0 /* A   */.3
        SJMP    ??halGetJoyKeyInput_2
//  530     }
//  531     else if ((adc < 28))
??halGetJoyKeyInput_1:
        MOV     A,R2
        CLR     C
        SUBB    A,#0x1c
        JNC     ??halGetJoyKeyInput_3
//  532     {
//  533       ksave0 |= HAL_KEY_RIGHT;
        MOV     A,R6
        SETB    0xE0 /* A   */.1
        SJMP    ??halGetJoyKeyInput_2
//  534     }
//  535     else if ((adc >= 60) && (adc <= 73))
??halGetJoyKeyInput_3:
        MOV     A,#-0x3c
        ADD     A,R2
        CLR     C
        SUBB    A,#0xe
        JNC     ??halGetJoyKeyInput_4
//  536     {
//  537       ksave0 |= HAL_KEY_DOWN;//HAL_KEY_LEFT;
        MOV     A,R6
        SETB    0xE0 /* A   */.4
        SJMP    ??halGetJoyKeyInput_2
//  538     }
//  539     else if ((adc >= 89) && (adc <= 100))
??halGetJoyKeyInput_4:
        MOV     A,#-0x59
        ADD     A,R2
        CLR     C
        SUBB    A,#0xc
        JNC     ??halGetJoyKeyInput_5
//  540     {
//  541       ksave0 |= HAL_KEY_UP;//HAL_KEY_CENTER;
        MOV     A,R6
        SETB    0xE0 /* A   */.0
??halGetJoyKeyInput_2:
        MOV     R6,A
//  542     }
//  543   } while (ksave0 != ksave1);
??halGetJoyKeyInput_5:
        MOV     A,R7
        XRL     A,R6
        JNZ     ??halGetJoyKeyInput_0
//  544 
//  545   return ksave0;
        MOV     A,R6
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  546 }
//  547 
//  548 
//  549 
//  550 
//  551 
//  552 /**************************************************************************************************
//  553  * @fn      halProcessKeyInterrupt
//  554  *
//  555  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  556  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  557  *
//  558  * @param
//  559  *
//  560  * @return
//  561  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 void halProcessKeyInterrupt (void)
halProcessKeyInterrupt:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function halProcessKeyInterrupt
//  563 {
        FUNCALL halProcessKeyInterrupt, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  564   bool valid=FALSE;
        MOV     R2,#0x0
//  565 
//  566   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.5
        JNC     ??halProcessKeyInterrupt_0
//  567   {
//  568     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
        MOV     0x89,#-0x21
//  569     valid = TRUE;
        INC     R2
//  570   }
//  571   if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)  /* Interrupt Flag has been set */
??halProcessKeyInterrupt_0:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.4
        JNC     ??halProcessKeyInterrupt_1
//  572   {
//  573     HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT); /* Clear Interrupt Flag */
        MOV     0x89,#-0x11
//  574     valid = TRUE;
        MOV     R2,#0x1
//  575   }
//  576   
//  577   if (HAL_KEY_SW_5_PXIFG & HAL_KEY_SW_5_BIT)  /* Interrupt Flag has been set */
??halProcessKeyInterrupt_1:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JNC     ??halProcessKeyInterrupt_2
//  578   {
//  579     HAL_KEY_SW_5_PXIFG = ~(HAL_KEY_SW_5_BIT); /* Clear Interrupt Flag */
        MOV     0x89,#-0x41
//  580     valid = TRUE;
        MOV     R2,#0x1
//  581   }
//  582   
//  583   if (HAL_KEY_SW_4_PXIFG & HAL_KEY_SW_4_BIT)  /* Interrupt Flag has been set */
??halProcessKeyInterrupt_2:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JNC     ??halProcessKeyInterrupt_3
//  584   {
//  585     HAL_KEY_SW_4_PXIFG = ~(HAL_KEY_SW_4_BIT); /* Clear Interrupt Flag */
        MOV     0x89,#-0x41
//  586     valid = TRUE;
        MOV     R2,#0x1
//  587   }
//  588 
//  589 
//  590   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
??halProcessKeyInterrupt_3:
        MOV     A,0x8b
        MOV     C,0xE0 /* A   */.0
        JNC     ??halProcessKeyInterrupt_4
//  591   {
//  592     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
        MOV     0x8b,#-0x2
//  593     valid = TRUE;
        SJMP    ??halProcessKeyInterrupt_5
//  594   }
//  595 
//  596   if (valid)
??halProcessKeyInterrupt_4:
        MOV     A,R2
        JZ      ??halProcessKeyInterrupt_6
//  597   {
//  598     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
??halProcessKeyInterrupt_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x19
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  599   }
//  600 }
??halProcessKeyInterrupt_6:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock11
        REQUIRE P0IFG
        REQUIRE P2IFG
//  601 
//  602 /**************************************************************************************************
//  603  * @fn      HalKeyEnterSleep
//  604  *
//  605  * @brief  - Get called to enter sleep mode
//  606  *
//  607  * @param
//  608  *
//  609  * @return
//  610  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  611 void HalKeyEnterSleep ( void )
HalKeyEnterSleep:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function HalKeyEnterSleep
//  612 {
        ; Saved register size: 0
        ; Auto size: 0
//  613 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  614 
//  615 /**************************************************************************************************
//  616  * @fn      HalKeyExitSleep
//  617  *
//  618  * @brief   - Get called when sleep is over
//  619  *
//  620  * @param
//  621  *
//  622  * @return  - return saved keys
//  623  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  624 uint8 HalKeyExitSleep ( void )
HalKeyExitSleep:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function HalKeyExitSleep
//  625 {
        FUNCALL HalKeyExitSleep, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  626   /* Wake up and read keys */
//  627   return ( HalKeyRead () );
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  628 }
//  629 
//  630 /***************************************************************************************************
//  631  *                                    INTERRUPT SERVICE ROUTINE
//  632  ***************************************************************************************************/
//  633 
//  634 /**************************************************************************************************
//  635  * @fn      halKeyPort0Isr
//  636  *
//  637  * @brief   Port0 ISR
//  638  *
//  639  * @param
//  640  *
//  641  * @return
//  642  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  643 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
halKeyPort0Isr:
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function halKeyPort0Isr
//  644 {
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  645   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.5
        JNC     ??CrossCallReturnLabel_2
//  646   {
//  647     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ?Subroutine4
//  648     HAL_KEY_SW_6_PXIFG = 0;
//  649   }
//  650   
//  651   if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)
??CrossCallReturnLabel_2:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.4
        JNC     ??CrossCallReturnLabel_3
//  652   {
//  653     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ?Subroutine4
//  654     HAL_KEY_SW_7_PXIFG = 0;
//  655   }
//  656   
//  657    if (HAL_KEY_SW_5_PXIFG & HAL_KEY_SW_5_BIT)
??CrossCallReturnLabel_3:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JNC     ??CrossCallReturnLabel_4
//  658   {
//  659     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ?Subroutine4
//  660     HAL_KEY_SW_5_PXIFG = 0;
//  661   }
//  662   
//  663    if (HAL_KEY_SW_4_PXIFG & HAL_KEY_SW_4_BIT)
??CrossCallReturnLabel_4:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JNC     ??CrossCallReturnLabel_5
//  664   {
//  665     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ?Subroutine4
//  666     HAL_KEY_SW_4_PXIFG = 0;
//  667   }
//  668 
//  669 
//  670   /*
//  671     Clear the CPU interrupt flag for Port_0
//  672     PxIFG has to be cleared before PxIF
//  673   */
//  674   
//  675   HAL_KEY_CPU_PORT_0_IF = 0;
??CrossCallReturnLabel_5:
        CLR     0xc0.5
        CFI EndBlock cfiBlock14
//  676   
//  677   CLEAR_SLEEP_MODE();
//  678 }
        REQUIRE ?Subroutine2
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        ; // Fall through to label ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI A Frame(CFA_SP, 3)
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock15

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond16 Using cfiCommon1
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI A Frame(CFA_SP, 3)
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon1
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond17) A Frame(CFA_SP, 3)
        CFI (cfiCond17) R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+-3
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond18 Using cfiCommon1
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond18) A Frame(CFA_SP, 3)
        CFI (cfiCond18) R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+-3
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond19 Using cfiCommon1
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond19) A Frame(CFA_SP, 3)
        CFI (cfiCond19) R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+-3
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ??halProcessKeyInterrupt?relay
        MOV     0x89,#0x0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  679 
//  680 
//  681 /**************************************************************************************************
//  682  * @fn      halKeyPort2Isr
//  683  *
//  684  * @brief   Port2 ISR
//  685  *
//  686  * @param
//  687  *
//  688  * @return
//  689  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  690 HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
halKeyPort2Isr:
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function halKeyPort2Isr
//  691 {
        FUNCALL halKeyPort2Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  692   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
        MOV     A,0x8b
        MOV     C,0xE0 /* A   */.0
        JNC     ??halKeyPort2Isr_0
//  693   {
//  694     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ??halProcessKeyInterrupt?relay
//  695   }
//  696 
//  697   /*
//  698     Clear the CPU interrupt flag for Port_2
//  699     PxIFG has to be cleared before PxIF
//  700     Notes: P2_1 and P2_2 are debug lines.
//  701   */
//  702   HAL_KEY_JOY_MOVE_PXIFG = 0;
??halKeyPort2Isr_0:
        MOV     0x8b,#0x0
//  703   HAL_KEY_CPU_PORT_2_IF = 0;
        CLR     0xe8.0
//  704 }
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock21
        REQUIRE P2IFG
        REQUIRE _A_IRCON2

        COMMON INTVEC:CODE:ROOT(0)
        ORG 51
`??halKeyPort2Isr??INTVEC 51`:
        LJMP       (halKeyPort2Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??halKeyPort0Isr??INTVEC 107`:
        LJMP       (halKeyPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyPoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halGetJoyKeyInput?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halGetJoyKeyInput

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessKeyInterrupt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessKeyInterrupt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyEnterSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyExitSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyExitSleep

        END
//  705 
//  706 #else
//  707 
//  708 
//  709 void HalKeyInit(void){}
//  710 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
//  711 uint8 HalKeyRead(void){ return 0;}
//  712 void HalKeyPoll(void){}
//  713 
//  714 #endif /* HAL_KEY */
//  715 
//  716 
//  717 
//  718 
//  719 
//  720 /**************************************************************************************************
//  721 **************************************************************************************************/
//  722 
//  723 
//  724 
// 
// 519 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   6 bytes in segment INTVEC
//  80 bytes in segment NEAR_CODE
//  11 bytes in segment SFR_AN
//   5 bytes in segment XDATA_Z
// 
// 647 bytes of CODE  memory (+  6 bytes shared)
//   0 bytes of DATA  memory (+ 11 bytes shared)
//   5 bytes of XDATA memory
//
//Errors: none
//Warnings: none
