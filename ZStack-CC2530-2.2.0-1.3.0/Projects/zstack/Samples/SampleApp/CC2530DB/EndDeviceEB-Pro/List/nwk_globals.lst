###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             24/Dec/2016  13:07:34 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\s #
#                          tack\nwk\nwk_globals.c                             #
#    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11  #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DBLINK_LEDS) -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbe #
#                          e\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë     #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\s #
#                          tack\nwk\nwk_globals.c" -D ZIGBEEPRO -D            #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D xSensor01 -D xSensor02 -D xSensor03 -D          #
#                          xSensor04 -D xSensor05 -D xSensor06 -D xSensor07   #
#                          -D xSensor08 -D xSensor09 -D Sensor10 -D           #
#                          xController01 -D xController02 -D xController03    #
#                          -D xController4 -D xController05 -D xController06  #
#                          -D xController07 -D xController08 -D               #
#                          xController09 -D Controller10 -lC                  #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø    #
#                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë             #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o                 #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \" -e --require_prototypes --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü #
#                          \ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷        #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\" -I       #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  #
#                           DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\ #
#                          ¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë       #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\NWK\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\SAPI\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ #
#                          ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷         #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\STACK\ZDO\" -I                     #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\Z #
#                          Igbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷          #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\ZMAC\" -I                          #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ #
#                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷       #
#                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MAC\HIGH_LEVEL\" -I                #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "D:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\" -I "D:\Program Files      #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\CLIB\" -Ohz                           #
#    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\nwk_globals.lst                                  #
#    Object file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11      #
#                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                   #
#                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \nwk_globals.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2009-03-24 09:41:39 -0700 (Tue, 24 Mar 2009) $
      4            Revision:       $Revision: 19538 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AddrMgr.h"
     46          #include "AssocList.h"
     47          #include "BindingTable.h"
     48          #include "nwk_util.h"
     49          #include "nwk_globals.h"
     50          #include "APS.h"
     51          #include "ssp.h"
     52          #include "rtg.h"
     53          #include "ZDConfig.h"
     54          #include "ZGlobals.h"
     55          #include "string.h"
     56          #if defined ( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          /* HAL */
     61          #include "hal_lcd.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximums for the data buffer queue
     72          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     73          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     74          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     75          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     76          
     77          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     78          // A known shortcoming is that when a message is enqueued as "hold" for a
     79          // sleeping device, the timer tick may have counted down to 1, so that msg
     80          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     81          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     82          // So the hold time will vary within this interval:
     83          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     84          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     85          #define NWK_INDIRECT_CNT_RTG_TMR    1
     86          // To hold msg for sleeping end devices for 30 secs:
     87          // #define CNT_RTG_TIMER            1
     88          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     89          // To hold msg for sleeping end devices for 30 mins:
     90          // #define CNT_RTG_TIMER            60
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 days:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     95          // Maximum msgs to hold per associated device.
     96          #define NWK_INDIRECT_MSG_MAX_PER    3
     97          // Maximum total msgs to hold for all associated devices.
     98          #define NWK_INDIRECT_MSG_MAX_ALL    \
     99                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    100          
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST byte gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST byte gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST byte gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST byte gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST byte gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST byte gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST byte gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            byte CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            byte CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            byte CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            byte CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          byte gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment CODE_C, align 1
    150          CONST byte gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    151          CONST byte gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    152          CONST byte gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    153          

   \                                 In  segment CODE_C, align 1
    154          CONST byte gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   04           DB 4
    155          
    156           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 92
   \   00005C                REQUIRE __INIT_XDATA_Z
    158          
    159          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    161          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    163          #endif
    164          
    165          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    167          
    168          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    170          
    171          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST byte gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    176          
    177          // For tree addressing, this switch allows the allocation of a 
    178          // router address to an end device when end device address are 
    179          // all used up.  If this option is enabled, address space
    180          // could be limited.

   \                                 In  segment CODE_C, align 1
    181          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    182          
    183          /*********************************************************************
    184           * APS GLOBAL VARIABLES
    185           */
    186          
    187          // The Maximum number of binding records
    188          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    189          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    190          
    191          #if defined ( REFLECTOR )
    192            // The Maximum number of cluster IDs in a binding record
    193            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    194            CONST byte gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    195          

   \                                 In  segment CODE_C, align 1
    196            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    197          
    198            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    200          #endif
    201          
    202          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    203          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    204          
    205          // APS End Device Broadcast Table
    206          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 25
   \   000019                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    208            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    209          #endif
    210          
    211          /*********************************************************************
    212           * SECURITY GLOBAL VARIABLES
    213           */
    214          
    215          // This is the default pre-configured key,
    216          // change this to make a unique key
    217          // SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    218          CONST byte defaultKey[SEC_KEY_LEN] =
   \                     defaultKey:
   \   000000   00010203     DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
   \            04050607
   \            08090A0B
   \            0C0D0E0F
    219          {
    220          #if defined ( APP_TP ) || defined ( APP_TP2 )
    221            // Key for ZigBee Conformance Testing
    222            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    223            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    224          #else
    225            // Key for In-House Testing
    226            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    227            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    228          #endif
    229          };
    230          
    231          // This is the default pre-configured Trust Center Link key,
    232          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    233          CONST byte defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56777777     DB 86, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119
   \            77777777
   \            77777777
   \            7777    
   \   00000E   7777         DB 119, 119
    234          {
    235            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    236            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    237          };
    238          
    239          /*********************************************************************
    240           * STATUS STRINGS
    241           */
    242          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    243            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    244            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    245            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    246            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    247            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    248            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    249            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    250            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    251            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    252            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    253            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    254            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    255            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    256            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    257            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    258            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    259          #endif
    260          
    261          /*********************************************************************
    262           * @fn       nwk_globals_init()
    263           *
    264           * @brief
    265           *
    266           *   Initialize nwk layer globals.  These are the system defaults and
    267           *   should be changed by the user here.  The default definitions are
    268           *   defined in nwk.h or NLMEDE.h.
    269           *
    270           * @param   none
    271           *
    272           * @return  none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          void nwk_globals_init( void )
   \                     nwk_globals_init:
    275          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    277            
    278          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    279            if ( ZSTACK_ROUTER_BUILD )
    280            {
    281              // Initialize the Cskip Table
    282              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    283              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    284            }
    285          #endif
    286            
    287            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    288            // to 0 (compiler flag).
    289            if ( NWK_LINK_STATUS_PERIOD )
    290            {
    291              NLME_InitLinkStatus();
   \   00000B                ; Setup parameters for call to function NLME_InitLinkStatus
   \   00000B   12....       LCALL   ??NLME_InitLinkStatus?relay
    292            }
    293            
    294          #if defined ( ZIGBEE_FREQ_AGILITY )
    295            NwkFreqAgilityInit();
   \   00000E                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000E   12....       LCALL   ??NwkFreqAgilityInit?relay
    296          #endif
    297          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    298          
    299          /*********************************************************************
    300           * @fn       NIB_init()
    301           *
    302           * @brief
    303           *
    304           *   Initialize attribute values in NIB
    305           *
    306           * @param   none
    307           *
    308           * @return  none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void NIB_init()
   \                     NIB_init:
    311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    312            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    313          
    314            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   7402         MOV     A,#0x2
   \   00000E   90....       MOV     DPTR,#(_NIB + 17)
   \   000011   F0           MOVX    @DPTR,A
    315            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   7414         MOV     A,#0x14
   \   000014   90....       MOV     DPTR,#(_NIB + 4)
   \   000017   F0           MOVX    @DPTR,A
    316          
    317          #if ( NWK_MODE == NWK_MODE_MESH )
    318            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   740F         MOV     A,#0xf
   \   00001A   90....       MOV     DPTR,#(_NIB + 40)
   \   00001D   F0           MOVX    @DPTR,A
    319            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   90....       MOV     DPTR,#(_NIB + 41)
   \   000021   F0           MOVX    @DPTR,A
    320          #endif
    321          
    322            // BROADCAST SETTINGS:
    323            // *******************
    324            //   Broadcast Delivery Time
    325            //     - set to multiples of 100ms 
    326            //     - should be 500ms more than the retry time
    327            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    328            //   Passive Ack Timeout
    329            //     - set to multiples of 100ms 
    330            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000022   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#(_NIB + 7)
   \   000029   F0           MOVX    @DPTR,A
    331            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   00002A   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#(_NIB + 1)
   \   000031   F0           MOVX    @DPTR,A
    332            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000032   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#(_NIB + 2)
   \   000039   F0           MOVX    @DPTR,A
    333          
    334            _NIB.ReportConstantCost = 0;
   \   00003A   E4           CLR     A
   \   00003B   90....       MOV     DPTR,#(_NIB + 8)
   \   00003E   F0           MOVX    @DPTR,A
    335            _NIB.RouteDiscRetries = 0;
   \   00003F   90....       MOV     DPTR,#(_NIB + 9)
   \   000042   F0           MOVX    @DPTR,A
    336            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000043   90....       MOV     DPTR,#(_NIB + 11)
   \   000046   F0           MOVX    @DPTR,A
    337             
    338            if ( ZG_SECURE_ENABLED )
    339            {
    340              _NIB.SecurityLevel = SECURITY_LEVEL;
    341            }
    342            else
    343            {
    344              _NIB.SecurityLevel = 0;
   \   000047   90....       MOV     DPTR,#(_NIB + 12)
   \   00004A   F0           MOVX    @DPTR,A
    345            }
    346             
    347          #if defined ( ZIGBEEPRO )
    348            _NIB.SymLink = FALSE;
   \   00004B   90....       MOV     DPTR,#(_NIB + 13)
   \   00004E   F0           MOVX    @DPTR,A
    349          #else
    350            _NIB.SymLink = TRUE;
    351          #endif  
    352            
    353            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00004F   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#(_NIB + 14)
   \   000056   F0           MOVX    @DPTR,A
    354          
    355            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000057   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   90....       MOV     DPTR,#(_NIB + 15)
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    356          
    357            _NIB.RouteDiscoveryTime = 5;
   \   000062   7405         MOV     A,#0x5
   \   000064   90....       MOV     DPTR,#(_NIB + 18)
   \   000067   F0           MOVX    @DPTR,A
    358            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000068   90....       MOV     DPTR,#zgRouteExpiryTime
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   90....       MOV     DPTR,#(_NIB + 19)
   \   00006F   F0           MOVX    @DPTR,A
    359          
    360            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000070   90....       MOV     DPTR,#(_NIB + 20)
   \   000073   74FE         MOV     A,#-0x2
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74FF         MOV     A,#-0x1
   \   000079   F0           MOVX    @DPTR,A
    361            _NIB.nwkLogicalChannel = 0;
   \   00007A   E4           CLR     A
   \   00007B   90....       MOV     DPTR,#(_NIB + 22)
   \   00007E   F0           MOVX    @DPTR,A
    362            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00007F   90....       MOV     DPTR,#(_NIB + 23)
   \   000082   74FE         MOV     A,#-0x2
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   74FF         MOV     A,#-0x1
   \   000088   F0           MOVX    @DPTR,A
    363            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   000089                ; Setup parameters for call to function osal_memset
   \   000089   7C08         MOV     R4,#0x8
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   7A..         MOV     R2,#((_NIB + 25) & 0xff)
   \   000091   7B..         MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
   \   000093   12....       LCALL   ??osal_memset?relay
    364            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000096   90....       MOV     DPTR,#(_NIB + 33)
   \   000099   74FE         MOV     A,#-0x2
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   74FF         MOV     A,#-0x1
   \   00009F   F0           MOVX    @DPTR,A
    365          
    366            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000A0                ; Setup parameters for call to function sAddrExtCpy
   \   0000A0   7C..         MOV     R4,#(zgExtendedPANID & 0xff)
   \   0000A2   7D..         MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
   \   0000A4   7A..         MOV     R2,#((_NIB + 53) & 0xff)
   \   0000A6   7B..         MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
   \   0000A8   12....       LCALL   ??sAddrExtCpy?relay
    367             
    368            _NIB.nwkKeyLoaded = FALSE;
   \   0000AB   E4           CLR     A
   \   0000AC   90....       MOV     DPTR,#(_NIB + 61)
   \   0000AF   F0           MOVX    @DPTR,A
    369             
    370          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    371            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   90....       MOV     DPTR,#(_NIB + 96)
   \   0000B5   F0           MOVX    @DPTR,A
    372            _NIB.nwkUniqueAddr = FALSE;
   \   0000B6   E4           CLR     A
   \   0000B7   90....       MOV     DPTR,#(_NIB + 97)
   \   0000BA   F0           MOVX    @DPTR,A
    373          #else
    374            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    375            _NIB.nwkUniqueAddr = TRUE;
    376          #endif
    377          
    378            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
   \   0000BB   740F         MOV     A,#0xf
   \   0000BD   90....       MOV     DPTR,#(_NIB + 98)
   \   0000C0   F0           MOVX    @DPTR,A
    379            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   90....       MOV     DPTR,#(_NIB + 99)
   \   0000C6   F0           MOVX    @DPTR,A
    380            //MTO routing
    381            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000C7   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   90....       MOV     DPTR,#(_NIB + 102)
   \   0000CE   F0           MOVX    @DPTR,A
    382            _NIB.nwkIsConcentrator = 0;
   \   0000CF   E4           CLR     A
   \   0000D0   90....       MOV     DPTR,#(_NIB + 101)
   \   0000D3   F0           MOVX    @DPTR,A
    383            _NIB.nwkConcentratorRadius = 0x0a;
   \   0000D4   740A         MOV     A,#0xa
   \   0000D6   90....       MOV     DPTR,#(_NIB + 103)
   \   0000D9   F0           MOVX    @DPTR,A
    384            _NIB.nwkMaxSourceRoute = 0x0c;
   \   0000DA   740C         MOV     A,#0xc
   \   0000DC   90....       MOV     DPTR,#(_NIB + 104)
   \   0000DF   F0           MOVX    @DPTR,A
    385          
    386          #if defined ( ZIGBEE_MULTICAST )
    387            _NIB.nwkUseMultiCast = TRUE;
   \   0000E0   7401         MOV     A,#0x1
   \   0000E2   90....       MOV     DPTR,#(_NIB + 100)
   \   0000E5   F0           MOVX    @DPTR,A
    388          #else
    389            _NIB.nwkUseMultiCast = FALSE;
    390          #endif  
    391            _NIB.nwkManagerAddr = 0x0000;
   \   0000E6   90....       MOV     DPTR,#(_NIB + 105)
   \   0000E9   E4           CLR     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   F0           MOVX    @DPTR,A
    392            _NIB.nwkUpdateId = 0;
   \   0000ED   90....       MOV     DPTR,#(_NIB + 109)
   \   0000F0   F0           MOVX    @DPTR,A
    393            _NIB.nwkTotalTransmissions = 0;
   \   0000F1   90....       MOV     DPTR,#(_NIB + 107)
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
    394          
    395            if ( ZSTACK_ROUTER_BUILD )
    396            {
    397          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    398              NLME_InitStochasticAddressing();
    399          #else
    400              NLME_InitTreeAddressing();
    401          #endif
    402            }
    403          }
   \   0000F7   02....       LJMP    ?Subroutine0 & 0xFFFF
    404          
    405          /*********************************************************************
    406           * @fn       nwk_Status()
    407           *
    408           * @brief
    409           *
    410           *   Status report.
    411           *
    412           * @param   statusCode
    413           * @param   statusValue
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    418          { uint16 temp1;
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
    419            uint8 ch,j=6;
    420            char IEEBUF[12];
    421          #if defined ( LCD_SUPPORTED )
    422            temp1 = NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000015   8A..         MOV     ?V0 + 4,R2
   \   000017   8B..         MOV     ?V0 + 5,R3
   \   000019   AE..         MOV     R6,?V0 + 4
   \   00001B   AF..         MOV     R7,?V0 + 5
    423            memcpy(&IEEBUF[0],"IEEE: ",6);
   \   00001D                ; Setup parameters for call to function memcpy
   \   00001D   75..06       MOV     ?V0 + 4,#0x6
   \   000020   75..00       MOV     ?V0 + 5,#0x0
   \   000023   78..         MOV     R0,#?V0 + 4
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C..         MOV     R4,#(`?<Constant "IEEE: ">` & 0xff)
   \   00002A   7D..         MOV     R5,#((`?<Constant "IEEE: ">` >> 8) & 0xff)
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??memcpy?relay
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    424          
    425            ch = (temp1 >> 12) & 0x0F;
   \   00003D   8E..         MOV     ?V0 + 4,R6
   \   00003F   8F..         MOV     ?V0 + 5,R7
   \   000041   740C         MOV     A,#0xc
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?US_SHR
   \   000048   AA..         MOV     R2,?V0 + 4
    426            IEEBUF[j++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00004A   EA           MOV     A,R2
   \   00004B   C3           CLR     C
   \   00004C   940A         SUBB    A,#0xa
   \   00004E   5004         JNC     ??nwk_Status_0
   \   000050   7830         MOV     R0,#0x30
   \   000052   8002         SJMP    ??nwk_Status_1
   \                     ??nwk_Status_0:
   \   000054   7837         MOV     R0,#0x37
   \                     ??nwk_Status_1:
   \   000056   E8           MOV     A,R0
   \   000057   2A           ADD     A,R2
   \   000058   C0E0         PUSH    A
   \   00005A   7406         MOV     A,#0x6
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
    427            ch = (temp1 >> 8) & 0x0F;
   \   000062   EF           MOV     A,R7
   \   000063   12....       LCALL   ?Subroutine1 & 0xFFFF
    428            IEEBUF[j++] = ch + (( ch < 10 ) ? '0' : '7'); 
   \                     ??CrossCallReturnLabel_0:
   \   000066   5004         JNC     ??nwk_Status_2
   \   000068   7830         MOV     R0,#0x30
   \   00006A   8002         SJMP    ??nwk_Status_3
   \                     ??nwk_Status_2:
   \   00006C   7837         MOV     R0,#0x37
   \                     ??nwk_Status_3:
   \   00006E   E8           MOV     A,R0
   \   00006F   2A           ADD     A,R2
   \   000070   C0E0         PUSH    A
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
    429            ch = (temp1 >> 4) & 0x0F;
   \   00007A   EE           MOV     A,R6
   \   00007B   C4           SWAP    A
   \   00007C   12....       LCALL   ?Subroutine1 & 0xFFFF
    430            IEEBUF[j++] = ch + (( ch < 10 ) ? '0' : '7'); 
   \                     ??CrossCallReturnLabel_1:
   \   00007F   5004         JNC     ??nwk_Status_4
   \   000081   7830         MOV     R0,#0x30
   \   000083   8002         SJMP    ??nwk_Status_5
   \                     ??nwk_Status_4:
   \   000085   7837         MOV     R0,#0x37
   \                     ??nwk_Status_5:
   \   000087   E8           MOV     A,R0
   \   000088   2A           ADD     A,R2
   \   000089   C0E0         PUSH    A
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
    431            ch =  temp1 & 0x0F;
   \   000093   EE           MOV     A,R6
   \   000094   12....       LCALL   ?Subroutine1 & 0xFFFF
    432            IEEBUF[j++] = ch + (( ch < 10 ) ? '0' : '7');
   \                     ??CrossCallReturnLabel_2:
   \   000097   5004         JNC     ??nwk_Status_6
   \   000099   7830         MOV     R0,#0x30
   \   00009B   8002         SJMP    ??nwk_Status_7
   \                     ??nwk_Status_6:
   \   00009D   7837         MOV     R0,#0x37
   \                     ??nwk_Status_7:
   \   00009F   E8           MOV     A,R0
   \   0000A0   2A           ADD     A,R2
   \   0000A1   C0E0         PUSH    A
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
    433            IEEBUF[j] = '\0';
   \   0000AB   740A         MOV     A,#0xa
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
    434           
    435            switch ( statusCode )
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   0000B7   0100         DW        1
   \   0000B9   0500         DW        5
   \   0000BB   0700         DW        7
   \   0000BD   ....         DW        ??nwk_Status_8
   \   0000BF   0600         DW        6
   \   0000C1   0200         DW        2
   \   0000C3   ....         DW        ??nwk_Status_9
   \   0000C5   0300         DW        3
   \   0000C7   ....         DW        ??nwk_Status_10
   \   0000C9   0400         DW        4
   \   0000CB   ....         DW        ??nwk_Status_11
   \   0000CD   0110         DW        4097
   \   0000CF   ....         DW        ??nwk_Status_8
   \   0000D1   0310         DW        4099
   \   0000D3   ....         DW        ??nwk_Status_12
   \   0000D5   0410         DW        4100
   \   0000D7   ....         DW        ??nwk_Status_13
   \   0000D9   ....         DW        ??nwk_Status_8
    436            {
    437              case NWK_STATUS_COORD_ADDR:
    438                if ( ZSTACK_ROUTER_BUILD )
    439                {
    440                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    441                  //HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    442                  HalLcdWriteString(&IEEBUF[0],  HAL_LCD_LINE_2);
    443                  BuzzerControl( BUZZER_BLIP );
    444                }
    445                break;
    446          
    447              case NWK_STATUS_ROUTER_ADDR:
    448                if ( ZSTACK_ROUTER_BUILD )
    449                {
    450                  HalLcdWriteString( (char*)RouterStr, HAL_LCD_LINE_1 );
    451                  HalLcdWriteString( &IEEBUF[0],  HAL_LCD_LINE_2);
    452                }
    453                break;
    454          
    455              case NWK_STATUS_ORPHAN_RSP:
    456                if ( ZSTACK_ROUTER_BUILD )
    457                {
    458                  if ( statusValue == ZSuccess )
    459                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    460                  else
    461                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    462                }
    463                break;
    464          
    465              case NWK_ERROR_ASSOC_RSP:
    466                if ( ZSTACK_ROUTER_BUILD )
    467                {
    468                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    469                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    470                }
    471                break;
    472                
    473              case NWK_STATUS_ED_ADDR:
    474                if ( ZSTACK_END_DEVICE_BUILD )
    475                { 
    476                  HalLcdWriteString( (char*)EndDeviceStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_10:
   \   0000DB                ; Setup parameters for call to function HalLcdWriteString
   \   0000DB   7901         MOV     R1,#0x1
   \   0000DD   7A..         MOV     R2,#(EndDeviceStr & 0xff)
   \   0000DF   7B..         MOV     R3,#((EndDeviceStr >> 8) & 0xff)
   \   0000E1   12....       LCALL   ??HalLcdWriteString?relay
    477                  HalLcdWriteString( &IEEBUF[0],  HAL_LCD_LINE_2);
   \   0000E4                ; Setup parameters for call to function HalLcdWriteString
   \   0000E4   7903         MOV     R1,#0x3
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   \   0000F0   12....       LCALL   ??HalLcdWriteString?relay
   \   0000F3   8051         SJMP    ??nwk_Status_8
    478                }
    479                break;
    480          
    481              case NWK_STATUS_PARENT_ADDR:
    482                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_11:
   \   0000F5                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000F5   75..03       MOV     ?V0 + 0,#0x3
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   7910         MOV     R1,#0x10
   \   0000FF   AC..         MOV     R4,?V0 + 2
   \   000101   AD..         MOV     R5,?V0 + 3
   \   000103   7A..         MOV     R2,#(ParentStr & 0xff)
   \   000105   7B..         MOV     R3,#((ParentStr >> 8) & 0xff)
   \   000107   12....       LCALL   ??HalLcdWriteStringValue?relay
   \                     ??nwk_Status_14:
   \   00010A   7401         MOV     A,#0x1
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   8035         SJMP    ??nwk_Status_8
    483                break;
    484          
    485              case NWK_STATUS_ASSOC_CNF:
    486                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_9:
   \   000111                ; Setup parameters for call to function HalLcdWriteScreen
   \   000111   7C..         MOV     R4,#(SuccessStr & 0xff)
   \   000113   7D..         MOV     R5,#((SuccessStr >> 8) & 0xff)
   \   000115   7A..         MOV     R2,#(AssocCnfStr & 0xff)
   \   000117   7B..         MOV     R3,#((AssocCnfStr >> 8) & 0xff)
   \   000119   8028         SJMP    ??nwk_Status_15
    487                break;
    488          
    489              case NWK_ERROR_ASSOC_CNF_DENIED:
    490                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_12:
   \   00011B                ; Setup parameters for call to function HalLcdWriteString
   \   00011B   7901         MOV     R1,#0x1
   \   00011D   7A..         MOV     R2,#(AssocCnfFailStr & 0xff)
   \   00011F   7B..         MOV     R3,#((AssocCnfFailStr >> 8) & 0xff)
   \   000121   12....       LCALL   ??HalLcdWriteString?relay
    491                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   000124                ; Setup parameters for call to function HalLcdWriteValue
   \   000124   75..03       MOV     ?V0 + 0,#0x3
   \   000127   78..         MOV     R0,#?V0 + 0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012C   7910         MOV     R1,#0x10
   \   00012E   AA..         MOV     R2,?V0 + 2
   \   000130   AB..         MOV     R3,?V0 + 3
   \   000132   7C00         MOV     R4,#0x0
   \   000134   7D00         MOV     R5,#0x0
   \   000136   12....       LCALL   ??HalLcdWriteValue?relay
   \   000139   80CF         SJMP    ??nwk_Status_14
    492                break;
    493          
    494              case NWK_ERROR_ENERGY_SCAN_FAILED:
    495                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_13:
   \   00013B                ; Setup parameters for call to function HalLcdWriteScreen
   \   00013B   7C..         MOV     R4,#(ScanFailedStr & 0xff)
   \   00013D   7D..         MOV     R5,#((ScanFailedStr >> 8) & 0xff)
   \   00013F   7A..         MOV     R2,#(EnergyLevelStr & 0xff)
   \   000141   7B..         MOV     R3,#((EnergyLevelStr >> 8) & 0xff)
   \                     ??nwk_Status_15:
   \   000143   12....       LCALL   ??HalLcdWriteScreen?relay
    496                break;
    497            }
    498          #endif
    499          }
   \                     ??nwk_Status_8:
   \   000146   740C         MOV     A,#0xc
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014B   7F06         MOV     R7,#0x6
   \   00014D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   540F         ANL     A,#0xf
   \   000002   FA           MOV     R2,A
   \   000003   C3           CLR     C
   \   000004   940A         SUBB    A,#0xa
   \   000006   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   05           DB 5

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  
    500          
    501          /*********************************************************************
    502          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     NIB_init                        2      0      0
       -> osal_rand                  4      0      0
       -> osal_memset                4      0      0
       -> sAddrExtCpy                4      0      0
     nwk_Status                      1      0     28
       -> NLME_GetShortAddr          0      0     52
       -> memcpy                     0      0     56
       -> HalLcdWriteString          0      0     52
       -> HalLcdWriteString          0      0     52
       -> HalLcdWriteStringValue     0      0     54
       -> HalLcdWriteScreen          0      0     52
       -> HalLcdWriteString          0      0     52
       -> HalLcdWriteValue           0      0     54
       -> HalLcdWriteScreen          0      0     52
     nwk_globals_init                2      0      0
       -> AddrMgrInit                4      0      0
       -> NLME_InitLinkStatus        4      0      0
       -> NwkFreqAgilityInit         4      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     gNWK_MAX_DEVICE_LIST                              2
     gNWK_MAX_SLEEPING_END_DEVICES                     1
     gNWK_MAX_DATABUFS_WAITING                         1
     gNWK_MAX_DATABUFS_SCHEDULED                       1
     gNWK_MAX_DATABUFS_CONFIRMED                       1
     gNWK_MAX_DATABUFS_TOTAL                           1
     gNWK_INDIRECT_CNT_RTG_TMR                         1
     gNWK_INDIRECT_MSG_MAX_PER                         1
     gNWK_INDIRECT_MSG_MAX_ALL                         1
     Cskip                                             2
     CskipRtrs                                         1
     CskipChldrn                                       1
     gMIN_TREE_LINK_COST                               1
     AssociatedDevList                               378
     gMAX_RTG_ENTRIES                                  1
     gMAX_RTG_SRC_ENTRIES                              1
     gMAX_RREQ_ENTRIES                                 1
     gMAX_NEIGHBOR_ENTRIES                             1
     neighborTable                                    92
     rtgTable                                        280
     rtgSrcTable                                      72
     rtDiscTable                                      64
     bcastTable                                       72
     bcastHoldHandle                                   9
     bcastHoldAckMask                                 36
     gMAX_BCAST                                        1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                                       1
     gNWK_MAX_BINDING_ENTRIES                          2
     gMAX_BINDING_CLUSTER_IDS                          1
     gBIND_REC_SIZE                                    2
     BindingTable                                     56
     gAPS_MAX_GROUPS                                   1
     apsEndDeviceBroadcastTable                       25
     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
                                                       1
     defaultKey                                       16
     defaultTCLinkKey                                 16
     PingStr                                          15
     AssocCnfStr                                      10
     SuccessStr                                        8
     EndDeviceStr                                     11
     ParentStr                                         8
     ZigbeeCoordStr                                   13
     NetworkIDStr                                     12
     RouterStr                                         8
     OrphanRspStr                                     16
     SentStr                                           5
     FailedStr                                         7
     AssocRspFailStr                                  15
     AssocIndStr                                      10
     AssocCnfFailStr                                  15
     EnergyLevelStr                                   13
     ScanFailedStr                                    12
     nwk_globals_init                                 17
     ?Subroutine0                                      7
     NIB_init                                        250
     nwk_Status                                      336
     ?Subroutine1                                      7
     ?<Initializer for gMIN_TREE_LINK_COST>            1
     ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST    1
     ??nwk_globals_init?relay                          6
     ??NIB_init?relay                                  6
     ??nwk_Status?relay                                6
     ?<Constant "IEEE: ">                              7

 
   617 bytes in segment BANKED_CODE
    18 bytes in segment BANK_RELAYS
    54 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   185 bytes in segment XDATA_ROM_C
 1 088 bytes in segment XDATA_Z
 
   691 bytes of CODE  memory
   185 bytes of CONST memory
 1 090 bytes of XDATA memory

Errors: none
Warnings: none
