///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            24/Dec/2016  13:07:31 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\ /
//                          stack\zdo\ZDSecMgr.c                              /
//    Command line       =  -f "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø        /
//                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wEndev.cfg" (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Co /
//                          mponents\stack\zdo\ZDSecMgr.c" -D ZIGBEEPRO -D    /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xSensor01 -D xSensor02 -D  /
//                          xSensor03 -D xSensor04 -D xSensor05 -D xSensor06  /
//                          -D xSensor07 -D xSensor08 -D xSensor09 -D         /
//                          Sensor10 -D xController01 -D xController02 -D     /
//                          xController03 -D xController4 -D xController05    /
//                          -D xController06 -D xController07 -D              /
//                          xController08 -D xController09 -D Controller10    /
//                          -lC "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø       /
//                          DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë            /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" -lA "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø /
//                            DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë          /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" --diag_suppress Pe001,Pa010 -o              /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\O /
//                          bj\" -e --require_prototypes --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\" -I     /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I    /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI /
//                          2530DB\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª /
//                          ¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë        /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MT\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgb /
//                          ee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë   /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\TARGET\CC2530EB\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\MCU\CCSOC\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\INCLUDE\" -I                        /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\AF\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\NWK\" -I                  /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SEC\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SAPI\" -I                          /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SYS\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\ZDO\" -I                           /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\ZMAC\F8W\" -I "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈ /
//                          ü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷      /
//                          ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\ZMAC\" -I                       /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SADDR\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SDATA\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\INCLUDE\" -I                         /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\HIGH_LEVEL\" -I                      /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\" -I                 /
//                          "J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11    /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I     /
//                          "D:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\" -I "D:\Program Files     /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.4\8051\INC\CLIB\" -Ohz                          /
//    List file          =  J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11     /
//                          Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë                  /
//                          Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\ZDSecMgr.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??APSME_KeyFwdToChild?relay
        FUNCTION ??APSME_KeyFwdToChild?relay,0203H
        PUBLIC ??APSME_LinkKeyDataGet?relay
        FUNCTION ??APSME_LinkKeyDataGet?relay,0203H
        PUBLIC ??APSME_LinkKeySet?relay
        FUNCTION ??APSME_LinkKeySet?relay,0203H
        PUBLIC ??APSME_MasterKeyGet?relay
        FUNCTION ??APSME_MasterKeyGet?relay,0203H
        PUBLIC ??APSME_SKA_TimerExpired?relay
        FUNCTION ??APSME_SKA_TimerExpired?relay,0203H
        PUBLIC ??ZDSecMgrAPSRemove?relay
        FUNCTION ??ZDSecMgrAPSRemove?relay,0203H
        PUBLIC ??ZDSecMgrAddLinkKey?relay
        FUNCTION ??ZDSecMgrAddLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrAddrMgrUpdate?relay
        FUNCTION ??ZDSecMgrAddrMgrUpdate?relay,0203H
        PUBLIC ??ZDSecMgrAddrStore?relay
        FUNCTION ??ZDSecMgrAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyGet?relay
        FUNCTION ??ZDSecMgrAppKeyGet?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyReq?relay
        FUNCTION ??ZDSecMgrAppKeyReq?relay,0203H
        PUBLIC ??ZDSecMgrAssocDeviceAuth?relay
        FUNCTION ??ZDSecMgrAssocDeviceAuth?relay,0203H
        PUBLIC ??ZDSecMgrAuthInitiate?relay
        FUNCTION ??ZDSecMgrAuthInitiate?relay,0203H
        PUBLIC ??ZDSecMgrAuthNwkKey?relay
        FUNCTION ??ZDSecMgrAuthNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateCfm?relay
        FUNCTION ??ZDSecMgrAuthenticateCfm?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateInd?relay
        FUNCTION ??ZDSecMgrAuthenticateInd?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationCheck?relay
        FUNCTION ??ZDSecMgrAuthenticationCheck?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationSet?relay
        FUNCTION ??ZDSecMgrAuthenticationSet?relay,0203H
        PUBLIC ??ZDSecMgrConfig?relay
        FUNCTION ??ZDSecMgrConfig?relay,0203H
        PUBLIC ??ZDSecMgrCtrlAdd?relay
        FUNCTION ??ZDSecMgrCtrlAdd?relay,0203H
        PUBLIC ??ZDSecMgrCtrlInit?relay
        FUNCTION ??ZDSecMgrCtrlInit?relay,0203H
        PUBLIC ??ZDSecMgrCtrlLookup?relay
        FUNCTION ??ZDSecMgrCtrlLookup?relay,0203H
        PUBLIC ??ZDSecMgrCtrlRelease?relay
        FUNCTION ??ZDSecMgrCtrlRelease?relay,0203H
        PUBLIC ??ZDSecMgrCtrlReset?relay
        FUNCTION ??ZDSecMgrCtrlReset?relay,0203H
        PUBLIC ??ZDSecMgrCtrlSet?relay
        FUNCTION ??ZDSecMgrCtrlSet?relay,0203H
        PUBLIC ??ZDSecMgrCtrlTerm?relay
        FUNCTION ??ZDSecMgrCtrlTerm?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlHandler?relay
        FUNCTION ??ZDSecMgrDeviceCtrlHandler?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlSetup?relay
        FUNCTION ??ZDSecMgrDeviceCtrlSetup?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlUpdate?relay
        FUNCTION ??ZDSecMgrDeviceCtrlUpdate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryAdd?relay
        FUNCTION ??ZDSecMgrDeviceEntryAdd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryRemove?relay
        FUNCTION ??ZDSecMgrDeviceEntryRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoin?relay
        FUNCTION ??ZDSecMgrDeviceJoin?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinDirect?relay
        FUNCTION ??ZDSecMgrDeviceJoinDirect?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinFwd?relay
        FUNCTION ??ZDSecMgrDeviceJoinFwd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceNew?relay
        FUNCTION ??ZDSecMgrDeviceNew?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemove?relay
        FUNCTION ??ZDSecMgrDeviceRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidate?relay
        FUNCTION ??ZDSecMgrDeviceValidate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateCM?relay
        FUNCTION ??ZDSecMgrDeviceValidateCM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateRM?relay
        FUNCTION ??ZDSecMgrDeviceValidateRM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateSKKE?relay
        FUNCTION ??ZDSecMgrDeviceValidateSKKE?relay,0203H
        PUBLIC ??ZDSecMgrEntryFree?relay
        FUNCTION ??ZDSecMgrEntryFree?relay,0203H
        PUBLIC ??ZDSecMgrEntryInit?relay
        FUNCTION ??ZDSecMgrEntryInit?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookup?relay
        FUNCTION ??ZDSecMgrEntryLookup?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMI?relay
        FUNCTION ??ZDSecMgrEntryLookupAMI?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExt?relay
        FUNCTION ??ZDSecMgrEntryLookupExt?relay,0203H
        PUBLIC ??ZDSecMgrEntryNew?relay
        FUNCTION ??ZDSecMgrEntryNew?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKey?relay
        FUNCTION ??ZDSecMgrEstablishKey?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyCfm?relay
        FUNCTION ??ZDSecMgrEstablishKeyCfm?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyInd?relay
        FUNCTION ??ZDSecMgrEstablishKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrEvent?relay
        FUNCTION ??ZDSecMgrEvent?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrLookup?relay
        FUNCTION ??ZDSecMgrExtAddrLookup?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrStore?relay
        FUNCTION ??ZDSecMgrExtAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,0203H
        PUBLIC ??ZDSecMgrInitNV?relay
        FUNCTION ??ZDSecMgrInitNV?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyInit?relay
        FUNCTION ??ZDSecMgrMasterKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLoad?relay
        FUNCTION ??ZDSecMgrMasterKeyLoad?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLookup?relay
        FUNCTION ??ZDSecMgrMasterKeyLookup?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyStore?relay
        FUNCTION ??ZDSecMgrMasterKeyStore?relay,0203H
        PUBLIC ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoining?relay
        FUNCTION ??ZDSecMgrPermitJoining?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoiningTimeout?relay
        FUNCTION ??ZDSecMgrPermitJoiningTimeout?relay,0203H
        PUBLIC ??ZDSecMgrRemoveDeviceInd?relay
        FUNCTION ??ZDSecMgrRemoveDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrRequestAppKey?relay
        FUNCTION ??ZDSecMgrRequestAppKey?relay,0203H
        PUBLIC ??ZDSecMgrRequestKeyInd?relay
        FUNCTION ??ZDSecMgrRequestKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrRestoreFromNV?relay
        FUNCTION ??ZDSecMgrRestoreFromNV?relay,0203H
        PUBLIC ??ZDSecMgrSendMasterKey?relay
        FUNCTION ??ZDSecMgrSendMasterKey?relay,0203H
        PUBLIC ??ZDSecMgrSendNwkKey?relay
        FUNCTION ??ZDSecMgrSendNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrSetDefaultNV?relay
        FUNCTION ??ZDSecMgrSetDefaultNV?relay,0203H
        PUBLIC ??ZDSecMgrSetupPartner?relay
        FUNCTION ??ZDSecMgrSetupPartner?relay,0203H
        PUBLIC ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrTCDataLoad?relay
        FUNCTION ??ZDSecMgrTCDataLoad?relay,0203H
        PUBLIC ??ZDSecMgrTCExtAddrCheck?relay
        FUNCTION ??ZDSecMgrTCExtAddrCheck?relay,0203H
        PUBLIC ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrWriteNV?relay
        FUNCTION ??ZDSecMgrWriteNV?relay,0203H
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC APSME_LinkKeyDataGet
        FUNCTION APSME_LinkKeyDataGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC APSME_MasterKeyGet
        FUNCTION APSME_MasterKeyGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_SKA_TimerExpired
        FUNCTION APSME_SKA_TimerExpired,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrAddrMgrUpdate
        FUNCTION ZDSecMgrAddrMgrUpdate,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthInitiate
        FUNCTION ZDSecMgrAuthInitiate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateCfm
        FUNCTION ZDSecMgrAuthenticateCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateInd
        FUNCTION ZDSecMgrAuthenticateInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlAdd
        FUNCTION ZDSecMgrCtrlAdd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlData
        PUBLIC ZDSecMgrCtrlInit
        FUNCTION ZDSecMgrCtrlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlLookup
        FUNCTION ZDSecMgrCtrlLookup,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrCtrlRelease
        FUNCTION ZDSecMgrCtrlRelease,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlReset
        FUNCTION ZDSecMgrCtrlReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlSet
        FUNCTION ZDSecMgrCtrlSet,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlTerm
        FUNCTION ZDSecMgrCtrlTerm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlHandler
        FUNCTION ZDSecMgrDeviceCtrlHandler,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceCtrlSetup
        FUNCTION ZDSecMgrDeviceCtrlSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceCtrlUpdate
        FUNCTION ZDSecMgrDeviceCtrlUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryAdd
        FUNCTION ZDSecMgrDeviceEntryAdd,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrDeviceEntryRemove
        FUNCTION ZDSecMgrDeviceEntryRemove,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceValidateCM
        FUNCTION ZDSecMgrDeviceValidateCM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateSKKE
        FUNCTION ZDSecMgrDeviceValidateSKKE,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrEstablishKey
        FUNCTION ZDSecMgrEstablishKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrEstablishKeyCfm
        FUNCTION ZDSecMgrEstablishKeyCfm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrEstablishKeyInd
        FUNCTION ZDSecMgrEstablishKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrEvent
        FUNCTION ZDSecMgrEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrInitNV
        FUNCTION ZDSecMgrInitNV,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrMasterKeyData
        PUBLIC ZDSecMgrMasterKeyInit
        FUNCTION ZDSecMgrMasterKeyInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrMasterKeyLoad
        FUNCTION ZDSecMgrMasterKeyLoad,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrMasterKeyLookup
        FUNCTION ZDSecMgrMasterKeyLookup,0203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrMasterKeyStore
        FUNCTION ZDSecMgrMasterKeyStore,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrRestoreFromNV
        FUNCTION ZDSecMgrRestoreFromNV,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrSendMasterKey
        FUNCTION ZDSecMgrSendMasterKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrSetupPartner
        FUNCTION ZDSecMgrSetupPartner,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrTCDataLoaded
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTCMasterKey
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrWriteNV
        FUNCTION ZDSecMgrWriteNV,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_b
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
osal_memcpy         SYMBOL "osal_memcpy"
osal_memset         SYMBOL "osal_memset"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSME_EstablishKeyReq SYMBOL "APSME_EstablishKeyReq"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AssocGetWithExt     SYMBOL "AssocGetWithExt"
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
AssocGetWithShort   SYMBOL "AssocGetWithShort"
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
APSME_AuthenticateReq SYMBOL "APSME_AuthenticateReq"
osal_set_event      SYMBOL "osal_set_event"
APSME_SecurityNM    SYMBOL "APSME_SecurityNM"
AssocMatchDeviceStatus SYMBOL "AssocMatchDeviceStatus"
AssocRemove         SYMBOL "AssocRemove"
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
APSME_EstablishKeyRsp SYMBOL "APSME_EstablishKeyRsp"
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
osal_nv_read        SYMBOL "osal_nv_read"
??APSME_AuthenticateReq?relay SYMBOL "?relay", APSME_AuthenticateReq
??APSME_EstablishKeyReq?relay SYMBOL "?relay", APSME_EstablishKeyReq
??APSME_EstablishKeyRsp?relay SYMBOL "?relay", APSME_EstablishKeyRsp
??APSME_LookupExtAddr?relay SYMBOL "?relay", APSME_LookupExtAddr
??APSME_LookupNwkAddr?relay SYMBOL "?relay", APSME_LookupNwkAddr
??APSME_RemoveDeviceReq?relay SYMBOL "?relay", APSME_RemoveDeviceReq
??APSME_RequestKeyReq?relay SYMBOL "?relay", APSME_RequestKeyReq
??APSME_SecurityNM?relay SYMBOL "?relay", APSME_SecurityNM
??APSME_TransportKeyReq?relay SYMBOL "?relay", APSME_TransportKeyReq
??APSME_UpdateDeviceReq?relay SYMBOL "?relay", APSME_UpdateDeviceReq
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrEqual?relay SYMBOL "?relay", AddrMgrExtAddrEqual
??AddrMgrExtAddrLookup?relay SYMBOL "?relay", AddrMgrExtAddrLookup
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
??AssocGetWithExt?relay SYMBOL "?relay", AssocGetWithExt
??AssocGetWithShort?relay SYMBOL "?relay", AssocGetWithShort
??AssocMatchDeviceStatus?relay SYMBOL "?relay", AssocMatchDeviceStatus
??AssocRemove?relay SYMBOL "?relay", AssocRemove
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_LeaveReq?relay SYMBOL "?relay", NLME_LeaveReq
??SSP_GetTrueRand?relay SYMBOL "?relay", SSP_GetTrueRand
??SSP_SwitchNwkKey?relay SYMBOL "?relay", SSP_SwitchNwkKey
??SSP_UpdateNwkKey?relay SYMBOL "?relay", SSP_UpdateNwkKey
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
??APSME_KeyFwdToChild?relay SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyDataGet SYMBOL "APSME_LinkKeyDataGet"
??APSME_LinkKeyDataGet?relay SYMBOL "?relay", APSME_LinkKeyDataGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
??APSME_LinkKeySet?relay SYMBOL "?relay", APSME_LinkKeySet
APSME_MasterKeyGet  SYMBOL "APSME_MasterKeyGet"
??APSME_MasterKeyGet?relay SYMBOL "?relay", APSME_MasterKeyGet
APSME_SKA_TimerExpired SYMBOL "APSME_SKA_TimerExpired"
??APSME_SKA_TimerExpired?relay SYMBOL "?relay", APSME_SKA_TimerExpired
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
??ZDSecMgrAPSRemove?relay SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
??ZDSecMgrAddLinkKey?relay SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrMgrUpdate SYMBOL "ZDSecMgrAddrMgrUpdate"
??ZDSecMgrAddrMgrUpdate?relay SYMBOL "?relay", ZDSecMgrAddrMgrUpdate
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
??ZDSecMgrAddrStore?relay SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
??ZDSecMgrAppKeyGet?relay SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
??ZDSecMgrAppKeyReq?relay SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
??ZDSecMgrAssocDeviceAuth?relay SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthInitiate SYMBOL "ZDSecMgrAuthInitiate"
??ZDSecMgrAuthInitiate?relay SYMBOL "?relay", ZDSecMgrAuthInitiate
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
??ZDSecMgrAuthNwkKey?relay SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticateCfm SYMBOL "ZDSecMgrAuthenticateCfm"
??ZDSecMgrAuthenticateCfm?relay SYMBOL "?relay", ZDSecMgrAuthenticateCfm
ZDSecMgrAuthenticateInd SYMBOL "ZDSecMgrAuthenticateInd"
??ZDSecMgrAuthenticateInd?relay SYMBOL "?relay", ZDSecMgrAuthenticateInd
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
??ZDSecMgrAuthenticationCheck?relay SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
??ZDSecMgrAuthenticationSet?relay SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
??ZDSecMgrConfig?relay SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrCtrlAdd     SYMBOL "ZDSecMgrCtrlAdd"
??ZDSecMgrCtrlAdd?relay SYMBOL "?relay", ZDSecMgrCtrlAdd
ZDSecMgrCtrlInit    SYMBOL "ZDSecMgrCtrlInit"
??ZDSecMgrCtrlInit?relay SYMBOL "?relay", ZDSecMgrCtrlInit
ZDSecMgrCtrlLookup  SYMBOL "ZDSecMgrCtrlLookup"
??ZDSecMgrCtrlLookup?relay SYMBOL "?relay", ZDSecMgrCtrlLookup
ZDSecMgrCtrlRelease SYMBOL "ZDSecMgrCtrlRelease"
??ZDSecMgrCtrlRelease?relay SYMBOL "?relay", ZDSecMgrCtrlRelease
ZDSecMgrCtrlReset   SYMBOL "ZDSecMgrCtrlReset"
??ZDSecMgrCtrlReset?relay SYMBOL "?relay", ZDSecMgrCtrlReset
ZDSecMgrCtrlSet     SYMBOL "ZDSecMgrCtrlSet"
??ZDSecMgrCtrlSet?relay SYMBOL "?relay", ZDSecMgrCtrlSet
ZDSecMgrCtrlTerm    SYMBOL "ZDSecMgrCtrlTerm"
??ZDSecMgrCtrlTerm?relay SYMBOL "?relay", ZDSecMgrCtrlTerm
ZDSecMgrDeviceCtrlHandler SYMBOL "ZDSecMgrDeviceCtrlHandler"
??ZDSecMgrDeviceCtrlHandler?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlHandler
ZDSecMgrDeviceCtrlSetup SYMBOL "ZDSecMgrDeviceCtrlSetup"
??ZDSecMgrDeviceCtrlSetup?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlSetup
ZDSecMgrDeviceCtrlUpdate SYMBOL "ZDSecMgrDeviceCtrlUpdate"
??ZDSecMgrDeviceCtrlUpdate?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlUpdate
ZDSecMgrDeviceEntryAdd SYMBOL "ZDSecMgrDeviceEntryAdd"
??ZDSecMgrDeviceEntryAdd?relay SYMBOL "?relay", ZDSecMgrDeviceEntryAdd
ZDSecMgrDeviceEntryRemove SYMBOL "ZDSecMgrDeviceEntryRemove"
??ZDSecMgrDeviceEntryRemove?relay SYMBOL "?relay", ZDSecMgrDeviceEntryRemove
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
??ZDSecMgrDeviceJoin?relay SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
??ZDSecMgrDeviceJoinDirect?relay SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
??ZDSecMgrDeviceJoinFwd?relay SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
??ZDSecMgrDeviceNew?relay SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
??ZDSecMgrDeviceRemove?relay SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
??ZDSecMgrDeviceValidate?relay SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateCM SYMBOL "ZDSecMgrDeviceValidateCM"
??ZDSecMgrDeviceValidateCM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateCM
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
??ZDSecMgrDeviceValidateRM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrDeviceValidateSKKE SYMBOL "ZDSecMgrDeviceValidateSKKE"
??ZDSecMgrDeviceValidateSKKE?relay SYMBOL "?relay", ZDSecMgrDeviceValidateSKKE
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
??ZDSecMgrEntryFree?relay SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
??ZDSecMgrEntryInit?relay SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
??ZDSecMgrEntryLookup?relay SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
??ZDSecMgrEntryLookupAMI?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
??ZDSecMgrEntryLookupExt?relay SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
??ZDSecMgrEntryNew?relay SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrEstablishKey SYMBOL "ZDSecMgrEstablishKey"
??ZDSecMgrEstablishKey?relay SYMBOL "?relay", ZDSecMgrEstablishKey
ZDSecMgrEstablishKeyCfm SYMBOL "ZDSecMgrEstablishKeyCfm"
??ZDSecMgrEstablishKeyCfm?relay SYMBOL "?relay", ZDSecMgrEstablishKeyCfm
ZDSecMgrEstablishKeyInd SYMBOL "ZDSecMgrEstablishKeyInd"
??ZDSecMgrEstablishKeyInd?relay SYMBOL "?relay", ZDSecMgrEstablishKeyInd
ZDSecMgrEvent       SYMBOL "ZDSecMgrEvent"
??ZDSecMgrEvent?relay SYMBOL "?relay", ZDSecMgrEvent
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
??ZDSecMgrExtAddrLookup?relay SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
??ZDSecMgrExtAddrStore?relay SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNV      SYMBOL "ZDSecMgrInitNV"
??ZDSecMgrInitNV?relay SYMBOL "?relay", ZDSecMgrInitNV
ZDSecMgrMasterKeyInit SYMBOL "ZDSecMgrMasterKeyInit"
??ZDSecMgrMasterKeyInit?relay SYMBOL "?relay", ZDSecMgrMasterKeyInit
ZDSecMgrMasterKeyLoad SYMBOL "ZDSecMgrMasterKeyLoad"
??ZDSecMgrMasterKeyLoad?relay SYMBOL "?relay", ZDSecMgrMasterKeyLoad
ZDSecMgrMasterKeyLookup SYMBOL "ZDSecMgrMasterKeyLookup"
??ZDSecMgrMasterKeyLookup?relay SYMBOL "?relay", ZDSecMgrMasterKeyLookup
ZDSecMgrMasterKeyStore SYMBOL "ZDSecMgrMasterKeyStore"
??ZDSecMgrMasterKeyStore?relay SYMBOL "?relay", ZDSecMgrMasterKeyStore
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
??ZDSecMgrPermitJoining?relay SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
??ZDSecMgrPermitJoiningTimeout?relay SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
??ZDSecMgrRemoveDeviceInd?relay SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
??ZDSecMgrRequestAppKey?relay SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
??ZDSecMgrRequestKeyInd?relay SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrRestoreFromNV SYMBOL "ZDSecMgrRestoreFromNV"
??ZDSecMgrRestoreFromNV?relay SYMBOL "?relay", ZDSecMgrRestoreFromNV
ZDSecMgrSendMasterKey SYMBOL "ZDSecMgrSendMasterKey"
??ZDSecMgrSendMasterKey?relay SYMBOL "?relay", ZDSecMgrSendMasterKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
??ZDSecMgrSendNwkKey?relay SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
??ZDSecMgrSetDefaultNV?relay SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSetupPartner SYMBOL "ZDSecMgrSetupPartner"
??ZDSecMgrSetupPartner?relay SYMBOL "?relay", ZDSecMgrSetupPartner
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
??ZDSecMgrTCDataLoad?relay SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
??ZDSecMgrTCExtAddrCheck?relay SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrWriteNV     SYMBOL "ZDSecMgrWriteNV"
??ZDSecMgrWriteNV?relay SYMBOL "?relay", ZDSecMgrWriteNV

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyReq
        FUNCTION APSME_EstablishKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_AuthenticateReq
        FUNCTION APSME_AuthenticateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityNM
        FUNCTION APSME_SecurityNM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMatchDeviceStatus
        FUNCTION AssocMatchDeviceStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyRsp
        FUNCTION APSME_EstablishKeyRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_AuthenticateReq?relay
        FUNCTION ??APSME_AuthenticateReq?relay,00H
        EXTERN ??APSME_EstablishKeyReq?relay
        FUNCTION ??APSME_EstablishKeyReq?relay,00H
        EXTERN ??APSME_EstablishKeyRsp?relay
        FUNCTION ??APSME_EstablishKeyRsp?relay,00H
        EXTERN ??APSME_LookupExtAddr?relay
        FUNCTION ??APSME_LookupExtAddr?relay,00H
        EXTERN ??APSME_LookupNwkAddr?relay
        FUNCTION ??APSME_LookupNwkAddr?relay,00H
        EXTERN ??APSME_RemoveDeviceReq?relay
        FUNCTION ??APSME_RemoveDeviceReq?relay,00H
        EXTERN ??APSME_RequestKeyReq?relay
        FUNCTION ??APSME_RequestKeyReq?relay,00H
        EXTERN ??APSME_SecurityNM?relay
        FUNCTION ??APSME_SecurityNM?relay,00H
        EXTERN ??APSME_TransportKeyReq?relay
        FUNCTION ??APSME_TransportKeyReq?relay,00H
        EXTERN ??APSME_UpdateDeviceReq?relay
        FUNCTION ??APSME_UpdateDeviceReq?relay,00H
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrEqual?relay
        FUNCTION ??AddrMgrExtAddrEqual?relay,00H
        EXTERN ??AddrMgrExtAddrLookup?relay
        FUNCTION ??AddrMgrExtAddrLookup?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocGetWithExt?relay
        FUNCTION ??AssocGetWithExt?relay,00H
        EXTERN ??AssocGetWithShort?relay
        FUNCTION ??AssocGetWithShort?relay,00H
        EXTERN ??AssocMatchDeviceStatus?relay
        FUNCTION ??AssocMatchDeviceStatus?relay,00H
        EXTERN ??AssocRemove?relay
        FUNCTION ??AssocRemove?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_LeaveReq?relay
        FUNCTION ??NLME_LeaveReq?relay,00H
        EXTERN ??SSP_GetTrueRand?relay
        FUNCTION ??SSP_GetTrueRand?relay,00H
        EXTERN ??SSP_SwitchNwkKey?relay
        FUNCTION ??SSP_SwitchNwkKey?relay,00H
        EXTERN ??SSP_UpdateNwkKey?relay
        FUNCTION ??SSP_UpdateNwkKey?relay,00H
        EXTERN ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN devState
        EXTERN zgPreConfigKey
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin

// J:\ÏîÄ¿Á·Ï°\ÑÐ¾¿Éúµç×Ó´óÈü\ZIgbee\¿ª¹Ø  DHT11 Ê÷Ý®ÅÉ Ôö¼Ó10½Úµã´«¸ÐÆ÷ ¾«¼ò´úÂë Ôö¼Ó½Úµã123\ZStack-CC2530-2.2.0-1.3.0\Components\stack\zdo\ZDSecMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2009-03-31 09:06:47 -0700 (Tue, 31 Mar 2009) $
//    4   Revision:       $Revision: 19604 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2008 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_NV.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "AF.h"
//   60 #include "ZDConfig.h"
//   61 #include "ZDApp.h"
//   62 #include "ZDSecMgr.h"
//   63 
//   64 
//   65 /******************************************************************************
//   66  * CONSTANTS
//   67  */
//   68 // maximum number of devices managed by this Security Manager
//   69 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   70   #define ZDSECMGR_DEVICE_MAX 3
//   71 #endif
//   72 
//   73 // total number of preconfigured devices (EXT address, MASTER key)
//   74 //devtag.pro.security
//   75 //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
//   76 #define ZDSECMGR_PRECONFIG_MAX 0
//   77 
//   78 // maximum number of MASTER keys this device may hold
//   79 #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
//   80 
//   81 // maximum number of LINK keys this device may store
//   82 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   83 
//   84 // total number of devices under control - authentication, SKKE, etc.
//   85 #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
//   86 
//   87 // total number of stored devices
//   88 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   89   #define ZDSECMGR_STORED_DEVICES 3
//   90 #endif
//   91   
//   92 #define ZDSECMGR_CTRL_NONE       0
//   93 #define ZDSECMGR_CTRL_INIT       1
//   94 #define ZDSECMGR_CTRL_TK_MASTER  2
//   95 #define ZDSECMGR_CTRL_SKKE_INIT  3
//   96 #define ZDSECMGR_CTRL_SKKE_WAIT  4
//   97 #define ZDSECMGR_CTRL_SKKE_DONE  5
//   98 #define ZDSECMGR_CTRL_SKKE_FAIL  6
//   99 #define ZDSECMGR_CTRL_TK_NWK     7
//  100 
//  101 #define ZDSECMGR_CTRL_BASE_CNTR      1
//  102 #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
//  103 #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
//  104 
//  105 // set SKA slot maximum
//  106 #define ZDSECMGR_SKA_SLOT_MAX 1
//  107 
//  108 // APSME Stub Implementations
//  109 #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
//  110 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//  111 #define ZDSecMgrLinkKeyDataGet APSME_LinkKeyDataGet
//  112 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//  113 
//  114 #if !defined( MAX_APS_FRAMECOUNTER_CHANGES )
//  115   // The number of times the frame counter can change before
//  116   // saving to NV
//  117   #define MAX_APS_FRAMECOUNTER_CHANGES    10
//  118 #endif
//  119 
//  120 /******************************************************************************
//  121  * TYPEDEFS
//  122  */
//  123 typedef struct
//  124 {
//  125   uint8 extAddr[Z_EXTADDR_LEN];
//  126   uint8 key[SEC_KEY_LEN];
//  127 } ZDSecMgrPreConfigData_t;
//  128 
//  129 typedef struct
//  130 {
//  131   uint16 ami;
//  132   uint8  key[SEC_KEY_LEN];
//  133 } ZDSecMgrMasterKeyData_t;
//  134 
//  135 //should match APSME_LinkKeyData_t;
//  136 typedef struct
//  137 {
//  138   uint8               key[SEC_KEY_LEN];
//  139   APSME_LinkKeyData_t apsmelkd;
//  140 } ZDSecMgrLinkKeyData_t;
//  141 
//  142 typedef struct
//  143 {
//  144   uint16                ami;
//  145   ZDSecMgrLinkKeyData_t lkd;
//  146   ZDSecMgr_Authentication_Option authenticateOption;
//  147 } ZDSecMgrEntry_t;
//  148 
//  149 typedef struct
//  150 {
//  151   ZDSecMgrEntry_t* entry;
//  152   uint16           parentAddr;
//  153   uint8            secure;
//  154   uint8            state;
//  155   uint8            cntr;
//  156   //uint8          next;
//  157 } ZDSecMgrCtrl_t;
//  158 
//  159 typedef struct
//  160 {
//  161   uint16          nwkAddr;
//  162   uint8*          extAddr;
//  163   uint16          parentAddr;
//  164   uint8           secure;
//  165   uint8           devStatus;
//  166   ZDSecMgrCtrl_t* ctrl;
//  167 } ZDSecMgrDevice_t;
//  168 
//  169 /******************************************************************************
//  170  * LOCAL VARIABLES
//  171  */
//  172 #if 0 // Taken out because the following functionality is only used for test
//  173       // purpose. A more efficient (above) way is used. It can be put
//  174       // back in if customers request for a white/black list feature.
//  175 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  176 {
//  177   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  178   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  179   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  180 };
//  181 #endif
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  183 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  184   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  185 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  186 uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
ZDSecMgrTCMasterKey:
        DS 16
        REQUIRE `?<Initializer for ZDSecMgrTCMasterKey>`
        REQUIRE __INIT_XDATA_I
//  187   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  188    0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  190 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  191 uint8 ZDSecMgrTCDataLoaded    = FALSE;
ZDSecMgrTCDataLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  192 
//  193 //devtag.pro.security - remove this
//  194 #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  195 const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
//  196 {
//  197   //---------------------------------------------------------------------------
//  198   // DEVICE A
//  199   //---------------------------------------------------------------------------
//  200   {
//  201     // extAddr
//  202     {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  203 
//  204     // key
//  205     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  206      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  207   },
//  208   //---------------------------------------------------------------------------
//  209   // DEVICE B
//  210   //---------------------------------------------------------------------------
//  211   {
//  212     // extAddr
//  213     {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
//  214 
//  215     // key
//  216     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  217      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  218   },
//  219   //---------------------------------------------------------------------------
//  220   // DEVICE C
//  221   //---------------------------------------------------------------------------
//  222   {
//  223     // extAddr
//  224     {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  225 
//  226     // key
//  227     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  228      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  229   },
//  230 };
//  231 #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  232 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  233 ZDSecMgrMasterKeyData_t* ZDSecMgrMasterKeyData = NULL;
ZDSecMgrMasterKeyData:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  234 ZDSecMgrEntry_t*         ZDSecMgrEntries       = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  235 ZDSecMgrCtrl_t*          ZDSecMgrCtrlData      = NULL;
ZDSecMgrCtrlData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  236 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
//  237 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  238 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  239 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  240 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  241 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  242 APSME_LinkKeyData_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 10
        REQUIRE __INIT_XDATA_Z
//  243 
//  244 /******************************************************************************
//  245  * PRIVATE FUNCTIONS
//  246  *
//  247  *   ZDSecMgrMasterKeyInit
//  248  *   ZDSecMgrAddrStore
//  249  *   ZDSecMgrExtAddrStore
//  250  *   ZDSecMgrExtAddrLookup
//  251  *   ZDSecMgrMasterKeyLookup
//  252  *   ZDSecMgrMasterKeyStore
//  253  *   ZDSecMgrEntryInit
//  254  *   ZDSecMgrEntryLookup
//  255  *   ZDSecMgrEntryLookupAMI
//  256  *   ZDSecMgrEntryLookupExt
//  257  *   ZDSecMgrEntryFree
//  258  *   ZDSecMgrEntryNew
//  259  *   ZDSecMgrCtrlInit
//  260  *   ZDSecMgrCtrlRelease
//  261  *   ZDSecMgrCtrlLookup
//  262  *   ZDSecMgrCtrlSet
//  263  *   ZDSecMgrCtrlAdd
//  264  *   ZDSecMgrCtrlTerm
//  265  *   ZDSecMgrCtrlReset
//  266  *   ZDSecMgrMasterKeyLoad
//  267  *   ZDSecMgrAppKeyGet
//  268  *   ZDSecMgrAppKeyReq
//  269  *   ZDSecMgrEstablishKey
//  270  *   ZDSecMgrSendMasterKey
//  271  *   ZDSecMgrSendNwkKey
//  272  *   ZDSecMgrDeviceEntryRemove
//  273  *   ZDSecMgrDeviceEntryAdd
//  274  *   ZDSecMgrDeviceCtrlHandler
//  275  *   ZDSecMgrDeviceCtrlSetup
//  276  *   ZDSecMgrDeviceCtrlUpdate
//  277  *   ZDSecMgrDeviceRemove
//  278  *   ZDSecMgrDeviceValidateSKKE
//  279  *   ZDSecMgrDeviceValidateRM
//  280  *   ZDSecMgrDeviceValidateCM
//  281  *   ZDSecMgrDeviceValidate
//  282  *   ZDSecMgrDeviceJoin
//  283  *   ZDSecMgrDeviceJoinDirect
//  284  *   ZDSecMgrDeviceJoinFwd
//  285  *   ZDSecMgrDeviceNew
//  286  *   ZDSecMgrAssocDeviceAuth
//  287  *   ZDSecMgrAuthInitiate
//  288  *   ZDSecMgrAuthNwkKey
//  289  */
//  290 //-----------------------------------------------------------------------------
//  291 // master key data
//  292 //-----------------------------------------------------------------------------
//  293 void ZDSecMgrMasterKeyInit( void );
//  294 
//  295 //-----------------------------------------------------------------------------
//  296 // address management
//  297 //-----------------------------------------------------------------------------
//  298 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  299 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  300 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  301 
//  302 //-----------------------------------------------------------------------------
//  303 // MASTER key data
//  304 //-----------------------------------------------------------------------------
//  305 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key );
//  306 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
//  307 
//  308 //-----------------------------------------------------------------------------
//  309 // entry data
//  310 //-----------------------------------------------------------------------------
//  311 void ZDSecMgrEntryInit( void );
//  312 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  313 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  314 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  315 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  316 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  317 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  318 
//  319 //-----------------------------------------------------------------------------
//  320 // control data
//  321 //-----------------------------------------------------------------------------
//  322 void ZDSecMgrCtrlInit( void );
//  323 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
//  324 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
//  325 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  326                       ZDSecMgrEntry_t*  entry,
//  327                       ZDSecMgrCtrl_t*   ctrl );
//  328 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
//  329 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
//  330 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
//  331                              ZDSecMgrEntry_t*  entry );
//  332 
//  333 //-----------------------------------------------------------------------------
//  334 // key support
//  335 //-----------------------------------------------------------------------------
//  336 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
//  337 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  338                              uint8*  initExtAddr,
//  339                              uint16  partNwkAddr,
//  340                              uint8*  partExtAddr,
//  341                              uint8** key,
//  342                              uint8*  keyType );
//  343 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  344 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
//  345 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
//  346 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  347 
//  348 //-----------------------------------------------------------------------------
//  349 // device entry
//  350 //-----------------------------------------------------------------------------
//  351 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
//  352 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
//  353 
//  354 //-----------------------------------------------------------------------------
//  355 // device control
//  356 //-----------------------------------------------------------------------------
//  357 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
//  358 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
//  359 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
//  360 
//  361 //-----------------------------------------------------------------------------
//  362 // device management
//  363 //-----------------------------------------------------------------------------
//  364 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  365 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
//  366 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  367 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
//  368 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  369 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  370 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  371 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  372 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  373 
//  374 //-----------------------------------------------------------------------------
//  375 // association management
//  376 //-----------------------------------------------------------------------------
//  377 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  378 
//  379 //-----------------------------------------------------------------------------
//  380 // authentication management
//  381 //-----------------------------------------------------------------------------
//  382 void ZDSecMgrAuthInitiate( uint8* responder );
//  383 void ZDSecMgrAuthNwkKey( void );
//  384 
//  385 /******************************************************************************
//  386  * @fn          ZDSecMgrMasterKeyInit                     ]
//  387  *
//  388  * @brief       Initialize master key data.
//  389  *
//  390  * @param       none
//  391  *
//  392  * @return      none
//  393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394 void ZDSecMgrMasterKeyInit( void )
ZDSecMgrMasterKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyInit
//  395 {
        FUNCALL ZDSecMgrMasterKeyInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  396   uint16 index;
//  397   uint16 size;
//  398 
//  399   // allocate MASTER key data
//  400   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  401 
//  402   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x36
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ??Subroutine95_0 & 0xFFFF
//  403 
//  404   // initialize MASTER key data
//  405   if ( ZDSecMgrMasterKeyData != NULL )
??CrossCallReturnLabel_184:
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyInit_0:
        JZ      ??ZDSecMgrMasterKeyInit_1
//  406   {
//  407     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  408     {
//  409       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrMasterKeyInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x12
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x12
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine13 & 0xFFFF
//  410     }
//  411   }
??CrossCallReturnLabel_104:
        JC      ??ZDSecMgrMasterKeyInit_2
//  412 }
??ZDSecMgrMasterKeyInit_1:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine77_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_107:
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  413 //devtag.pro.security
//  414 #if 0
//  415 void ZDSecMgrMasterKeyInit( void )
//  416 {
//  417   uint16         index;
//  418   uint16         size;
//  419   AddrMgrEntry_t entry;
//  420 
//  421 
//  422   // allocate MASTER key data
//  423   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  424 
//  425   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
//  426 
//  427   // initialize MASTER key data
//  428   if ( ZDSecMgrMasterKeyData != NULL )
//  429   {
//  430     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
//  431     {
//  432       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
//  433     }
//  434 
//  435     // check if preconfigured keys are enabled
//  436     //-------------------------------------------------------------------------
//  437     #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  438     //-------------------------------------------------------------------------
//  439     if ( zgPreConfigKeys == TRUE )
//  440     {
//  441       // sync configured data
//  442       entry.user = ADDRMGR_USER_SECURITY;
//  443 
//  444       for ( index = 0; index < ZDSECMGR_PRECONFIG_MAX; index++ )
//  445       {
//  446         // check for Address Manager entry
//  447         AddrMgrExtAddrSet( entry.extAddr,
//  448                            (uint8*)ZDSecMgrPreConfigData[index].extAddr );
//  449 
//  450         if ( AddrMgrEntryLookupExt( &entry ) != TRUE )
//  451         {
//  452           // update Address Manager
//  453           AddrMgrEntryUpdate( &entry );
//  454         }
//  455 
//  456         if ( entry.index != INVALID_NODE_ADDR )
//  457         {
//  458           // sync MASTER keys with Address Manager index
//  459           ZDSecMgrMasterKeyData[index].ami = entry.index;
//  460 
//  461           osal_memcpy( ZDSecMgrMasterKeyData[index].key,
//  462                    (void*)ZDSecMgrPreConfigData[index].key, SEC_KEY_LEN );
//  463         }
//  464       }
//  465     }
//  466     //-------------------------------------------------------------------------
//  467     #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  468     //-------------------------------------------------------------------------
//  469   }
//  470 }
//  471 #endif
//  472 
//  473 /******************************************************************************
//  474  * @fn          ZDSecMgrAddrStore
//  475  *
//  476  * @brief       Store device addresses.
//  477  *
//  478  * @param       nwkAddr - [in] NWK address
//  479  * @param       extAddr - [in] EXT address
//  480  * @param       ami     - [out] Address Manager index
//  481  *
//  482  * @return      ZStatus_t
//  483  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  484 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDSecMgrAddrStore
//  485 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  486   ZStatus_t      status;
//  487   AddrMgrEntry_t entry;
//  488 
//  489 
//  490   // add entry
//  491   entry.user    = ADDRMGR_USER_SECURITY;
//  492   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine95_0 & 0xFFFF
//  493   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_185:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
//  494 
//  495   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_73:
        JNZ     ??ZDSecMgrAddrStore_0
//  496   {
//  497     // return successful results
//  498     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  499     status = ZSuccess;
//  500   }
??CrossCallReturnLabel_15:
        SJMP    ??CrossCallReturnLabel_18
//  501   else
//  502   {
//  503     // return failed results
//  504     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  505     status = ZNwkUnknownDevice;
//  506   }
//  507 
//  508   return status;
??CrossCallReturnLabel_18:
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock8
//  509 }
//  510 
//  511 /******************************************************************************
//  512  * @fn          ZDSecMgrExtAddrStore
//  513  *
//  514  * @brief       Store EXT address.
//  515  *
//  516  * @param       extAddr - [in] EXT address
//  517  * @param       ami     - [out] Address Manager index
//  518  *
//  519  * @return      ZStatus_t
//  520  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  521 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrStore
//  522 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  523   ZStatus_t      status;
//  524   AddrMgrEntry_t entry;
//  525 
//  526 
//  527   // add entry
//  528   entry.user    = ADDRMGR_USER_SECURITY;
//  529   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine95_0 & 0xFFFF
//  530   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_186:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
//  531 
//  532   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_74:
        JNZ     ??ZDSecMgrExtAddrStore_0
//  533   {
//  534     // return successful results
//  535     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  536     status = ZSuccess;
//  537   }
??CrossCallReturnLabel_16:
        SJMP    ??CrossCallReturnLabel_19
//  538   else
//  539   {
//  540     // return failed results
//  541     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  542     status = ZNwkUnknownDevice;
//  543   }
//  544 
//  545   return status;
??CrossCallReturnLabel_19:
        SJMP    ?Subroutine6
        CFI EndBlock cfiBlock9
//  546 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     R1,#-0x38
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_19
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_20
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_15
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_16
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_17
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_202:
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  547 
//  548 /******************************************************************************
//  549  * @fn          ZDSecMgrExtAddrLookup
//  550  *
//  551  * @brief       Lookup index for specified EXT address.
//  552  *
//  553  * @param       extAddr - [in] EXT address
//  554  * @param       ami     - [out] Address Manager index
//  555  *
//  556  * @return      ZStatus_t
//  557  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  558 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrLookup
//  559 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  560   ZStatus_t      status;
//  561   AddrMgrEntry_t entry;
//  562 
//  563 
//  564   // lookup entry
//  565   entry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  566   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine73 & 0xFFFF
//  567 
//  568   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
??CrossCallReturnLabel_103:
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  569   {
//  570     // return successful results
//  571     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  572     status = ZSuccess;
//  573   }
??CrossCallReturnLabel_17:
        SJMP    ??CrossCallReturnLabel_20
//  574   else
//  575   {
//  576     // return failed results
//  577     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
        CFI EndBlock cfiBlock32
//  578     status = ZNwkUnknownDevice;
//  579   }
//  580 
//  581   return status;
??CrossCallReturnLabel_20:
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
//  582 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_74
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_75
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
//  583 
//  584 /******************************************************************************
//  585  * @fn          ZDSecMgrMasterKeyLookup
//  586  *
//  587  * @brief       Lookup MASTER key for specified address index.
//  588  *
//  589  * @param       ami - [in] Address Manager index
//  590  * @param       key - [out] valid MASTER key
//  591  *
//  592  * @return      ZStatus_t
//  593  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  594 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key )
ZDSecMgrMasterKeyLookup:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLookup
//  595 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL   ?Subroutine70 & 0xFFFF
//  596   ZStatus_t status;
//  597   uint16    index;
//  598 
//  599 
//  600   // initialize results
//  601   *key   = NULL;
//  602   status = ZNwkUnknownDevice;
//  603 
//  604   // verify data is available
//  605   if ( ZDSecMgrMasterKeyData != NULL )
??CrossCallReturnLabel_115:
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyLookup_0:
        JZ      ??ZDSecMgrMasterKeyLookup_1
//  606   {
//  607     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  608     {
//  609       if ( ZDSecMgrMasterKeyData[index].ami == ami )
??ZDSecMgrMasterKeyLookup_2:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x12
        MUL     AB
        MOV     R4,A
        MOV     ?V0 + 1,B
        MOV     B,#0x12
        MOV     A,R5
        MUL     AB
        ADD     A,?V0 + 1
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDSecMgrMasterKeyLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrMasterKeyLookup_3:
        JNZ     ??CrossCallReturnLabel_109
//  610       {
//  611         // return successful results
//  612         *key   = ZDSecMgrMasterKeyData[index].key;
        MOV     A,R4
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        LCALL   ?Subroutine14 & 0xFFFF
//  613         status = ZSuccess;
//  614 
//  615         // break from loop
//  616         index  = ZDSECMGR_MASTERKEY_MAX;
//  617       }
//  618     }
??CrossCallReturnLabel_109:
        LCALL   ?Subroutine49 & 0xFFFF
//  619   }
??CrossCallReturnLabel_60:
        JC      ??ZDSecMgrMasterKeyLookup_2
        CFI EndBlock cfiBlock39
//  620 
//  621   return status;
??ZDSecMgrMasterKeyLookup_1:
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
//  622 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine99_0 & 0xFFFF
        CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_115
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine78_0
        ; // Fall through to label ??Subroutine78_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine78_0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_113
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_114
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#-0x38
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
        REQUIRE ??Subroutine79_0
        ; // Fall through to label ??Subroutine79_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine79_0:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_203:
        MOV     ?V0 + 0,#0x0
        MOV     R0,#0x3
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
//  623 
//  624 /******************************************************************************
//  625  * @fn          ZDSecMgrMasterKeyStore
//  626  *
//  627  * @brief       Store MASTER key for specified address index.
//  628  *
//  629  * @param       ami - [in] Address Manager index
//  630  * @param       key - [in] valid key to store
//  631  *
//  632  * @return      ZStatus_t
//  633  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  634 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
ZDSecMgrMasterKeyStore:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyStore
//  635 {
        FUNCALL ZDSecMgrMasterKeyStore, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  636   ZStatus_t status;
//  637   uint16    index;
//  638   uint8*    entry;
//  639 
//  640 
//  641   // initialize results
//  642   status = ZNwkUnknownDevice;
        MOV     R4,#-0x38
//  643 
//  644   // verify data is available
//  645   if ( ZDSecMgrMasterKeyData != NULL )
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyStore_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyStore_0:
        JZ      ??ZDSecMgrMasterKeyStore_1
//  646   {
//  647     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  648     {
//  649       if ( ZDSecMgrMasterKeyData[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrMasterKeyStore_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x12
        MUL     AB
        MOV     R2,A
        MOV     R5,B
        MOV     B,#0x12
        MOV     A,R3
        MUL     AB
        ADD     A,R5
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_34:
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrMasterKeyStore_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrMasterKeyStore_3:
        JNZ     ??ZDSecMgrMasterKeyStore_4
//  650       {
//  651         // store EXT address index
//  652         ZDSecMgrMasterKeyData[index].ami = ami;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  653 
//  654         entry = ZDSecMgrMasterKeyData[index].key;
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
//  655 
//  656         if ( key != NULL )
        MOV     A,R6
        JNZ     ??ZDSecMgrMasterKeyStore_5
        MOV     A,R7
??ZDSecMgrMasterKeyStore_5:
        JZ      ??ZDSecMgrMasterKeyStore_6
//  657         {
//  658           osal_memcpy( entry, key,  SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x10
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??ZDSecMgrMasterKeyStore_7
//  659         }
//  660         else
//  661         {
//  662           osal_memset( entry, 0, SEC_KEY_LEN );
??ZDSecMgrMasterKeyStore_6:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  663         }
//  664 
//  665         // return successful results
//  666         status = ZSuccess;
??ZDSecMgrMasterKeyStore_7:
        MOV     R4,#0x0
//  667 
//  668         // break from loop
//  669         index  = ZDSECMGR_MASTERKEY_MAX;
        MOV     R0,#0x3
        MOV     R1,#0x0
//  670       }
//  671     }
??ZDSecMgrMasterKeyStore_4:
        LCALL   ?Subroutine49 & 0xFFFF
//  672   }
??CrossCallReturnLabel_61:
        JC      ??ZDSecMgrMasterKeyStore_2
//  673 
//  674   return status;
??ZDSecMgrMasterKeyStore_1:
        MOV     A,R4
        MOV     R1,A
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock57
//  675 }
//  676 
//  677 /******************************************************************************
//  678  * @fn          ZDSecMgrEntryInit
//  679  *
//  680  * @brief       Initialize entry sub module
//  681  *
//  682  * @param       none
//  683  *
//  684  * @return      none
//  685  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  686 void ZDSecMgrEntryInit( void )
ZDSecMgrEntryInit:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function ZDSecMgrEntryInit
//  687 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryInit, ZDSecMgrRestoreFromNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  688   uint16 size;
//  689   uint16 index;
//  690 
//  691   // allocate entry data
//  692   size = (short)( sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX );
//  693 
//  694   ZDSecMgrEntries = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x57
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ??Subroutine95_0 & 0xFFFF
//  695 
//  696   // initialize data
//  697   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_187:
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_0:
        JZ      ??ZDSecMgrEntryInit_1
//  698   {
//  699     for( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  700     {
//  701       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine13 & 0xFFFF
//  702     }
//  703   }
??CrossCallReturnLabel_105:
        JC      ??ZDSecMgrEntryInit_2
//  704   ZDSecMgrRestoreFromNV();
??ZDSecMgrEntryInit_1:
        ; Setup parameters for call to function ZDSecMgrRestoreFromNV
        LCALL   ??ZDSecMgrRestoreFromNV?relay
//  705 }
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock58
//  706 
//  707 /******************************************************************************
//  708  * @fn          ZDSecMgrEntryLookup
//  709  *
//  710  * @brief       Lookup entry index using specified NWK address.
//  711  *
//  712  * @param       nwkAddr - [in] NWK address
//  713  * @param       entry   - [out] valid entry
//  714  *
//  715  * @return      ZStatus_t
//  716  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  717 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookup
//  718 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        LCALL   ?Subroutine17 & 0xFFFF
//  719   ZStatus_t      status;
//  720   uint16         index;
//  721   AddrMgrEntry_t addrMgrEntry;
//  722 
//  723 
//  724   // initialize results
//  725   *entry = NULL;
//  726   status = ZNwkUnknownDevice;
//  727 
//  728   // verify data is available
//  729   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_112:
        JNZ     ??ZDSecMgrEntryLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookup_0:
        JZ      ??ZDSecMgrEntryLookup_1
//  730   {
//  731     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  732     addrMgrEntry.nwkAddr = nwkAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  733 
//  734     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_151:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_1
//  735     {
//  736       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  737       {
//  738         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_3:
        JNZ     ??CrossCallReturnLabel_110
//  739         {
//  740           // return successful results
//  741           *entry = &ZDSecMgrEntries[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine14 & 0xFFFF
//  742           status = ZSuccess;
//  743 
//  744           // break from loop
//  745           index = ZDSECMGR_ENTRY_MAX;
//  746         }
//  747       }
??CrossCallReturnLabel_110:
        LCALL   ?Subroutine49 & 0xFFFF
//  748     }
//  749   }
??CrossCallReturnLabel_62:
        JC      ??ZDSecMgrEntryLookup_2
//  750 
//  751   return status;
??ZDSecMgrEntryLookup_1:
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock59
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9
//  752 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine98_0 & 0xFFFF
        CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_104
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_105
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_106
        CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond69) CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_60
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_61
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_62
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_63
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_64
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        REQUIRE ??Subroutine80_0
        ; // Fall through to label ??Subroutine80_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine80_0:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        LCALL   ??Subroutine78_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82
//  753 
//  754 /******************************************************************************
//  755  * @fn          ZDSecMgrEntryLookupAMI
//  756  *
//  757  * @brief       Lookup entry using specified address index
//  758  *
//  759  * @param       ami   - [in] Address Manager index
//  760  * @param       entry - [out] valid entry
//  761  *
//  762  * @return      ZStatus_t
//  763  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  764 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMI
//  765 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  766   ZStatus_t status;
//  767   uint16    index;
//  768 
//  769 
//  770   // initialize results
//  771   *entry = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine80_0 & 0xFFFF
//  772   status = ZNwkUnknownDevice;
//  773 
//  774   // verify data is available
//  775   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_114:
        JNZ     ??ZDSecMgrEntryLookupAMI_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookupAMI_0:
        JZ      ??ZDSecMgrEntryLookupAMI_1
//  776   {
//  777     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  778     {
//  779       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 1,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 1
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_35:
        XRL     A,R6
        JNZ     ??ZDSecMgrEntryLookupAMI_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrEntryLookupAMI_3:
        JNZ     ??CrossCallReturnLabel_111
//  780       {
//  781         // return successful results
//  782         *entry = &ZDSecMgrEntries[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine79_0 & 0xFFFF
//  783         status = ZSuccess;
//  784 
//  785         // break from loop
//  786         index = ZDSECMGR_ENTRY_MAX;
//  787       }
//  788     }
??CrossCallReturnLabel_111:
        LCALL   ?Subroutine49 & 0xFFFF
//  789   }
??CrossCallReturnLabel_63:
        JC      ??ZDSecMgrEntryLookupAMI_2
//  790 
//  791   return status;
??ZDSecMgrEntryLookupAMI_1:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock83
//  792 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_87:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86
//  793 
//  794 /******************************************************************************
//  795  * @fn          ZDSecMgrEntryLookupExt
//  796  *
//  797  * @brief       Lookup entry index using specified EXT address.
//  798  *
//  799  * @param       extAddr - [in] EXT address
//  800  * @param       entry   - [out] valid entry
//  801  *
//  802  * @return      ZStatus_t
//  803  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  804 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExt
//  805 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        LCALL   ?Subroutine70 & 0xFFFF
//  806   ZStatus_t status;
//  807   uint16    ami;
//  808 
//  809 
//  810   // initialize results
//  811   *entry = NULL;
//  812   status = ZNwkUnknownDevice;
//  813 
//  814   // lookup address index
//  815   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
??CrossCallReturnLabel_116:
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
//  816   {
//  817     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine42 & 0xFFFF
//  818   }
??CrossCallReturnLabel_48:
        MOV     A,R1
        MOV     ?V0 + 0,A
//  819 
//  820   return status;
??ZDSecMgrEntryLookupExt_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock87
//  821 }
//  822 
//  823 /******************************************************************************
//  824  * @fn          ZDSecMgrEntryFree
//  825  *
//  826  * @brief       Free entry.
//  827  *
//  828  * @param       entry - [in] valid entry
//  829  *
//  830  * @return      ZStatus_t
//  831  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  832 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI Function ZDSecMgrEntryFree
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock88
//  833 {
//  834   entry->ami = INVALID_NODE_ADDR;
//  835 }
//  836 
//  837 /******************************************************************************
//  838  * @fn          ZDSecMgrEntryNew
//  839  *
//  840  * @brief       Get a new entry.
//  841  *
//  842  * @param       entry - [out] valid entry
//  843  *
//  844  * @return      ZStatus_t
//  845  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  846 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function ZDSecMgrEntryNew
//  847 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        LCALL   ?Subroutine17 & 0xFFFF
//  848   ZStatus_t status;
//  849   uint16    index;
//  850 
//  851 
//  852   // initialize results
//  853   *entry = NULL;
//  854   status = ZNwkUnknownDevice;
//  855 
//  856   // verify data is available
//  857   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_113:
        JNZ     ??ZDSecMgrEntryNew_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryNew_0:
        JZ      ??ZDSecMgrEntryNew_1
//  858   {
//  859     // find available entry
//  860     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
//  861     {
//  862       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_2:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1d
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrEntryNew_3:
        JNZ     ??ZDSecMgrEntryNew_4
//  863       {
//  864         // return successful result
//  865         *entry = &ZDSecMgrEntries[index];
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine95_0 & 0xFFFF
//  866         status = ZSuccess;
??CrossCallReturnLabel_188:
        MOV     ?V0 + 0,#0x0
//  867 
//  868         // Set the authentication option to default
//  869         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x1c
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  870 
//  871         // break from loop
//  872         index = ZDSECMGR_ENTRY_MAX;
        MOV     R2,#0x3
        MOV     R3,A
//  873       }
//  874     }
??ZDSecMgrEntryNew_4:
        LCALL   ?Subroutine50 & 0xFFFF
//  875   }
??CrossCallReturnLabel_65:
        JC      ??ZDSecMgrEntryNew_2
//  876 
//  877   return status;
??ZDSecMgrEntryNew_1:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock89
//  878 }
//  879 
//  880 /******************************************************************************
//  881  * @fn          ZDSecMgrCtrlInit
//  882  *
//  883  * @brief       Initialize control sub module
//  884  *
//  885  * @param       none
//  886  *
//  887  * @return      none
//  888  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  889 void ZDSecMgrCtrlInit( void )
ZDSecMgrCtrlInit:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function ZDSecMgrCtrlInit
//  890 {
        FUNCALL ZDSecMgrCtrlInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  891   uint16 size;
//  892   uint16 index;
//  893 
//  894   // allocate entry data
//  895   size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
//  896 
//  897   ZDSecMgrCtrlData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x15
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ??Subroutine95_0 & 0xFFFF
//  898 
//  899   // initialize data
//  900   if ( ZDSecMgrCtrlData != NULL )
??CrossCallReturnLabel_189:
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlInit_0:
        JZ      ??ZDSecMgrCtrlInit_1
//  901   {
//  902     for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  903     {
//  904       ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
??ZDSecMgrCtrlInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine63 & 0xFFFF
//  905     }
//  906   }
??CrossCallReturnLabel_88:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine77_0 & 0xFFFF
??CrossCallReturnLabel_106:
        JC      ??ZDSecMgrCtrlInit_2
//  907 }
??ZDSecMgrCtrlInit_1:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_104
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_105
        CFI (cfiCond92) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond92) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond92) CFA_SP SP+-5
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond93) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond93) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond93) CFA_SP SP+-5
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
//  908 
//  909 /******************************************************************************
//  910  * @fn          ZDSecMgrCtrlRelease
//  911  *
//  912  * @brief       Release control data.
//  913  *
//  914  * @param       ctrl - [in] valid control data
//  915  *
//  916  * @return      none
//  917  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  918 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
ZDSecMgrCtrlRelease:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function ZDSecMgrCtrlRelease
//  919 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  920   // should always be enough entry control data
//  921   ctrl->state = ZDSECMGR_CTRL_NONE;
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LJMP    ??Subroutine90_0 & 0xFFFF
        CFI EndBlock cfiBlock95
//  922 }
//  923 
//  924 /******************************************************************************
//  925  * @fn          ZDSecMgrCtrlLookup
//  926  *
//  927  * @brief       Lookup control data.
//  928  *
//  929  * @param       entry - [in] valid entry data
//  930  * @param       ctrl  - [out] control data - NULL if not found
//  931  *
//  932  * @return      none
//  933  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  934 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
ZDSecMgrCtrlLookup:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDSecMgrCtrlLookup
//  935 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  936   uint16 index;
//  937 
//  938 
//  939   // initialize search results
//  940   *ctrl = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  941 
//  942   // verify data is available
//  943   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlLookup_0:
        JZ      ??ZDSecMgrCtrlLookup_1
//  944   {
//  945     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  946     {
//  947       // make sure control data is in use
//  948       if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_86:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrCtrlLookup_3
//  949       {
//  950         // check for entry match
//  951         if ( ZDSecMgrCtrlData[index].entry == entry )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,R6
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrCtrlLookup_4
        MOV     A,R7
        XRL     A,?V0 + 1
??ZDSecMgrCtrlLookup_4:
        JNZ     ??ZDSecMgrCtrlLookup_3
//  952         {
//  953           // return this control data
//  954           *ctrl = &ZDSecMgrCtrlData[index];
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine94_0 & 0xFFFF
//  955 
//  956           // break from loop
//  957           index = ZDSECMGR_CTRL_MAX;
??CrossCallReturnLabel_167:
        MOV     R0,#0x3
        MOV     R1,#0x0
//  958         }
//  959       }
//  960     }
??ZDSecMgrCtrlLookup_3:
        LCALL   ?Subroutine49 & 0xFFFF
//  961   }
??CrossCallReturnLabel_64:
        JC      ??ZDSecMgrCtrlLookup_2
//  962 }
??ZDSecMgrCtrlLookup_1:
        LJMP    ??Subroutine99_0 & 0xFFFF
        CFI EndBlock cfiBlock96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_35
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
//  963 
//  964 /******************************************************************************
//  965  * @fn          ZDSecMgrCtrlSet
//  966  *
//  967  * @brief       Set control data.
//  968  *
//  969  * @param       device - [in] valid device data
//  970  * @param       entry  - [in] valid entry data
//  971  * @param       ctrl   - [in] valid control data
//  972  *
//  973  * @return      none
//  974  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  975 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
ZDSecMgrCtrlSet:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function ZDSecMgrCtrlSet
//  976                       ZDSecMgrEntry_t*  entry,
//  977                       ZDSecMgrCtrl_t*   ctrl )
//  978 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
//  979   // set control date
//  980   ctrl->parentAddr = device->parentAddr;
??CrossCallReturnLabel_210:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine21 & 0xFFFF
//  981   ctrl->secure     = device->secure;
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  982   ctrl->entry      = entry;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  983   ctrl->state      = ZDSECMGR_CTRL_INIT;
        MOV     A,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  984   ctrl->cntr       = 0;
        CLR     A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine21 & 0xFFFF
//  985 
//  986   // set device pointer
//  987   device->ctrl = ctrl;
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine94_0 & 0xFFFF
//  988 }
??CrossCallReturnLabel_168:
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_98:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
//  989 
//  990 /******************************************************************************
//  991  * @fn          ZDSecMgrCtrlAdd
//  992  *
//  993  * @brief       Add control data.
//  994  *
//  995  * @param       device - [in] valid device data
//  996  * @param       entry  - [in] valid entry data
//  997  *
//  998  * @return      ZStatus_t
//  999  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1000 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
ZDSecMgrCtrlAdd:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ZDSecMgrCtrlAdd
// 1001 {
        FUNCALL ZDSecMgrCtrlAdd, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1002   ZStatus_t status;
// 1003   uint16    index;
// 1004 
// 1005 
// 1006   // initialize results
// 1007   status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1008 
// 1009   // verify data is available
// 1010   if ( ZDSecMgrCtrlData != NULL )
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlAdd_0:
        JZ      ??ZDSecMgrCtrlAdd_1
// 1011   {
// 1012     // look for an empty slot
// 1013     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1014     {
// 1015       if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
??ZDSecMgrCtrlAdd_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_3
// 1016       {
// 1017         // return successful results
// 1018         ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1019 
// 1020         status = ZSuccess;
        MOV     R1,#0x0
// 1021 
// 1022         // break from loop
// 1023         index = ZDSECMGR_CTRL_MAX;
        MOV     R2,#0x3
        MOV     R3,#0x0
// 1024       }
// 1025     }
??ZDSecMgrCtrlAdd_3:
        LCALL   ?Subroutine50 & 0xFFFF
// 1026   }
??CrossCallReturnLabel_66:
        JC      ??ZDSecMgrCtrlAdd_2
// 1027 
// 1028   return status;
??ZDSecMgrCtrlAdd_1:
        LJMP    ??Subroutine101_0 & 0xFFFF
        CFI EndBlock cfiBlock105
// 1029 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x3
        MOV     A,R3
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
// 1030 
// 1031 /******************************************************************************
// 1032  * @fn          ZDSecMgrCtrlTerm
// 1033  *
// 1034  * @brief       Terminate device control.
// 1035  *
// 1036  * @param       entry - [in] valid entry data
// 1037  *
// 1038  * @return      none
// 1039  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1040 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
ZDSecMgrCtrlTerm:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function ZDSecMgrCtrlTerm
// 1041 {
        FUNCALL ZDSecMgrCtrlTerm, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
// 1042   ZDSecMgrCtrl_t* ctrl;
// 1043 
// 1044   // remove device from control data
// 1045   ZDSecMgrCtrlLookup ( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine57 & 0xFFFF
// 1046 
// 1047   if ( ctrl != NULL )
??CrossCallReturnLabel_78:
        JNZ     ??ZDSecMgrCtrlTerm_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlTerm_0:
        JZ      ??CrossCallReturnLabel_28
// 1048   {
// 1049     ZDSecMgrCtrlRelease ( ctrl );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
// 1050   }
// 1051 }
??CrossCallReturnLabel_28:
        MOV     A,#0x2
        SJMP    ??Subroutine81_0
        CFI EndBlock cfiBlock109
// 1052 
// 1053 /******************************************************************************
// 1054  * @fn          ZDSecMgrCtrlReset
// 1055  *
// 1056  * @brief       Reset control data.
// 1057  *
// 1058  * @param       device - [in] valid device data
// 1059  * @param       entry  - [in] valid entry data
// 1060  *
// 1061  * @return      ZStatus_t
// 1062  */
// 1063 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
// 1064 {
// 1065   ZStatus_t       status;
// 1066   ZDSecMgrCtrl_t* ctrl;
// 1067 
// 1068 
// 1069   // initialize results
// 1070   status = ZNwkUnknownDevice;
// 1071 
// 1072   // look for a match for the entry
// 1073   ZDSecMgrCtrlLookup( entry, &ctrl );
// 1074 
// 1075   if ( ctrl != NULL )
// 1076   {
// 1077     ZDSecMgrCtrlSet( device, entry, ctrl );
// 1078 
// 1079     status = ZSuccess;
// 1080   }
// 1081   else
// 1082   {
// 1083     status = ZDSecMgrCtrlAdd( device, entry );
// 1084   }
// 1085 
// 1086   return status;
// 1087 }
// 1088 
// 1089 /******************************************************************************
// 1090  * @fn          ZDSecMgrMasterKeyLoad
// 1091  *
// 1092  * @brief       Load the MASTER key for device with specified EXT
// 1093  *              address.
// 1094  *
// 1095  * @param       extAddr - [in] EXT address of device
// 1096  * @param       key     - [in] MASTER key shared with device
// 1097  *
// 1098  * @return      ZStatus_t
// 1099  */
// 1100 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
// 1101 {
// 1102   ZStatus_t status;
// 1103   uint8*    loaded;
// 1104   uint16    ami;
// 1105 
// 1106 
// 1107   // set status based on policy
// 1108   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 1109 
// 1110   if ( status == ZSuccess )
// 1111   {
// 1112     // get the address index
// 1113     if ( ZDSecMgrMasterKeyLookup( ami, &loaded ) == ZSuccess )
// 1114     {
// 1115       // overwrite old key
// 1116       osal_memcpy( loaded, key, SEC_KEY_LEN );
// 1117     }
// 1118     else
// 1119     {
// 1120       // store new key -- NULL will zero key
// 1121       status = ZDSecMgrMasterKeyStore( ami, key );
// 1122     }
// 1123   }
// 1124 
// 1125   return status;
// 1126 }
// 1127 
// 1128 /******************************************************************************
// 1129  * @fn          ZDSecMgrAppKeyGet
// 1130  *
// 1131  * @brief       get an APP key - option APP(MASTER or LINK) key
// 1132  *
// 1133  * @param       initNwkAddr - [in] NWK address of initiator device
// 1134  * @param       initExtAddr - [in] EXT address of initiator device
// 1135  * @param       partNwkAddr - [in] NWK address of partner device
// 1136  * @param       partExtAddr - [in] EXT address of partner device
// 1137  * @param       key         - [out] APP(MASTER or LINK) key
// 1138  * @param       keyType     - [out] APP(MASTER or LINK) key type
// 1139  *
// 1140  * @return      ZStatus_t
// 1141  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1142 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
// 1143                                                  // to KEY_TYPE_APP_LINK since
// 1144                                                  // only specific requirement
// 1145                                                  // right now comes from SE profile
// 1146 
// 1147 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
// 1148                              uint8*  initExtAddr,
// 1149                              uint16  partNwkAddr,
// 1150                              uint8*  partExtAddr,
// 1151                              uint8** key,
// 1152                              uint8*  keyType )
// 1153 {
// 1154   // Intentionally unreferenced parameters
// 1155   (void)initNwkAddr;
// 1156   (void)initExtAddr;
// 1157   (void)partNwkAddr;
// 1158   (void)partExtAddr;
// 1159   
// 1160   //---------------------------------------------------------------------------
// 1161   // note:
// 1162   // should use a robust mechanism to generate keys, for example
// 1163   // combine EXT addresses and call a hash function
// 1164   //---------------------------------------------------------------------------
// 1165   SSP_GetTrueRand( SEC_KEY_LEN, *key );
// 1166 
// 1167   *keyType = ZDSecMgrAppKeyType;
// 1168 
// 1169   return ZSuccess;
// 1170 }
// 1171 
// 1172 /******************************************************************************
// 1173  * @fn          ZDSecMgrAppKeyReq
// 1174  *
// 1175  * @brief       Process request for APP key between two devices.
// 1176  *
// 1177  * @param       device - [in] ZDO_RequestKeyInd_t, request info
// 1178  *
// 1179  * @return      none
// 1180  */
// 1181 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
// 1182 {
// 1183   APSME_TransportKeyReq_t req;
// 1184   uint8                   initExtAddr[Z_EXTADDR_LEN];
// 1185   uint16                  partNwkAddr;
// 1186   uint8                   key[SEC_KEY_LEN];
// 1187 
// 1188 
// 1189   // validate initiator and partner
// 1190   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
// 1191        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
// 1192   {
// 1193     // point the key to some memory
// 1194     req.key = key;
// 1195 
// 1196     // get an APP key - option APP (MASTER or LINK) key
// 1197     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
// 1198                             initExtAddr,
// 1199                             partNwkAddr,
// 1200                             ind->partExtAddr,
// 1201                             &req.key,
// 1202                             &req.keyType ) == ZSuccess )
// 1203     {
// 1204       // always secure
// 1205       req.nwkSecure = TRUE;
// 1206       req.apsSecure = TRUE;
// 1207       req.tunnel    = NULL;
// 1208 
// 1209       // send key to initiator device
// 1210       req.dstAddr   = ind->srcAddr;
// 1211       req.extAddr   = ind->partExtAddr;
// 1212       req.initiator = TRUE;
// 1213       APSME_TransportKeyReq( &req );
// 1214 
// 1215       // send key to partner device
// 1216       req.dstAddr   = partNwkAddr;
// 1217       req.extAddr   = initExtAddr;
// 1218       req.initiator = FALSE;
// 1219 
// 1220       APSME_TransportKeyReq( &req );
// 1221     }
// 1222   }
// 1223 }
// 1224 
// 1225 /******************************************************************************
// 1226  * @fn          ZDSecMgrEstablishKey
// 1227  *
// 1228  * @brief       Start SKKE with device joining network.
// 1229  *
// 1230  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1231  *
// 1232  * @return      ZStatus_t
// 1233  */
// 1234 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
// 1235 {
// 1236   ZStatus_t               status;
// 1237   APSME_EstablishKeyReq_t req;
// 1238 
// 1239 
// 1240   req.respExtAddr = device->extAddr;
// 1241   req.method      = APSME_SKKE_METHOD;
// 1242 
// 1243   if ( device->parentAddr == NLME_GetShortAddr() )
// 1244   {
// 1245     req.dstAddr   = device->nwkAddr;
// 1246     //devtag.0604.todo - remove obsolete
// 1247     req.apsSecure = FALSE;
// 1248     req.nwkSecure = FALSE;
// 1249   }
// 1250   else
// 1251   {
// 1252     req.dstAddr   = device->parentAddr;
// 1253     //devtag.0604.todo - remove obsolete
// 1254     req.apsSecure = TRUE;
// 1255     req.nwkSecure = TRUE;
// 1256   }
// 1257 
// 1258   status = APSME_EstablishKeyReq( &req );
// 1259 
// 1260   return status;
// 1261 }
// 1262 
// 1263 /******************************************************************************
// 1264  * @fn          ZDSecMgrSendMasterKey
// 1265  *
// 1266  * @brief       Send MASTER key to device joining network.
// 1267  *
// 1268  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1269  *
// 1270  * @return      ZStatus_t
// 1271  */
// 1272 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
// 1273 {
// 1274   ZStatus_t               status;
// 1275   APSME_TransportKeyReq_t req;
// 1276 
// 1277 
// 1278   req.keyType = KEY_TYPE_TC_MASTER;
// 1279   req.extAddr = device->extAddr;
// 1280   req.tunnel  = NULL;
// 1281 
// 1282   ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &req.key );
// 1283 
// 1284   //check if using secure hop to to parent
// 1285   if ( device->parentAddr != NLME_GetShortAddr() )
// 1286   {
// 1287     //send to parent with security
// 1288     req.dstAddr   = device->parentAddr;
// 1289     req.nwkSecure = TRUE;
// 1290     req.apsSecure = TRUE;
// 1291   }
// 1292   else
// 1293   {
// 1294     //direct with no security
// 1295     req.dstAddr   = device->nwkAddr;
// 1296     req.nwkSecure = FALSE;
// 1297     req.apsSecure = FALSE;
// 1298   }
// 1299 
// 1300   status = APSME_TransportKeyReq( &req );
// 1301 
// 1302   return status;
// 1303 }
// 1304 
// 1305 /******************************************************************************
// 1306  * @fn          ZDSecMgrSendNwkKey
// 1307  *
// 1308  * @brief       Send NWK key to device joining network.
// 1309  *
// 1310  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1311  *
// 1312  * @return      ZStatus_t
// 1313  */
// 1314 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
// 1315 {
// 1316   ZStatus_t               status;
// 1317   APSME_TransportKeyReq_t req;
// 1318   APSDE_FrameTunnel_t     tunnel;
// 1319 
// 1320   req.dstAddr   = device->nwkAddr;
// 1321   req.extAddr   = device->extAddr;
// 1322 
// 1323   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1324     req.keyType   = KEY_TYPE_NWK_HIGH;
// 1325   else
// 1326     req.keyType   = KEY_TYPE_NWK;
// 1327 
// 1328   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 1329       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 1330   {
// 1331     // set values
// 1332     req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1333     req.key       = _NIB.nwkActiveKey.key;
// 1334     //devtag.pro.security.todo - make sure that if there is no link key the NWK
// 1335     //key isn't used to secure the frame at the APS layer -- since the receiving
// 1336     //device may not have a NWK key yet
// 1337     req.apsSecure = TRUE;
// 1338 
// 1339     // check if using secure hop to to parent
// 1340     if ( device->parentAddr == NLME_GetShortAddr() )
// 1341     {
// 1342       req.nwkSecure = FALSE;
// 1343       req.tunnel    = NULL;
// 1344     }
// 1345     else
// 1346     {
// 1347       req.nwkSecure   = TRUE;
// 1348       req.tunnel      = &tunnel;
// 1349       req.tunnel->tna = device->parentAddr;
// 1350       req.tunnel->dea = device->extAddr;
// 1351     }
// 1352   }
// 1353   else
// 1354   {
// 1355     // default values
// 1356     //devtag.0604.verify
// 1357     req.nwkSecure = TRUE;
// 1358     req.apsSecure = FALSE;
// 1359     req.tunnel    = NULL;
// 1360 
// 1361     if ( device->parentAddr != NLME_GetShortAddr() )
// 1362     {
// 1363       req.dstAddr = device->parentAddr;
// 1364     }
// 1365 
// 1366     // special cases
// 1367     //devtag.0604.todo - modify to preconfig flag
// 1368     if ( device->secure == FALSE )
// 1369     {
// 1370       req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1371       req.key       = _NIB.nwkActiveKey.key;
// 1372 
// 1373       // check if using secure hop to to parent
// 1374       if ( device->parentAddr == NLME_GetShortAddr() )
// 1375       {
// 1376         req.nwkSecure = FALSE;
// 1377       }
// 1378     }
// 1379     else
// 1380     {
// 1381       req.key       = NULL;
// 1382       req.keySeqNum = 0;
// 1383     }
// 1384   }
// 1385 
// 1386   status = APSME_TransportKeyReq( &req );
// 1387 
// 1388   return status;
// 1389 }
// 1390 
// 1391 /******************************************************************************
// 1392  * @fn          ZDSecMgrDeviceEntryRemove
// 1393  *
// 1394  * @brief       Remove device entry.
// 1395  *
// 1396  * @param       entry - [in] valid entry
// 1397  *
// 1398  * @return      none
// 1399  */
// 1400 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
// 1401 {
// 1402   // terminate device control
// 1403   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1404   {
// 1405     ZDSecMgrCtrlTerm( entry );
// 1406   }
// 1407 
// 1408   // remove device from entry data
// 1409   ZDSecMgrEntryFree( entry );
// 1410 
// 1411   // remove EXT address
// 1412   //ZDSecMgrExtAddrRelease( aiOld );
// 1413 }
// 1414 
// 1415 /******************************************************************************
// 1416  * @fn          ZDSecMgrDeviceEntryAdd
// 1417  *
// 1418  * @brief       Add entry.
// 1419  *
// 1420  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1421  * @param       ami    - [in] Address Manager index
// 1422  *
// 1423  * @return      ZStatus_t
// 1424  */
// 1425 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
// 1426 {
// 1427   AddrMgrEntry_t entry;
// 1428 
// 1429   // get the ami data
// 1430   entry.user  = ADDRMGR_USER_SECURITY;
// 1431   entry.index = ami;
// 1432 
// 1433   AddrMgrEntryGet( &entry );
// 1434 
// 1435   // check if NWK address is same
// 1436   if ( entry.nwkAddr != nwkAddr )
// 1437   {
// 1438     // update NWK address
// 1439     entry.nwkAddr = nwkAddr;
// 1440 
// 1441     AddrMgrEntryUpdate( &entry );
// 1442   }
// 1443 }
// 1444 
// 1445 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
// 1446 {
// 1447   ZStatus_t        status;
// 1448   ZDSecMgrEntry_t* entry;
// 1449 
// 1450 
// 1451   // initialize as unknown until completion
// 1452   status = ZNwkUnknownDevice;
// 1453 
// 1454   device->ctrl = NULL;
// 1455 
// 1456   // make sure not already registered
// 1457   if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
// 1458   {
// 1459     // verify that address index is same
// 1460     if ( entry->ami != ami )
// 1461     {
// 1462       // remove conflicting entry
// 1463       ZDSecMgrDeviceEntryRemove( entry );
// 1464 
// 1465       if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
// 1466       {
// 1467         // update NWK address
// 1468         ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1469       }
// 1470     }
// 1471   }
// 1472   else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
// 1473   {
// 1474     // update NWK address
// 1475     ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1476   }
// 1477 
// 1478   // check if a new entry needs to be created
// 1479   if ( entry == NULL )
// 1480   {
// 1481     // get new entry
// 1482     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 1483     {
// 1484       // reset entry lkd
// 1485 
// 1486       // finish setting up entry
// 1487       entry->ami = ami;
// 1488 
// 1489       // update NWK address
// 1490       ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1491 
// 1492       // enter new device into device control
// 1493       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1494       {
// 1495         status = ZDSecMgrCtrlAdd( device, entry );
// 1496       }
// 1497       else
// 1498       {
// 1499         status = ZSuccess;
// 1500       }
// 1501     }
// 1502   }
// 1503   else
// 1504   {
// 1505     // reset entry lkd
// 1506 
// 1507     // reset entry in entry control
// 1508     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1509     {
// 1510       status = ZDSecMgrCtrlReset( device, entry );
// 1511     }
// 1512     else
// 1513     {
// 1514       status = ZSuccess;
// 1515     }
// 1516   }
// 1517 
// 1518   return status;
// 1519 }
// 1520 
// 1521 /******************************************************************************
// 1522  * @fn          ZDSecMgrDeviceCtrlHandler
// 1523  *
// 1524  * @brief       Device control handler.
// 1525  *
// 1526  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1527  *
// 1528  * @return      none
// 1529  */
// 1530 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
// 1531 {
// 1532   uint8 state;
// 1533   uint8 cntr;
// 1534 
// 1535 
// 1536   state = device->ctrl->state;
// 1537   cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1538 
// 1539   switch ( state )
// 1540   {
// 1541     case ZDSECMGR_CTRL_TK_MASTER:
// 1542       if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
// 1543       {
// 1544         state = ZDSECMGR_CTRL_SKKE_INIT;
// 1545         cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
// 1546       }
// 1547       break;
// 1548 
// 1549     case ZDSECMGR_CTRL_SKKE_INIT:
// 1550       if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
// 1551       {
// 1552         state = ZDSECMGR_CTRL_SKKE_WAIT;
// 1553       }
// 1554       break;
// 1555 
// 1556     case ZDSECMGR_CTRL_SKKE_WAIT:
// 1557       // continue to wait for SKA control timeout
// 1558       break;
// 1559 
// 1560     case ZDSECMGR_CTRL_TK_NWK:
// 1561       if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
// 1562       {
// 1563         state = ZDSECMGR_CTRL_NONE;
// 1564       }
// 1565       break;
// 1566 
// 1567     default:
// 1568       state = ZDSECMGR_CTRL_NONE;
// 1569       break;
// 1570   }
// 1571 
// 1572   if ( state != ZDSECMGR_CTRL_NONE )
// 1573   {
// 1574     device->ctrl->state = state;
// 1575     device->ctrl->cntr  = cntr;
// 1576 
// 1577     osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
// 1578   }
// 1579   else
// 1580   {
// 1581     ZDSecMgrCtrlRelease( device->ctrl );
// 1582   }
// 1583 }
// 1584 
// 1585 /******************************************************************************
// 1586  * @fn          ZDSecMgrDeviceCtrlSetup
// 1587  *
// 1588  * @brief       Setup device control.
// 1589  *
// 1590  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1591  *
// 1592  * @return      ZStatus_t
// 1593  */
// 1594 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
// 1595 {
// 1596   if ( device->ctrl != NULL )
// 1597   {
// 1598     if ( device->secure == FALSE )
// 1599     {
// 1600       // send the master key data to the joining device
// 1601       device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
// 1602     }
// 1603     else
// 1604     {
// 1605       // start SKKE
// 1606       device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
// 1607     }
// 1608 
// 1609     ZDSecMgrDeviceCtrlHandler( device );
// 1610   }
// 1611 }
// 1612 
// 1613 /******************************************************************************
// 1614  * @fn          ZDSecMgrDeviceCtrlUpdate
// 1615  *
// 1616  * @brief       Update control data.
// 1617  *
// 1618  * @param       extAddr - [in] EXT address
// 1619  * @param       state   - [in] new control state
// 1620  *
// 1621  * @return      none
// 1622  */
// 1623 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
// 1624 {
// 1625   ZDSecMgrEntry_t* entry;
// 1626   ZDSecMgrCtrl_t*  ctrl;
// 1627 
// 1628 
// 1629   // lookup device entry data
// 1630   ZDSecMgrEntryLookupExt( extAddr, &entry );
// 1631 
// 1632   if ( entry != NULL )
// 1633   {
// 1634     // lookup device control data
// 1635     ZDSecMgrCtrlLookup( entry, &ctrl );
// 1636 
// 1637     // make sure control data is valid
// 1638     if ( ctrl != NULL )
// 1639     {
// 1640       // possible state transitions
// 1641       if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
// 1642       {
// 1643         if ( state == ZDSECMGR_CTRL_SKKE_DONE )
// 1644         {
// 1645           // send the network key
// 1646           ctrl->state = ZDSECMGR_CTRL_TK_NWK;
// 1647           ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
// 1648         }
// 1649         else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
// 1650         {
// 1651           // force default timeout in order to cleanup control logic
// 1652           ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
// 1653           ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1654         }
// 1655       }
// 1656       // timer should be active
// 1657     }
// 1658   }
// 1659 }
// 1660 
// 1661 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );
// 1662 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
// 1663 {
// 1664   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1665   {
// 1666     if ( initiator == TRUE )
// 1667     {
// 1668       ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
// 1669     }
// 1670   }
// 1671 }
// 1672 
// 1673 /******************************************************************************
// 1674  * @fn          ZDSecMgrDeviceRemove
// 1675  *
// 1676  * @brief       Remove device from network.
// 1677  *
// 1678  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1679  *
// 1680  * @return      none
// 1681  */
// 1682 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
// 1683 {
// 1684   APSME_RemoveDeviceReq_t remDevReq;
// 1685   NLME_LeaveReq_t         leaveReq;
// 1686   associated_devices_t*   assoc;
// 1687 
// 1688 
// 1689   // check if parent, remove the device
// 1690   if ( device->parentAddr == NLME_GetShortAddr() )
// 1691   {
// 1692     // this is the parent of the device
// 1693     leaveReq.extAddr        = device->extAddr;
// 1694     leaveReq.removeChildren = FALSE;
// 1695     leaveReq.rejoin         = FALSE;
// 1696 
// 1697     // find child association
// 1698     assoc = AssocGetWithExt( device->extAddr );
// 1699 
// 1700     if ( ( assoc != NULL                            ) &&
// 1701          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1702          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
// 1703     {
// 1704       // check if associated device is authenticated
// 1705       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
// 1706       {
// 1707         leaveReq.silent = FALSE;
// 1708       }
// 1709       else
// 1710       {
// 1711         leaveReq.silent = TRUE;
// 1712       }
// 1713 
// 1714       NLME_LeaveReq( &leaveReq );
// 1715     }
// 1716   }
// 1717   else
// 1718   {
// 1719     // this is not the parent of the device
// 1720     remDevReq.parentAddr   = device->parentAddr;
// 1721     remDevReq.childExtAddr = device->extAddr;
// 1722 
// 1723     APSME_RemoveDeviceReq( &remDevReq );
// 1724   }
// 1725 }
// 1726 
// 1727 /******************************************************************************
// 1728  * @fn          ZDSecMgrDeviceValidateSKKE
// 1729  *
// 1730  * @brief       Decide whether device is allowed for SKKE.
// 1731  *
// 1732  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1733  *
// 1734  * @return      ZStatus_t
// 1735  */
// 1736 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
// 1737 {
// 1738   ZStatus_t status;
// 1739   uint16    ami;
// 1740   uint8*    key;
// 1741 
// 1742 
// 1743   // get EXT address
// 1744   status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1745 
// 1746   if ( status == ZSuccess )
// 1747   {
// 1748     // get MASTER key
// 1749     status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1750 
// 1751     if ( status == ZSuccess )
// 1752     {
// 1753     //  // check if initiator is Trust Center
// 1754     //  if ( device->nwkAddr == APSME_TRUSTCENTER_NWKADDR )
// 1755     //  {
// 1756     //    // verify NWK key not sent
// 1757     //    // devtag.todo
// 1758     //    // temporary - add device to internal data
// 1759     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1760     //  }
// 1761     //  else
// 1762     //  {
// 1763     //    // initiator not Trust Center - End to End SKKE - set policy
// 1764     //    // for accepting an SKKE initiation
// 1765     //    // temporary - add device to internal data
// 1766     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1767     //  }
// 1768         status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1769     }
// 1770   }
// 1771 
// 1772   return status;
// 1773 }
// 1774 
// 1775 /******************************************************************************
// 1776  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1777  *
// 1778  * @brief       Decide whether device is allowed.
// 1779  *
// 1780  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1781  *
// 1782  * @return      ZStatus_t
// 1783  */
// 1784 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
// 1785 {
// 1786 
// 1787   ZStatus_t status;
// 1788   status = ZSuccess;
// 1789 
// 1790   (void)device;  // Intentionally unreferenced parameter
// 1791   
// 1792   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1793   // the trust center to reject any newly joining devices by sending
// 1794   // Remove-device to the parents.
// 1795   if ( zgSecurePermitJoin == false )
// 1796   {
// 1797     status = ZNwkUnknownDevice;
// 1798   }
// 1799 
// 1800 
// 1801 
// 1802 #if 0  // Taken out because the following functionality is only used for test
// 1803        // purpose. A more efficient (above) way is used. It can be put
// 1804        // back in if customers request for a white/black list feature.
// 1805        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1806 
// 1807   // The following code processes the device black list (stored device list)
// 1808   // If the joining device is not part of the forbidden device list
// 1809   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1810   // will send Remove-device and ban the device from joining.
// 1811 
// 1812   uint8     index;
// 1813   uint8*    restricted;
// 1814 
// 1815   // Look through the stored device list - used for restricted devices
// 1816   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1817   {
// 1818     restricted = ZDSecMgrStoredDeviceList[index];
// 1819 
// 1820     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1821     {
// 1822       // return as unknown device in regards to validation
// 1823       status = ZNwkUnknownDevice;
// 1824 
// 1825       // break from loop
// 1826       index = ZDSECMGR_STORED_DEVICES;
// 1827     }
// 1828   }
// 1829 
// 1830 #endif
// 1831 
// 1832   return status;
// 1833 }
// 1834 
// 1835 /******************************************************************************
// 1836  * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
// 1837  *
// 1838  * @brief       Decide whether device is allowed.
// 1839  *
// 1840  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1841  *
// 1842  * @return      ZStatus_t
// 1843  */
// 1844 //devtag.pro.security
// 1845 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
// 1846 {
// 1847   ZStatus_t status;
// 1848   uint16    ami;
// 1849   uint8*    key;
// 1850 
// 1851 
// 1852 //  // check for pre configured setting
// 1853 //  if ( device->secure == TRUE )
// 1854 //  {
// 1855 //    // get EXT address and MASTER key
// 1856 //    status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1857 //
// 1858 //    if ( status == ZSuccess )
// 1859 //    {
// 1860 //      status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1861 //    }
// 1862 //  }
// 1863 //  else
// 1864 //  {
// 1865     // implement EXT address and MASTER key policy here -- the total number of
// 1866     // Security Manager entries should never exceed the number of EXT addresses
// 1867     // and MASTER keys available
// 1868 
// 1869     // set status based on policy
// 1870     //status = ZNwkUnknownDevice;
// 1871 
// 1872     // set status based on policy
// 1873     status = ZSuccess; // ZNwkUnknownDevice;
// 1874 
// 1875     // get key based on policy
// 1876     key = ZDSecMgrTCMasterKey;
// 1877 
// 1878     // if policy, store new EXT address
// 1879     status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 1880 
// 1881     // set the key
// 1882     ZDSecMgrMasterKeyLoad( device->extAddr, key );
// 1883 //  }
// 1884 
// 1885   // if EXT address and MASTER key available -- add device
// 1886   if ( status == ZSuccess )
// 1887   {
// 1888     // add device to internal data - with control
// 1889     status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1890   }
// 1891 
// 1892   return status;
// 1893 }
// 1894 //devtag.pro.security
// 1895 #if 0
// 1896 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
// 1897 {
// 1898   ZStatus_t status;
// 1899   uint16    ami;
// 1900   uint8*    key;
// 1901 
// 1902 
// 1903   // check for pre configured setting
// 1904   if ( device->secure == TRUE )
// 1905   {
// 1906     // get EXT address and MASTER key
// 1907     status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1908 
// 1909     if ( status == ZSuccess )
// 1910     {
// 1911       status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1912     }
// 1913   }
// 1914   else
// 1915   {
// 1916     // implement EXT address and MASTER key policy here -- the total number of
// 1917     // Security Manager entries should never exceed the number of EXT addresses
// 1918     // and MASTER keys available
// 1919 
// 1920     // set status based on policy
// 1921     status = ZSuccess; // ZNwkUnknownDevice;
// 1922 
// 1923     // get the address index
// 1924     if ( ZDSecMgrExtAddrLookup( device->extAddr, &ami ) != ZSuccess )
// 1925     {
// 1926       // if policy, store new EXT address
// 1927       status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 1928     }
// 1929 
// 1930     // get the address index
// 1931     if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 1932     {
// 1933       // if policy, store new key -- NULL will zero key
// 1934       status = ZDSecMgrMasterKeyStore( ami, NULL );
// 1935     }
// 1936   }
// 1937 
// 1938   // if EXT address and MASTER key available -- add device
// 1939   if ( status == ZSuccess )
// 1940   {
// 1941     // add device to internal data - with control
// 1942     status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1943   }
// 1944 
// 1945   return status;
// 1946 }
// 1947 #endif
// 1948 
// 1949 /******************************************************************************
// 1950  * @fn          ZDSecMgrDeviceValidate
// 1951  *
// 1952  * @brief       Decide whether device is allowed.
// 1953  *
// 1954  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1955  *
// 1956  * @return      ZStatus_t
// 1957  */
// 1958 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
// 1959 {
// 1960   ZStatus_t status;
// 1961 
// 1962 
// 1963   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
// 1964   {
// 1965     // device may be joining with a secure flag but it is ultimately the Trust
// 1966     // Center that decides -- check if expected pre configured device --
// 1967     // override settings
// 1968     if ( zgPreConfigKeys == TRUE )
// 1969     {
// 1970       device->secure = TRUE;
// 1971     }
// 1972     else
// 1973     {
// 1974       device->secure = FALSE;
// 1975     }
// 1976 
// 1977     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1978     {
// 1979       status = ZDSecMgrDeviceValidateCM( device );
// 1980     }
// 1981     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1982     {
// 1983       status = ZDSecMgrDeviceValidateRM( device );
// 1984     }
// 1985   }
// 1986   else
// 1987   {
// 1988     status = ZNwkUnknownDevice;
// 1989   }
// 1990 
// 1991   return status;
// 1992 }
// 1993 
// 1994 /******************************************************************************
// 1995  * @fn          ZDSecMgrDeviceJoin
// 1996  *
// 1997  * @brief       Try to join this device.
// 1998  *
// 1999  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2000  *
// 2001  * @return      ZStatus_t
// 2002  */
// 2003 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
// 2004 {
// 2005   ZStatus_t status;
// 2006 
// 2007   // attempt to validate device
// 2008   status = ZDSecMgrDeviceValidate( device );
// 2009 
// 2010   if ( status == ZSuccess )
// 2011   {
// 2012     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2013     {
// 2014       ZDSecMgrDeviceCtrlSetup( device );
// 2015     }
// 2016     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2017     {
// 2018       //send the nwk key data to the joining device
// 2019       status = ZDSecMgrSendNwkKey( device );
// 2020     }
// 2021   }
// 2022   else
// 2023   {
// 2024     // not allowed, remove the device
// 2025     ZDSecMgrDeviceRemove( device );
// 2026   }
// 2027 
// 2028   return status;
// 2029 }
// 2030 
// 2031 /******************************************************************************
// 2032  * @fn          ZDSecMgrDeviceJoinDirect
// 2033  *
// 2034  * @brief       Try to join this device as a direct child.
// 2035  *
// 2036  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2037  *
// 2038  * @return      ZStatus_t
// 2039  */
// 2040 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
// 2041 {
// 2042   ZStatus_t status;
// 2043 
// 2044   status = ZDSecMgrDeviceJoin( device );
// 2045 
// 2046   if ( status == ZSuccess )
// 2047   {
// 2048     // set association status to authenticated
// 2049     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
// 2050   }
// 2051 
// 2052   return status;
// 2053 }
// 2054 
// 2055 /******************************************************************************
// 2056  * @fn          ZDSecMgrDeviceJoinFwd
// 2057  *
// 2058  * @brief       Forward join to Trust Center.
// 2059  *
// 2060  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2061  *
// 2062  * @return      ZStatus_t
// 2063  */
// 2064 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
// 2065 {
// 2066   ZStatus_t               status;
// 2067   APSME_UpdateDeviceReq_t req;
// 2068 
// 2069 
// 2070   // forward any joining device to the Trust Center -- the Trust Center will
// 2071   // decide if the device is allowed to join
// 2072   status = ZSuccess;
// 2073 
// 2074   // forward authorization to the Trust Center
// 2075   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2076   req.devAddr    = device->nwkAddr;
// 2077   req.devExtAddr = device->extAddr;
// 2078 
// 2079   // set security status, option for router to reject if policy set
// 2080   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
// 2081   {
// 2082     if ( device->devStatus & DEV_REJOIN_STATUS )
// 2083     {
// 2084       if ( device->secure == TRUE )
// 2085         req.status = APSME_UD_HIGH_SECURED_REJOIN;
// 2086       else
// 2087         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
// 2088     }
// 2089     else
// 2090       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
// 2091   }
// 2092   else
// 2093   {
// 2094     if ( device->devStatus & DEV_REJOIN_STATUS )
// 2095     {
// 2096       if ( device->secure == TRUE )
// 2097         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
// 2098       else
// 2099         req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
// 2100     }
// 2101     else
// 2102       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
// 2103   }
// 2104 
// 2105   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2106     req.apsSecure = TRUE;
// 2107   else
// 2108     req.apsSecure = FALSE;
// 2109 
// 2110   // send and APSME_UPDATE_DEVICE request to the trust center
// 2111   status = APSME_UpdateDeviceReq( &req );
// 2112 
// 2113   return status;
// 2114 }
// 2115 
// 2116 /******************************************************************************
// 2117  * @fn          ZDSecMgrDeviceNew
// 2118  *
// 2119  * @brief       Process a new device.
// 2120  *
// 2121  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2122  *
// 2123  * @return      ZStatus_t
// 2124  */
// 2125 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
// 2126 {
// 2127   ZStatus_t status;
// 2128 
// 2129   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2130   {
// 2131     // try to join this device
// 2132     status = ZDSecMgrDeviceJoinDirect( joiner );
// 2133   }
// 2134   else
// 2135   {
// 2136     status = ZDSecMgrDeviceJoinFwd( joiner );
// 2137   }
// 2138 
// 2139   return status;
// 2140 }
// 2141 
// 2142 /******************************************************************************
// 2143  * @fn          ZDSecMgrAssocDeviceAuth
// 2144  *
// 2145  * @brief       Set associated device status to authenticated
// 2146  *
// 2147  * @param       assoc - [in, out] associated_devices_t
// 2148  *
// 2149  * @return      none
// 2150  */
// 2151 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
// 2152 {
// 2153   if ( assoc != NULL )
// 2154   {
// 2155     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
// 2156   }
// 2157 }
// 2158 
// 2159 /******************************************************************************
// 2160  * @fn          ZDSecMgrAuthInitiate
// 2161  *
// 2162  * @brief       Initiate entity authentication
// 2163  *
// 2164  * @param       responder - [in] responder EXT address
// 2165  *
// 2166  * @return      none
// 2167  */
// 2168 void ZDSecMgrAuthInitiate( uint8* responder )
// 2169 {
// 2170   APSME_AuthenticateReq_t req;
// 2171 
// 2172 
// 2173   // make sure NWK address is available
// 2174   if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
// 2175   {
// 2176     // set request fields
// 2177     req.extAddr   = responder;
// 2178     req.action    = APSME_EA_INITIATE;
// 2179     req.challenge = NULL;
// 2180 
// 2181     // start EA processing
// 2182     APSME_AuthenticateReq( &req );
// 2183   }
// 2184 }
// 2185 
// 2186 /******************************************************************************
// 2187  * @fn          ZDSecMgrAuthNwkKey
// 2188  *
// 2189  * @brief       Handle next step in authentication process
// 2190  *
// 2191  * @param       none
// 2192  *
// 2193  * @return      none
// 2194  */
// 2195 void ZDSecMgrAuthNwkKey()
// 2196 {
// 2197   if ( devState == DEV_END_DEVICE_UNAUTH )
// 2198   {
// 2199     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2200     {
// 2201       uint8 parent[Z_EXTADDR_LEN];
// 2202 
// 2203       // get parent's EXT address
// 2204       NLME_GetCoordExtAddr( parent );
// 2205 
// 2206       // begin entity authentication with parent
// 2207       ZDSecMgrAuthInitiate( parent );
// 2208     }
// 2209     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2210     {
// 2211       // inform ZDO that device has been authenticated
// 2212       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2213     }
// 2214   }
// 2215 }
// 2216 
// 2217 /******************************************************************************
// 2218  * PUBLIC FUNCTIONS
// 2219  */
// 2220 /******************************************************************************
// 2221  * @fn          ZDSecMgrInit
// 2222  *
// 2223  * @brief       Initialize ZigBee Device Security Manager.
// 2224  *
// 2225  * @param       none
// 2226  *
// 2227  * @return      none
// 2228  */
// 2229 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2230 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 2231 void ZDSecMgrAddrMgrCB( uint8           update,
// 2232                         AddrMgrEntry_t* newEntry,
// 2233                         AddrMgrEntry_t* oldEntry )
// 2234 {
// 2235   (void)update;
// 2236   (void)newEntry;
// 2237   (void)oldEntry;
// 2238 }
// 2239 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2240 
// 2241 void ZDSecMgrInit( void )
// 2242 {
// 2243   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2244       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2245   {
// 2246     // initialize sub modules
// 2247     ZDSecMgrMasterKeyInit();
// 2248     ZDSecMgrEntryInit();
// 2249 
// 2250     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2251     {
// 2252       ZDSecMgrCtrlInit();
// 2253     }
// 2254 
// 2255     // register with Address Manager
// 2256     #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2257     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 2258     #endif
// 2259   }
// 2260 
// 2261   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2262   {
// 2263     // configure SKA slot data
// 2264     APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
// 2265   }
// 2266   else if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2267   {
// 2268     // Setup the preconfig Trust Center Link Key
// 2269     TrustCenterLinkKey.key = zgPreConfigTCLinkKey;
// 2270     TrustCenterLinkKey.txFrmCntr = 0;
// 2271     TrustCenterLinkKey.rxFrmCntr = 0;
// 2272 #if defined ( NV_RESTORE )
// 2273     if ( osal_nv_item_init( ZCD_NV_SECURE_TCLINKKEY_TXFRAME, sizeof(uint32), &(TrustCenterLinkKey.txFrmCntr) ) == ZSUCCESS )
// 2274     {
// 2275       osal_nv_read( ZCD_NV_SECURE_TCLINKKEY_TXFRAME, 0, sizeof(uint32), &(TrustCenterLinkKey.txFrmCntr) );
// 2276     }
// 2277     if ( osal_nv_item_init( ZCD_NV_SECURE_TCLINKKEY_RXFRAME, sizeof(uint32), &(TrustCenterLinkKey.rxFrmCntr) ) == ZSUCCESS )
// 2278     {
// 2279       osal_nv_read( ZCD_NV_SECURE_TCLINKKEY_RXFRAME, 0, sizeof(uint32), &(TrustCenterLinkKey.rxFrmCntr) );
// 2280     }
// 2281 #endif
// 2282     APSME_TCLinkKeySetup( 0x0000, &TrustCenterLinkKey );
// 2283   }
// 2284 
// 2285   if ( ZG_SECURE_ENABLED )
// 2286   {
// 2287     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2288     {
// 2289       // setup joining permissions
// 2290       ZDSecMgrPermitJoiningEnabled = TRUE;
// 2291       ZDSecMgrPermitJoiningTimed   = FALSE;
// 2292     }
// 2293   }
// 2294 
// 2295   // configure security based on security mode and type of device
// 2296   ZDSecMgrConfig();
// 2297 }
// 2298 
// 2299 /******************************************************************************
// 2300  * @fn          ZDSecMgrConfig
// 2301  *
// 2302  * @brief       Configure ZigBee Device Security Manager.
// 2303  *
// 2304  * @param       none
// 2305  *
// 2306  * @return      none
// 2307  */
// 2308 void ZDSecMgrConfig( void )
// 2309 {
// 2310   if ( ZG_SECURE_ENABLED )
// 2311   {
// 2312     SSP_Init();
// 2313 
// 2314     if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2315         || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2316     {
// 2317       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2318       {
// 2319         // COMMERCIAL MODE - COORDINATOR DEVICE
// 2320         APSME_SecurityCM_CD();
// 2321       }
// 2322       else if ( ZSTACK_ROUTER_BUILD )
// 2323       {
// 2324         // COMMERCIAL MODE - ROUTER DEVICE
// 2325         APSME_SecurityCM_RD();
// 2326       }
// 2327       else
// 2328       {
// 2329         // COMMERCIAL MODE - END DEVICE
// 2330         APSME_SecurityCM_ED();
// 2331       }
// 2332     }
// 2333     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2334     {
// 2335       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2336       {
// 2337         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 2338         APSME_SecurityRM_CD();
// 2339       }
// 2340       else if ( ZSTACK_ROUTER_BUILD )
// 2341       {
// 2342         // RESIDENTIAL MODE - ROUTER DEVICE
// 2343         APSME_SecurityRM_RD();
// 2344       }
// 2345       else
// 2346       {
// 2347         // RESIDENTIAL MODE - END DEVICE
// 2348         APSME_SecurityRM_ED();
// 2349       }
// 2350     }
// 2351   }
// 2352   else
// 2353   {
// 2354     // NO SECURITY
// 2355     APSME_SecurityNM();
// 2356   }
// 2357 }
// 2358 
// 2359 /******************************************************************************
// 2360  * @fn          ZDSecMgrPermitJoining
// 2361  *
// 2362  * @brief       Process request to change joining permissions.
// 2363  *
// 2364  * @param       duration - [in] timed duration for join in seconds
// 2365  *                         - 0x00 not allowed
// 2366  *                         - 0xFF allowed without timeout
// 2367  *
// 2368  * @return      uint8 - success(TRUE:FALSE)
// 2369  */
// 2370 uint8 ZDSecMgrPermitJoining( uint8 duration )
// 2371 {
// 2372   uint8 accept;
// 2373 
// 2374 
// 2375   ZDSecMgrPermitJoiningTimed = FALSE;
// 2376 
// 2377   if ( duration > 0 )
// 2378   {
// 2379     ZDSecMgrPermitJoiningEnabled = TRUE;
// 2380 
// 2381     if ( duration != 0xFF )
// 2382     {
// 2383       ZDSecMgrPermitJoiningTimed = TRUE;
// 2384     }
// 2385   }
// 2386   else
// 2387   {
// 2388     ZDSecMgrPermitJoiningEnabled = FALSE;
// 2389   }
// 2390 
// 2391   accept = TRUE;
// 2392 
// 2393   return accept;
// 2394 }
// 2395 
// 2396 /******************************************************************************
// 2397  * @fn          ZDSecMgrPermitJoiningTimeout
// 2398  *
// 2399  * @brief       Process permit joining timeout
// 2400  *
// 2401  * @param       none
// 2402  *
// 2403  * @return      none
// 2404  */
// 2405 void ZDSecMgrPermitJoiningTimeout( void )
// 2406 {
// 2407   if ( ZDSecMgrPermitJoiningTimed == TRUE )
// 2408   {
// 2409     ZDSecMgrPermitJoiningEnabled = FALSE;
// 2410     ZDSecMgrPermitJoiningTimed   = FALSE;
// 2411   }
// 2412 }
// 2413 
// 2414 /******************************************************************************
// 2415  * @fn          ZDSecMgrNewDeviceEvent
// 2416  *
// 2417  * @brief       Process a the new device event, if found reset new device
// 2418  *              event/timer.
// 2419  *
// 2420  * @param       none
// 2421  *
// 2422  * @return      uint8 - found(TRUE:FALSE)
// 2423  */
// 2424 uint8 ZDSecMgrNewDeviceEvent( void )
// 2425 {
// 2426   uint8                 found;
// 2427   ZDSecMgrDevice_t      device;
// 2428   AddrMgrEntry_t        addrEntry;
// 2429   associated_devices_t* assoc;
// 2430   ZStatus_t             status;
// 2431 
// 2432   // initialize return results
// 2433   found = FALSE;
// 2434 
// 2435   // look for device in the security init state
// 2436   assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
// 2437 
// 2438   if ( assoc != NULL )
// 2439   {
// 2440     // device found
// 2441     found = TRUE;
// 2442 
// 2443     // check for preconfigured security
// 2444     if ( zgPreConfigKeys == TRUE )
// 2445     {
// 2446       // set association status to authenticated
// 2447       ZDSecMgrAssocDeviceAuth( assoc );
// 2448     }
// 2449 
// 2450     // set up device info
// 2451     addrEntry.user  = ADDRMGR_USER_DEFAULT;
// 2452     addrEntry.index = assoc->addrIdx;
// 2453     AddrMgrEntryGet( &addrEntry );
// 2454 
// 2455     device.nwkAddr    = assoc->shortAddr;
// 2456     device.extAddr    = addrEntry.extAddr;
// 2457     device.parentAddr = NLME_GetShortAddr();
// 2458     device.secure     = FALSE;
// 2459     device.devStatus  = assoc->devStatus;
// 2460 
// 2461     // process new device
// 2462     status = ZDSecMgrDeviceNew( &device );
// 2463 
// 2464     if ( status == ZSuccess )
// 2465     {
// 2466       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
// 2467     }
// 2468     else if ( status == ZNwkUnknownDevice )
// 2469     {
// 2470       AssocRemove( addrEntry.extAddr );
// 2471     }
// 2472   }
// 2473 
// 2474   return found;
// 2475 }
// 2476 
// 2477 /******************************************************************************
// 2478  * @fn          ZDSecMgrEvent
// 2479  *
// 2480  * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
// 2481  *
// 2482  * @param       none
// 2483  *
// 2484  * @return      none
// 2485  */
// 2486 void ZDSecMgrEvent( void )
// 2487 {
// 2488   uint8            action;
// 2489   uint8            restart;
// 2490   uint16           index;
// 2491   AddrMgrEntry_t   entry;
// 2492   ZDSecMgrDevice_t device;
// 2493 
// 2494 
// 2495   // verify data is available
// 2496   if ( ZDSecMgrCtrlData != NULL )
// 2497   {
// 2498     action  = FALSE;
// 2499     restart = FALSE;
// 2500 
// 2501     // update all the counters
// 2502     for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
// 2503     {
// 2504       if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
// 2505       {
// 2506         if ( ZDSecMgrCtrlData[index].cntr != 0 )
// 2507         {
// 2508           ZDSecMgrCtrlData[index].cntr--;
// 2509         }
// 2510 
// 2511         if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
// 2512         {
// 2513           action = TRUE;
// 2514 
// 2515           // update from control data
// 2516           device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
// 2517           device.secure     = ZDSecMgrCtrlData[index].secure;
// 2518           device.ctrl       = &ZDSecMgrCtrlData[index];
// 2519 
// 2520           // set the user and address index
// 2521           entry.user  = ADDRMGR_USER_SECURITY;
// 2522           entry.index = ZDSecMgrCtrlData[index].entry->ami;
// 2523 
// 2524           // get the address data
// 2525           AddrMgrEntryGet( &entry );
// 2526 
// 2527           // set device address data
// 2528           device.nwkAddr = entry.nwkAddr;
// 2529           device.extAddr = entry.extAddr;
// 2530 
// 2531           // update from entry data
// 2532           ZDSecMgrDeviceCtrlHandler( &device );
// 2533         }
// 2534         else
// 2535         {
// 2536           restart = TRUE;
// 2537         }
// 2538       }
// 2539     }
// 2540 
// 2541     // check for timer restart
// 2542     if ( restart == TRUE )
// 2543     {
// 2544       osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
// 2545     }
// 2546   }
// 2547 }
// 2548 
// 2549 /******************************************************************************
// 2550  * @fn          ZDSecMgrEstablishKeyCfm
// 2551  *
// 2552  * @brief       Process the ZDO_EstablishKeyCfm_t message.
// 2553  *
// 2554  * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
// 2555  *
// 2556  * @return      none
// 2557  */
// 2558 void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
// 2559 {
// 2560   // send the NWK key
// 2561   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2562   {
// 2563     // update control for specified EXT address
// 2564     ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
// 2565   }
// 2566   else
// 2567   {
// 2568     // this should be done when receiving the NWK key
// 2569     // if devState ==
// 2570     //if ( devState == DEV_END_DEVICE_UNAUTH )
// 2571         //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2572 
// 2573     // if not in joining state -- this should trigger an event for an
// 2574     // end point that requested SKKE
// 2575     // if ( devState == DEV_END_DEVICE )
// 2576    //       devState == DEV_ROUTER;
// 2577 
// 2578   }
// 2579 }
// 2580 
// 2581 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
// 2582 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
// 2583 {
// 2584   uint8  match;
// 2585   uint8  lookup[Z_EXTADDR_LEN];
// 2586 
// 2587   match = FALSE;
// 2588 
// 2589   if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
// 2590   {
// 2591     match = AddrMgrExtAddrEqual( lookup, extAddr );
// 2592   }
// 2593 
// 2594   return match;
// 2595 }
// 2596 
// 2597 void ZDSecMgrTCDataLoad( uint8* extAddr );
// 2598 void ZDSecMgrTCDataLoad( uint8* extAddr )
// 2599 {
// 2600   uint16 ami;
// 2601   uint8* key;
// 2602 
// 2603   if ( !ZDSecMgrTCDataLoaded )
// 2604   {
// 2605     if ( ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami ) == ZSuccess )
// 2606     {
// 2607       // if preconfigured load key
// 2608       if ( zgPreConfigKeys == TRUE )
// 2609       {
// 2610         if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 2611         {
// 2612           ZDSecMgrMasterKeyStore( ami, ZDSecMgrTCMasterKey );
// 2613         }
// 2614       }
// 2615     }
// 2616 
// 2617     ZDSecMgrTCDataLoaded = TRUE;
// 2618   }
// 2619 }
// 2620 
// 2621 /******************************************************************************
// 2622  * @fn          ZDSecMgrEstablishKeyInd
// 2623  *
// 2624  * @brief       Process the ZDO_EstablishKeyInd_t message.
// 2625  *
// 2626  * @param       ind - [in] ZDO_EstablishKeyInd_t indication
// 2627  *
// 2628  * @return      none
// 2629  */
// 2630 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2631 {
// 2632   ZDSecMgrDevice_t        device;
// 2633   APSME_EstablishKeyRsp_t rsp;
// 2634 
// 2635 
// 2636   // load Trust Center data if needed
// 2637   ZDSecMgrTCDataLoad( ind->initExtAddr );
// 2638 
// 2639   if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
// 2640   {
// 2641     //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
// 2642     //OR
// 2643     //!ZDSecMgrTCAuthenticated
// 2644     //devtag.0604.critical
// 2645         //how is the parentAddr used here
// 2646 
// 2647     // initial SKKE from Trust Center via parent
// 2648     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2649     device.parentAddr = ind->srcAddr;
// 2650   }
// 2651   else
// 2652   {
// 2653     // Trust Center direct or E2E SKKE
// 2654     device.nwkAddr    = ind->srcAddr;
// 2655     device.parentAddr = INVALID_NODE_ADDR;
// 2656   }
// 2657 
// 2658   device.extAddr = ind->initExtAddr;
// 2659   //devtag.pro.security.0724.todo - verify usage
// 2660   device.secure  = ind->nwkSecure;
// 2661 
// 2662   // validate device for SKKE
// 2663   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2664   {
// 2665     rsp.accept = TRUE;
// 2666   }
// 2667   else
// 2668   {
// 2669     rsp.accept = FALSE;
// 2670   }
// 2671 
// 2672   rsp.dstAddr     = ind->srcAddr;
// 2673   rsp.initExtAddr = &ind->initExtAddr[0];
// 2674   //devtag.0604.todo - remove obsolete
// 2675   rsp.apsSecure   = ind->apsSecure;
// 2676   rsp.nwkSecure   = ind->nwkSecure;
// 2677 
// 2678   APSME_EstablishKeyRsp( &rsp );
// 2679 }
// 2680 //devtag.pro.security
// 2681 #if 0
// 2682 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2683 {
// 2684   ZDSecMgrDevice_t        device;
// 2685   APSME_EstablishKeyRsp_t rsp;
// 2686 
// 2687 
// 2688   device.extAddr = ind->initExtAddr;
// 2689   device.secure  = ind->secure;
// 2690 
// 2691   if ( ind->secure == FALSE )
// 2692   {
// 2693     // SKKE from Trust Center is not secured between child and parent
// 2694     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2695     device.parentAddr = ind->srcAddr;
// 2696   }
// 2697   else
// 2698   {
// 2699     // SKKE from initiator should be secured
// 2700     device.nwkAddr    = ind->srcAddr;
// 2701     device.parentAddr = INVALID_NODE_ADDR;
// 2702   }
// 2703 
// 2704   rsp.dstAddr     = ind->srcAddr;
// 2705   rsp.initExtAddr = &ind->initExtAddr[0];
// 2706   rsp.secure      = ind->secure;
// 2707 
// 2708   // validate device for SKKE
// 2709   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2710   {
// 2711     rsp.accept = TRUE;
// 2712   }
// 2713   else
// 2714   {
// 2715     rsp.accept = FALSE;
// 2716   }
// 2717 
// 2718   APSME_EstablishKeyRsp( &rsp );
// 2719 }
// 2720 #endif
// 2721 
// 2722 /******************************************************************************
// 2723  * @fn          ZDSecMgrTransportKeyInd
// 2724  *
// 2725  * @brief       Process the ZDO_TransportKeyInd_t message.
// 2726  *
// 2727  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 2728  *
// 2729  * @return      none
// 2730  */
// 2731 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
// 2732 {
// 2733   uint8 index;
// 2734 
// 2735   // load Trust Center data if needed
// 2736   ZDSecMgrTCDataLoad( ind->srcExtAddr );
// 2737 
// 2738   if ( ind->keyType == KEY_TYPE_TC_MASTER )
// 2739   {
// 2740     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2741     //ZDSecMgrTCMasterKey( ind );
// 2742     {
// 2743       if ( zgPreConfigKeys != TRUE )
// 2744       {
// 2745         // devtag.pro.security.todo - check if Trust Center address is configured and correct
// 2746         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2747       }
// 2748       else
// 2749       {
// 2750         // error condition - reject key
// 2751       }
// 2752     }
// 2753   }
// 2754   else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 2755             ( ind->keyType == 6                 ) ||
// 2756             ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
// 2757   {
// 2758     // check for dummy NWK key (all zeros)
// 2759     for ( index = 0;
// 2760           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 2761           index++ );
// 2762 
// 2763     if ( index == SEC_KEY_LEN )
// 2764     {
// 2765       // load preconfigured key - once!!
// 2766       if ( !_NIB.nwkKeyLoaded )
// 2767       {
// 2768         SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
// 2769         SSP_SwitchNwkKey( 0 );
// 2770       }
// 2771     }
// 2772     else
// 2773     {
// 2774       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
// 2775       if ( !_NIB.nwkKeyLoaded )
// 2776       {
// 2777         SSP_SwitchNwkKey( ind->keySeqNum );
// 2778       }
// 2779     }
// 2780 
// 2781     // handle next step in authentication process
// 2782     ZDSecMgrAuthNwkKey();
// 2783   }
// 2784   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2785   {
// 2786     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2787     {
// 2788       //ZDSecMgrTCLinkKey( ind );
// 2789     }
// 2790   }
// 2791   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2792   {
// 2793     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2794     {
// 2795       uint16           ami;
// 2796       AddrMgrEntry_t   entry;
// 2797       ZDSecMgrEntry_t* entryZD;
// 2798 
// 2799       ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
// 2800 
// 2801       if ( ind->initiator == TRUE )
// 2802       {
// 2803         // get the ami data
// 2804         entry.user  = ADDRMGR_USER_SECURITY;
// 2805         entry.index = ami;
// 2806         AddrMgrEntryGet( &entry );
// 2807 
// 2808         if ( entry.nwkAddr != INVALID_NODE_ADDR )
// 2809         {
// 2810           APSME_EstablishKeyReq_t req;
// 2811           ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2812 
// 2813           ZDSecMgrEntryLookupAMI( ami, &entryZD );
// 2814 
// 2815           if ( entryZD == NULL )
// 2816           {
// 2817             // get new entry
// 2818             if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
// 2819             {
// 2820               // finish setting up entry
// 2821               entryZD->ami = ami;
// 2822             }
// 2823           }
// 2824 
// 2825           req.respExtAddr = ind->srcExtAddr;
// 2826           req.method      = APSME_SKKE_METHOD;
// 2827           req.dstAddr     = entry.nwkAddr;
// 2828           //devtag.0604.todo - remove obsolete
// 2829           req.apsSecure   = FALSE;
// 2830           req.nwkSecure   = TRUE;
// 2831           APSME_EstablishKeyReq( &req );
// 2832         }
// 2833       }
// 2834       else
// 2835       {
// 2836         if ( ami == INVALID_NODE_ADDR )
// 2837         {
// 2838           // store new EXT address
// 2839           ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2840         }
// 2841 
// 2842         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2843       }
// 2844 
// 2845       //if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 2846       //{
// 2847       //  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2848       //}
// 2849     }
// 2850   }
// 2851   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 2852   {
// 2853     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2854     {
// 2855       uint16           ami;
// 2856       ZDSecMgrEntry_t* entry;
// 2857 
// 2858       // get the address index
// 2859       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 2860       {
// 2861         // store new EXT address
// 2862         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2863         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2864       }
// 2865 
// 2866       ZDSecMgrEntryLookupAMI( ami, &entry );
// 2867 
// 2868       if ( entry == NULL )
// 2869       {
// 2870         // get new entry
// 2871         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 2872         {
// 2873           // finish setting up entry
// 2874           entry->ami = ami;
// 2875         }
// 2876       }
// 2877 
// 2878       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 2879     }
// 2880   }
// 2881 }
// 2882 
// 2883 /******************************************************************************
// 2884  * @fn          ZDSecMgrUpdateDeviceInd
// 2885  *
// 2886  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 2887  *
// 2888  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 2889  *
// 2890  * @return      none
// 2891  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xa
        CFI EndBlock cfiBlock110
        REQUIRE ??Subroutine81_0
        ; // Fall through to label ??Subroutine81_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine81_0:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        CFI Valid
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock111

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlReset:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function ZDSecMgrCtrlReset
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_79:
        JNZ     ??ZDSecMgrCtrlReset_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlReset_0:
        JZ      ??ZDSecMgrCtrlReset_1
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlReset_2
??ZDSecMgrCtrlReset_1:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlAdd?relay
??ZDSecMgrCtrlReset_2:
        LJMP    ??Subroutine97_0 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        LCALL   ??ZDSecMgrCtrlLookup?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyLoad:
        CFI Block cfiBlock117 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLoad
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??ZDSecMgrMasterKeyLoad_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_25:
        JNZ     ??ZDSecMgrMasterKeyLoad_1
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??ZDSecMgrMasterKeyLoad_0
??ZDSecMgrMasterKeyLoad_1:
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrMasterKeyLoad_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock117

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyGet:
        CFI Block cfiBlock118 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyGet
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_211:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyReq:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyReq
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_139:
        LCALL   ??APSME_LookupExtAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_169:
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_170:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_171:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_198:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine98_0 & 0xFFFF
        CFI EndBlock cfiBlock122

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKey:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKey
        FUNCALL ZDSecMgrEstablishKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKey, APSME_EstablishKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_208:
        MOV     A,R2
        XRL     A,R0
        JNZ     ??ZDSecMgrEstablishKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrEstablishKey_0:
        JNZ     ??ZDSecMgrEstablishKey_1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_212:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrEstablishKey_2
??ZDSecMgrEstablishKey_1:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrEstablishKey_2:
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_153:
        LCALL   ??APSME_EstablishKeyReq?relay
        MOV     A,#0x7
        LJMP    ??Subroutine98_0 & 0xFFFF
        CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond126) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond126) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond126) CFA_SP SP+-5
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_225:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine82_0
        ; // Fall through to label ??Subroutine82_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine82_0:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_204:
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendMasterKey:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function ZDSecMgrSendMasterKey
        FUNCALL ZDSecMgrSendMasterKey, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_173:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_54:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_209:
        MOV     A,R2
        XRL     A,R0
        JNZ     ??ZDSecMgrSendMasterKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendMasterKey_0:
        JZ      ??ZDSecMgrSendMasterKey_1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_196:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrSendMasterKey_2
??ZDSecMgrSendMasterKey_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_213:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_197:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrSendMasterKey_2:
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_154:
        LCALL   ??APSME_TransportKeyReq?relay
        LJMP    ?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock135

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendNwkKey:
        CFI Block cfiBlock136 Using cfiCommon0
        CFI Function ZDSecMgrSendNwkKey
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine84_0 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     A,R0
        XRL     A,R2
        JNZ     ??ZDSecMgrSendNwkKey_0
        MOV     A,R1
        XRL     A,R3
??ZDSecMgrSendNwkKey_0:
        JZ      ??CrossCallReturnLabel_194
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_194:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_1
        MOV     DPTR,#(_NIB + 62)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#((_NIB + 63) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((_NIB + 63) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_2:
        JNZ     ??ZDSecMgrSendNwkKey_3
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_4
??ZDSecMgrSendNwkKey_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_4:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
??ZDSecMgrSendNwkKey_3:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,#0xd
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_228:
        MOV     A,#0x6
        RET
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryRemove:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryRemove
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock140

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddrMgrUpdate:
        CFI Block cfiBlock141 Using cfiCommon0
        CFI Function ZDSecMgrAddrMgrUpdate
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_152:
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrAddrMgrUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrAddrMgrUpdate_0:
        JZ      ??ZDSecMgrAddrMgrUpdate_1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_155:
        LCALL   ??AddrMgrEntryUpdate?relay
??ZDSecMgrAddrMgrUpdate_1:
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock141

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryAdd:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryAdd
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 0,#-0x38
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_134:
        LCALL   ??ZDSecMgrEntryLookup?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_0
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_38:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceEntryAdd_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrDeviceEntryAdd_1:
        JZ      ??ZDSecMgrDeviceEntryAdd_2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_2
??ZDSecMgrDeviceEntryAdd_3:
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_30:
        SJMP    ??ZDSecMgrDeviceEntryAdd_2
??ZDSecMgrDeviceEntryAdd_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceEntryAdd_3
??ZDSecMgrDeviceEntryAdd_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceEntryAdd_4
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceEntryAdd_4:
        JNZ     ??CrossCallReturnLabel_31
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     ?V0 + 0,#0x0
??ZDSecMgrDeviceEntryAdd_5:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL   ??ZDSecMgrAddrMgrUpdate?relay
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_164:
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlHandler:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlHandler
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendMasterKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrEstablishKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_122:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for ZDSecMgrDeviceCtrlHandler>_0`:
        DATA
        DB        2
        DB        5
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_1
        DW        ??ZDSecMgrDeviceCtrlHandler_2
        DW        ??ZDSecMgrDeviceCtrlHandler_3
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_4
        CODE
??ZDSecMgrDeviceCtrlHandler_1:
        ; Setup parameters for call to function ZDSecMgrSendMasterKey
        LCALL   ??ZDSecMgrSendMasterKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
        MOV     ?V0 + 0,#0x3
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
??ZDSecMgrDeviceCtrlHandler_2:
        ; Setup parameters for call to function ZDSecMgrEstablishKey
        LCALL   ??ZDSecMgrEstablishKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
        MOV     ?V0 + 0,#0x4
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
??ZDSecMgrDeviceCtrlHandler_3:
        MOV     A,?V0 + 0
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
??ZDSecMgrDeviceCtrlHandler_5:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_123:
        MOV     A,?V0 + 0
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??CrossCallReturnLabel_29
??ZDSecMgrDeviceCtrlHandler_4:
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
??ZDSecMgrDeviceCtrlHandler_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_29:
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152
        REQUIRE ??Subroutine83_0
        ; // Fall through to label ??Subroutine83_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine83_0:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_121
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker156 Using cfiCommon1
        CFI (cfiPicker156) NoFunction
        CFI (cfiPicker156) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_125:
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_123
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_121
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_28
        CFI (cfiCond160) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond160) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond160) CFA_SP SP+-5
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_29
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker162 Using cfiCommon1
        CFI (cfiPicker162) NoFunction
        CFI (cfiPicker162) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_127:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiPicker162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_124:
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond166 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker168 Using cfiCommon1
        CFI (cfiPicker168) NoFunction
        CFI (cfiPicker168) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlSetup:
        CFI Block cfiBlock169 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlSetup
        FUNCALL ZDSecMgrDeviceCtrlSetup, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine102_0 & 0xFFFF
??CrossCallReturnLabel_222:
        MOV     A,R0
        JNZ     ??ZDSecMgrDeviceCtrlSetup_0
        MOV     A,R1
??ZDSecMgrDeviceCtrlSetup_0:
        JZ      ??ZDSecMgrDeviceCtrlSetup_1
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlSetup_2
        MOV     A,#0x2
        SJMP    ??ZDSecMgrDeviceCtrlSetup_3
??ZDSecMgrDeviceCtrlSetup_2:
        MOV     A,#0x3
??ZDSecMgrDeviceCtrlSetup_3:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
??ZDSecMgrDeviceCtrlSetup_1:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock169

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceCtrlUpdate:
        CFI Block cfiBlock170 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlUpdate
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_0:
        JZ      ??ZDSecMgrDeviceCtrlUpdate_1
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_135:
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_80:
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_2:
        JZ      ??ZDSecMgrDeviceCtrlUpdate_1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_96:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
        MOV     A,#0x5
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_3
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceCtrlUpdate_4
??ZDSecMgrDeviceCtrlUpdate_3:
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
        MOV     A,#0x6
??ZDSecMgrDeviceCtrlUpdate_4:
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_165:
        LCALL   ??Subroutine83_0 & 0xFFFF
??CrossCallReturnLabel_121:
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock170
??ZDSecMgrDeviceCtrlUpdate_1:
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock171 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_14
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_151
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_152
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_153
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_154
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_155
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_156
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_157
        CFI (cfiCond181) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond181) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond181) CFA_SP SP+-5
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_158
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_159
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_160
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_161
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_0
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_1
        CFI (cfiCond187) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond187) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond187) CFA_SP SP+-5
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_2
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_3
        CFI (cfiCond189) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond189) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond189) CFA_SP SP+-5
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_4
        CFI (cfiCond190) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond190) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond190) CFA_SP SP+-5
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrEntryLookup
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function APSME_EstablishKeyReq
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function APSME_EstablishKeyRsp
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_SKA_TimerExpired:
        CFI Block cfiBlock192 Using cfiCommon0
        CFI Function APSME_SKA_TimerExpired
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock192

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceRemove:
        CFI Block cfiBlock193 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemove
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_214:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,?V0 + 0
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceRemove_0
        MOV     A,?V0 + 1
        XRL     A,R7
??ZDSecMgrDeviceRemove_0:
        JNZ     ??ZDSecMgrDeviceRemove_1
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_2
        MOV     A,R1
??ZDSecMgrDeviceRemove_2:
        JZ      ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceRemove_5
??ZDSecMgrDeviceRemove_4:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceRemove_5:
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_156:
        LCALL   ??NLME_LeaveReq?relay
        SJMP    ??ZDSecMgrDeviceRemove_3
??ZDSecMgrDeviceRemove_1:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine82_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_RemoveDeviceReq?relay
??ZDSecMgrDeviceRemove_3:
        MOV     A,#0x9
        LJMP    ??Subroutine98_0 & 0xFFFF
        CFI EndBlock cfiBlock193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond194 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_128
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196
        REQUIRE ??Subroutine84_0
        ; // Fall through to label ??Subroutine84_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine84_0:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_130
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateSKKE:
        CFI Block cfiBlock201 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateSKKE
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_32
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_26:
        JNZ     ??CrossCallReturnLabel_32
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_32:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock201

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond202 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker205 Using cfiCommon1
        CFI (cfiPicker205) NoFunction
        CFI (cfiPicker205) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiPicker205
        REQUIRE ??Subroutine85_0
        ; // Fall through to label ??Subroutine85_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine85_0:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_131
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_145:
        RET
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond218 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_140
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_141
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_131
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_132
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_133
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_134
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_135
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_136
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_137
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_138
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_52
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_53
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_56
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_57
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_48
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_49
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker235 Using cfiCommon1
        CFI (cfiPicker235) NoFunction
        CFI (cfiPicker235) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiPicker235

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond236 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker239 Using cfiCommon1
        CFI (cfiPicker239) NoFunction
        CFI (cfiPicker239) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     A,R1
        RET
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiPicker239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock240 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock240
        REQUIRE ??Subroutine86_0
        ; // Fall through to label ??Subroutine86_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine86_0:
        CFI Block cfiBlock241 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock241
        REQUIRE ??Subroutine87_0
        ; // Fall through to label ??Subroutine87_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine87_0:
        CFI Block cfiBlock242 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock242
        REQUIRE ??Subroutine88_0
        ; // Fall through to label ??Subroutine88_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine88_0:
        CFI Block cfiBlock243 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock243

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateRM:
        CFI Block cfiBlock244 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateRM
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     R1,#0x0
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
        MOV     R1,#-0x38
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock244

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidateCM:
        CFI Block cfiBlock245 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateCM
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrMasterKeyLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x2
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_140:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     ?V0 + 2,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_137:
        LCALL   ??ZDSecMgrMasterKeyLoad?relay
        MOV     A,?V0 + 2
        JNZ     ??ZDSecMgrDeviceValidateCM_0
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrDeviceValidateCM_0:
        MOV     R1,?V0 + 2
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock245

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond246 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker248 Using cfiCommon1
        CFI (cfiPicker248) NoFunction
        CFI (cfiPicker248) Picker
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiPicker248

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond249 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker251 Using cfiCommon1
        CFI (cfiPicker251) NoFunction
        CFI (cfiPicker251) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL   ??ZDSecMgrDeviceEntryAdd?relay
        RET
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiPicker251

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond252 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_31
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_32
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_33
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker256 Using cfiCommon1
        CFI (cfiPicker256) NoFunction
        CFI (cfiPicker256) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceValidate:
        CFI Block cfiBlock257 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidate
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_1
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceValidate_2
??ZDSecMgrDeviceValidate_1:
        CLR     A
??ZDSecMgrDeviceValidate_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   ??ZDSecMgrDeviceValidateRM?relay
        SJMP    ??ZDSecMgrDeviceValidate_3
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
??ZDSecMgrDeviceValidate_3:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock257

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoin:
        CFI Block cfiBlock258 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoin
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   ??ZDSecMgrDeviceValidate?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??ZDSecMgrDeviceJoin_0
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        SJMP    ??ZDSecMgrDeviceJoin_1
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemove?relay
        CFI EndBlock cfiBlock258
??ZDSecMgrDeviceJoin_1:
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiBlock259 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock259

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoinDirect:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinDirect
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   ??ZDSecMgrDeviceJoin?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_141:
        LCALL   ??AssocGetWithShort?relay
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??ZDSecMgrDeviceJoinDirect_0:
        SJMP    ?Subroutine10
        CFI EndBlock cfiBlock260

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceJoinFwd:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinFwd
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_174:
        MOV     A,R2
        ADD     A,#0x7
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_148:
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_157:
        LCALL   ??APSME_UpdateDeviceReq?relay
        MOV     A,#0x8
        LJMP    ??Subroutine81_0 & 0xFFFF
        CFI EndBlock cfiBlock261

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond262 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_12
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond265) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond265) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond265) CFA_SP SP+-5
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_5
        CFI (cfiCond266) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond266) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond266) CFA_SP SP+-5
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_6
        CFI (cfiCond267) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond267) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond267) CFA_SP SP+-5
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker268 Using cfiCommon1
        CFI (cfiPicker268) NoFunction
        CFI (cfiPicker268) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond269 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_148
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond271) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond271) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond271) CFA_SP SP+-5
        CFI Block cfiPicker272 Using cfiCommon1
        CFI (cfiPicker272) NoFunction
        CFI (cfiPicker272) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiPicker272
        REQUIRE ??Subroutine89_0
        ; // Fall through to label ??Subroutine89_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine89_0:
        CFI Block cfiCond273 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_146
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond275) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond275) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond275) CFA_SP SP+-5
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond277) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond277) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond277) CFA_SP SP+-5
        CFI Block cfiPicker278 Using cfiCommon1
        CFI (cfiPicker278) NoFunction
        CFI (cfiPicker278) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiPicker278

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceNew:
        CFI Block cfiBlock279 Using cfiCommon0
        CFI Function ZDSecMgrDeviceNew
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinFwd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
        LCALL   ??ZDSecMgrDeviceJoinFwd?relay
        SJMP    ??Subroutine91_0
        CFI EndBlock cfiBlock279

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAssocDeviceAuth:
        CFI Block cfiBlock280 Using cfiCommon0
        CFI Function ZDSecMgrAssocDeviceAuth
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        JNZ     ??ZDSecMgrAssocDeviceAuth_0
        MOV     A,R3
??ZDSecMgrAssocDeviceAuth_0:
        JZ      ??ZDSecMgrAssocDeviceAuth_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
??ZDSecMgrAssocDeviceAuth_1:
        SJMP    ??Subroutine91_0
        CFI EndBlock cfiBlock280

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock281 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        CFI EndBlock cfiBlock281
        REQUIRE ??Subroutine90_0
        ; // Fall through to label ??Subroutine90_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine90_0:
        CFI Block cfiBlock282 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock282
        REQUIRE ??Subroutine91_0
        ; // Fall through to label ??Subroutine91_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine91_0:
        CFI Block cfiBlock283 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock283

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthInitiate:
        CFI Block cfiBlock284 Using cfiCommon0
        CFI Function ZDSecMgrAuthInitiate
        FUNCALL ZDSecMgrAuthInitiate, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthInitiate, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        JZ      ??ZDSecMgrAuthInitiate_0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_158:
        LCALL   ??APSME_AuthenticateReq?relay
??ZDSecMgrAuthInitiate_0:
        MOV     A,#0x7
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock284

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond285 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_151
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker287 Using cfiCommon1
        CFI (cfiPicker287) NoFunction
        CFI (cfiPicker287) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiPicker287
        REQUIRE ??Subroutine92_0
        ; // Fall through to label ??Subroutine92_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine92_0:
        CFI Block cfiCond288 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_153
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond291) CFA_SP SP+0
        CFI (cfiCond291) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond292) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond292) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond292) CFA_SP SP+-5
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_159
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker299 Using cfiCommon1
        CFI (cfiPicker299) NoFunction
        CFI (cfiPicker299) Picker
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_162:
        RET
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthNwkKey:
        CFI Block cfiBlock300 Using cfiCommon0
        CFI Function ZDSecMgrAuthNwkKey
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine91_0
        CFI EndBlock cfiBlock300

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrInit:
        FUNCALL ZDSecMgrInit, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock301 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        LCALL   ??APSME_SecurityNM?relay
        SJMP    ??Subroutine91_0
        CFI EndBlock cfiBlock301

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrConfig:
        CFI Block cfiBlock302 Using cfiCommon0
        CFI Function ZDSecMgrConfig
        FUNCALL ZDSecMgrConfig, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock302

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrPermitJoining:
        CFI Block cfiBlock303 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoining
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
        MOV     A,R2
        JZ      ??ZDSecMgrPermitJoining_0
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??ZDSecMgrPermitJoining_1
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        SJMP    ??ZDSecMgrPermitJoining_2
??ZDSecMgrPermitJoining_0:
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock303

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrPermitJoiningTimeout:
        CFI Block cfiBlock304 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoiningTimeout
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
??ZDSecMgrPermitJoiningTimeout_0:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock304

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrNewDeviceEvent:
        CFI Block cfiBlock305 Using cfiCommon0
        CFI Function ZDSecMgrNewDeviceEvent
        FUNCALL ZDSecMgrNewDeviceEvent, AssocMatchDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AssocMatchDeviceStatus
        MOV     R1,#0x4
        LCALL   ??AssocMatchDeviceStatus?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        JNZ     ??ZDSecMgrNewDeviceEvent_0
        MOV     A,R7
??ZDSecMgrNewDeviceEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_1 & 0xFFFF
        MOV     ?V0 + 0,#0x1
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_2
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_221:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_199:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_181:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_175:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine95_0 & 0xFFFF
??CrossCallReturnLabel_190:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x5
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_159:
        LCALL   ??ZDSecMgrDeviceNew?relay
        MOV     A,R1
        MOV     R2,A
        JNZ     ??ZDSecMgrNewDeviceEvent_3
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_1
??ZDSecMgrNewDeviceEvent_3:
        MOV     A,#-0x38
        XRL     A,R2
        JNZ     ??ZDSecMgrNewDeviceEvent_1
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocRemove?relay
??ZDSecMgrNewDeviceEvent_1:
        MOV     R1,?V0 + 0
        MOV     A,#0x17
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock305

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond306 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_181
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond308) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond308) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond308) CFA_SP SP+-5
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker309 Using cfiCommon1
        CFI (cfiPicker309) NoFunction
        CFI (cfiPicker309) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
        CFI EndBlock cfiCond306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiPicker309
??CrossCallReturnLabel_224:
        REQUIRE ??Subroutine93_0
        ; // Fall through to label ??Subroutine93_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine93_0:
        CFI Block cfiCond310 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_180
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond311 Using cfiCommon0
        CFI (cfiCond311) NoFunction
        CFI (cfiCond311) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond311) CFA_SP SP+0
        CFI (cfiCond311) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond312 Using cfiCommon0
        CFI (cfiCond312) NoFunction
        CFI (cfiCond312) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond312) CFA_SP SP+0
        CFI (cfiCond312) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond313) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond313) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond313) CFA_SP SP+-5
        CFI (cfiCond313) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker314 Using cfiCommon1
        CFI (cfiPicker314) NoFunction
        CFI (cfiPicker314) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond310
        CFI EndBlock cfiCond311
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiPicker314
        REQUIRE ??Subroutine94_0
        ; // Fall through to label ??Subroutine94_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine94_0:
        CFI Block cfiCond315 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_167
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_168
        CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond316) CFA_SP SP+0
        CFI (cfiCond316) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond317 Using cfiCommon0
        CFI (cfiCond317) NoFunction
        CFI (cfiCond317) Conditional ??CrossCallReturnLabel_169
        CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond317) CFA_SP SP+0
        CFI (cfiCond317) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond318 Using cfiCommon0
        CFI (cfiCond318) NoFunction
        CFI (cfiCond318) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond318) CFA_SP SP+0
        CFI (cfiCond318) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond319) CFA_SP SP+0
        CFI (cfiCond319) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond320 Using cfiCommon0
        CFI (cfiCond320) NoFunction
        CFI (cfiCond320) Conditional ??CrossCallReturnLabel_172
        CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond320) CFA_SP SP+0
        CFI (cfiCond320) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond321 Using cfiCommon0
        CFI (cfiCond321) NoFunction
        CFI (cfiCond321) Conditional ??CrossCallReturnLabel_173
        CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond321) CFA_SP SP+0
        CFI (cfiCond321) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond322) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond322) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond322) CFA_SP SP+-5
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond323) CFA_SP SP+0
        CFI (cfiCond323) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond324 Using cfiCommon0
        CFI (cfiCond324) NoFunction
        CFI (cfiCond324) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond324) CFA_SP SP+0
        CFI (cfiCond324) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+0
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond328) CFA_SP SP+0
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond331) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond331) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond331) CFA_SP SP+-5
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker332 Using cfiCommon1
        CFI (cfiPicker332) NoFunction
        CFI (cfiPicker332) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_206:
        RET
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiCond317
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiCond320
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiPicker332

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond333 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_19
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+0
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_20
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_15
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond337 Using cfiCommon0
        CFI (cfiCond337) NoFunction
        CFI (cfiCond337) Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_16
        CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond337) CFA_SP SP+0
        CFI (cfiCond337) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond338 Using cfiCommon0
        CFI (cfiCond338) NoFunction
        CFI (cfiCond338) Conditional ??CrossCallReturnLabel_202, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_17
        CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond338) CFA_SP SP+0
        CFI (cfiCond338) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_109
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_110
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond341 Using cfiCommon0
        CFI (cfiCond341) NoFunction
        CFI (cfiCond341) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_111
        CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond341) CFA_SP SP+0
        CFI (cfiCond341) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond342 Using cfiCommon0
        CFI (cfiCond342) NoFunction
        CFI (cfiCond342) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_118
        CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond342) CFA_SP SP+0
        CFI (cfiCond342) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_119
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_120
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_128
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_129
        CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond346) CFA_SP SP+0
        CFI (cfiCond346) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_130
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond348 Using cfiCommon0
        CFI (cfiCond348) NoFunction
        CFI (cfiCond348) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_181
        CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond348) CFA_SP SP+0
        CFI (cfiCond348) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond349 Using cfiCommon0
        CFI (cfiCond349) NoFunction
        CFI (cfiCond349) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_182
        CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond349) CFA_SP SP+0
        CFI (cfiCond349) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_183
        CFI (cfiCond350) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond350) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond350) CFA_SP SP+-5
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_180
        CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond351) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond351) CFA_SP SP+0
        CFI (cfiCond351) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond352 Using cfiCommon0
        CFI (cfiCond352) NoFunction
        CFI (cfiCond352) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_167
        CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond352) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond352) CFA_SP SP+0
        CFI (cfiCond352) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_168
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_169
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_170
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_171
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_172
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_173
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_174
        CFI (cfiCond359) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond359) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond359) CFA_SP SP+-5
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_175
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_176
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_177
        CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond362) CFA_SP SP+0
        CFI (cfiCond362) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_178
        CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond363) CFA_SP SP+0
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_179
        CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond364) CFA_SP SP+0
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond365 Using cfiCommon0
        CFI (cfiCond365) NoFunction
        CFI (cfiCond365) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_196
        CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond365) CFA_SP SP+0
        CFI (cfiCond365) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond366 Using cfiCommon0
        CFI (cfiCond366) NoFunction
        CFI (cfiCond366) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_197
        CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond366) CFA_SP SP+0
        CFI (cfiCond366) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond367 Using cfiCommon0
        CFI (cfiCond367) NoFunction
        CFI (cfiCond367) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_198
        CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond367) CFA_SP SP+0
        CFI (cfiCond367) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_199
        CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond368) CFA_SP SP+0
        CFI (cfiCond368) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond369 Using cfiCommon0
        CFI (cfiCond369) NoFunction
        CFI (cfiCond369) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_200
        CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond369) CFA_SP SP+0
        CFI (cfiCond369) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_201
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker371 Using cfiCommon1
        CFI (cfiPicker371) NoFunction
        CFI (cfiPicker371) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiCond337
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiCond341
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiCond348
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiCond365
        CFI EndBlock cfiCond366
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiPicker371

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond372 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_194
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond373) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond373) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond373) CFA_SP SP+-5
        CFI (cfiCond373) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker374 Using cfiCommon1
        CFI (cfiPicker374) NoFunction
        CFI (cfiPicker374) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiPicker374
        REQUIRE ??Subroutine95_0
        ; // Fall through to label ??Subroutine95_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine95_0:
        CFI Block cfiCond375 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_184
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond378) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond378) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond378) CFA_SP SP+-5
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_188
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond380) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond380) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond380) CFA_SP SP+-5
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond382 Using cfiCommon0
        CFI (cfiCond382) NoFunction
        CFI (cfiCond382) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond382) CFA_SP SP+0
        CFI (cfiCond382) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond383 Using cfiCommon0
        CFI (cfiCond383) NoFunction
        CFI (cfiCond383) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond383) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond383) CFA_SP SP+0
        CFI (cfiCond383) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond384) CFA_SP SP+0
        CFI (cfiCond384) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond385) CFA_SP SP+0
        CFI (cfiCond385) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond386 Using cfiCommon0
        CFI (cfiCond386) NoFunction
        CFI (cfiCond386) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond386) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond386) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond386) CFA_SP SP+-5
        CFI (cfiCond386) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker387 Using cfiCommon1
        CFI (cfiPicker387) NoFunction
        CFI (cfiPicker387) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiCond382
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiCond386
        CFI EndBlock cfiPicker387

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEvent:
        CFI Block cfiBlock388 Using cfiCommon0
        CFI Function ZDSecMgrEvent
        FUNCALL ZDSecMgrEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 0,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEvent_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
        MOV     A,R2
        ADD     A,#0x6
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_149:
        JZ      ??ZDSecMgrEvent_4
        DEC     A
        MOVX    @DPTR,A
??ZDSecMgrEvent_4:
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_5
        MOV     ?V0 + 1,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_138:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine95_0 & 0xFFFF
??CrossCallReturnLabel_191:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_200:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_201:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_182:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
        SJMP    ??ZDSecMgrEvent_3
??ZDSecMgrEvent_5:
        MOV     ?V0 + 0,#0x1
??ZDSecMgrEvent_3:
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_67:
        JNC     $+5
        LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrEvent_1
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??ZDSecMgrEvent_1:
        MOV     A,#0x17
        SJMP    ??Subroutine98_0
        CFI EndBlock cfiBlock388

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond389 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond390 Using cfiCommon0
        CFI (cfiCond390) NoFunction
        CFI (cfiCond390) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond390) CFA_SP SP+0
        CFI (cfiCond390) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker391 Using cfiCommon1
        CFI (cfiPicker391) NoFunction
        CFI (cfiPicker391) Picker
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_94:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond389
        CFI EndBlock cfiCond390
        CFI EndBlock cfiPicker391

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond392 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_196
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond393) CFA_SP SP+0
        CFI (cfiCond393) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker394 Using cfiCommon1
        CFI (cfiPicker394) NoFunction
        CFI (cfiPicker394) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiPicker394
        REQUIRE ??Subroutine96_0
        ; // Fall through to label ??Subroutine96_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine96_0:
        CFI Block cfiCond395 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_199
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_200
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond400 Using cfiCommon0
        CFI (cfiCond400) NoFunction
        CFI (cfiCond400) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond400) CFA_SP SP+0
        CFI (cfiCond400) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker401 Using cfiCommon1
        CFI (cfiPicker401) NoFunction
        CFI (cfiPicker401) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_207:
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiCond400
        CFI EndBlock cfiPicker401
// 2892 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
// 2893 {
// 2894   ZDSecMgrDevice_t device;
// 2895 
// 2896 
// 2897   device.nwkAddr    = ind->devAddr;
// 2898   device.extAddr    = ind->devExtAddr;
// 2899   device.parentAddr = ind->srcAddr;
// 2900 
// 2901   //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
// 2902   //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
// 2903   //{
// 2904   //  if ( ind->status == APSME_UD_SECURED_JOIN )
// 2905   //  {
// 2906   //    device.secure = TRUE;
// 2907   //  }
// 2908   //  else
// 2909   //  {
// 2910   //    device.secure = FALSE;
// 2911   //  }
// 2912 
// 2913     // try to join this device
// 2914     ZDSecMgrDeviceJoin( &device );
// 2915   //}
// 2916 }
// 2917 
// 2918 /******************************************************************************
// 2919  * @fn          ZDSecMgrRemoveDeviceInd
// 2920  *
// 2921  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 2922  *
// 2923  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 2924  *
// 2925  * @return      none
// 2926  */
// 2927 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
// 2928 {
// 2929   ZDSecMgrDevice_t device;
// 2930 
// 2931 
// 2932   // only accept from Trust Center
// 2933   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 2934   {
// 2935     // look up NWK address
// 2936     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
// 2937     {
// 2938       device.parentAddr = NLME_GetShortAddr();
// 2939       device.extAddr    = ind->childExtAddr;
// 2940 
// 2941       // remove device
// 2942       ZDSecMgrDeviceRemove( &device );
// 2943     }
// 2944   }
// 2945 }
// 2946 
// 2947 /******************************************************************************
// 2948  * @fn          ZDSecMgrRequestKeyInd
// 2949  *
// 2950  * @brief       Process the ZDO_RequestKeyInd_t message.
// 2951  *
// 2952  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 2953  *
// 2954  * @return      none
// 2955  */
// 2956 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
// 2957 {
// 2958   if ( ind->keyType == KEY_TYPE_NWK )
// 2959   {
// 2960   }
// 2961   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2962   {
// 2963     ZDSecMgrAppKeyReq( ind );
// 2964   }
// 2965   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2966   {
// 2967   }
// 2968   //else ignore
// 2969 }
// 2970 
// 2971 /******************************************************************************
// 2972  * @fn          ZDSecMgrSwitchKeyInd
// 2973  *
// 2974  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 2975  *
// 2976  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 2977  *
// 2978  * @return      none
// 2979  */
// 2980 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
// 2981 {
// 2982   SSP_SwitchNwkKey( ind->keySeqNum );
// 2983 
// 2984   // Save if nv
// 2985   ZDApp_NVUpdate();
// 2986 }
// 2987 
// 2988 /******************************************************************************
// 2989  * @fn          ZDSecMgrAuthenticateInd
// 2990  *
// 2991  * @brief       Process the ZDO_AuthenticateInd_t message.
// 2992  *
// 2993  * @param       ind - [in] ZDO_AuthenticateInd_t indication
// 2994  *
// 2995  * @return      none
// 2996  */
// 2997 void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
// 2998 {
// 2999   APSME_AuthenticateReq_t req;
// 3000   AddrMgrEntry_t          entry;
// 3001 
// 3002 
// 3003   // update the address manager
// 3004   //---------------------------------------------------------------------------
// 3005   // note:
// 3006   // required for EA processing, but ultimately EA logic could also use the
// 3007   // neighbor table to look up addresses -- also(IF using EA) the neighbor
// 3008   // table is supposed to have authentication states for neighbors
// 3009   //---------------------------------------------------------------------------
// 3010   entry.user    = ADDRMGR_USER_SECURITY;
// 3011   entry.nwkAddr = ind->aps.initNwkAddr;
// 3012   AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
// 3013 
// 3014   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3015   {
// 3016     // set request fields
// 3017     req.nwkAddr   = ind->aps.initNwkAddr;
// 3018     req.extAddr   = ind->aps.initExtAddr;
// 3019     req.action    = APSME_EA_ACCEPT;
// 3020     req.challenge = ind->aps.challenge;
// 3021 
// 3022     // start EA processing
// 3023     APSME_AuthenticateReq( &req );
// 3024   }
// 3025 }
// 3026 
// 3027 /******************************************************************************
// 3028  * @fn          ZDSecMgrAuthenticateCfm
// 3029  *
// 3030  * @brief       Process the ZDO_AuthenticateCfm_t message.
// 3031  *
// 3032  * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
// 3033  *
// 3034  * @return      none
// 3035  */
// 3036 void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
// 3037 {
// 3038   if ( cfm->aps.status == ZSuccess )
// 3039   {
// 3040     if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
// 3041     {
// 3042       // inform ZDO that device has been authenticated
// 3043       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 3044     }
// 3045   }
// 3046 }
// 3047 
// 3048 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3049 /******************************************************************************
// 3050  * @fn          ZDSecMgrUpdateNwkKey
// 3051  *
// 3052  * @brief       Load a new NWK key and trigger a network wide update.
// 3053  *
// 3054  * @param       key       - [in] new NWK key
// 3055  * @param       keySeqNum - [in] new NWK key sequence number
// 3056  *
// 3057  * @return      ZStatus_t
// 3058  */
// 3059 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
// 3060 {
// 3061   ZStatus_t               status;
// 3062   APSME_TransportKeyReq_t req;
// 3063 
// 3064   // initialize common elements of local variables
// 3065   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3066     req.keyType   = KEY_TYPE_NWK_HIGH;
// 3067   else
// 3068     req.keyType   = KEY_TYPE_NWK;
// 3069 
// 3070   req.dstAddr   = dstAddr;
// 3071   req.keySeqNum = keySeqNum;
// 3072   req.key       = key;
// 3073   req.extAddr   = NULL;
// 3074   req.nwkSecure = TRUE;
// 3075   req.apsSecure = TRUE;
// 3076   req.tunnel    = NULL;
// 3077 
// 3078   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3079   {
// 3080     ZDSecMgrEntry_t*        entry;
// 3081     uint16                  index;
// 3082     AddrMgrEntry_t          addrEntry;
// 3083 
// 3084     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3085 
// 3086     status = ZFailure;
// 3087 
// 3088     // verify data is available
// 3089     if ( ZDSecMgrEntries != NULL )
// 3090     {
// 3091       // find available entry
// 3092       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3093       {
// 3094         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3095         {
// 3096           // return successful result
// 3097           entry = &ZDSecMgrEntries[index];
// 3098 
// 3099           // get NWK address
// 3100           addrEntry.index = entry->ami;
// 3101           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3102           {
// 3103             req.dstAddr = addrEntry.nwkAddr;
// 3104             req.extAddr = addrEntry.extAddr;
// 3105             status = APSME_TransportKeyReq( &req );
// 3106           }
// 3107         }
// 3108       }
// 3109     }
// 3110   }
// 3111   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3112   {
// 3113     status = APSME_TransportKeyReq( &req );
// 3114   }
// 3115 
// 3116   SSP_UpdateNwkKey( key, keySeqNum );
// 3117 
// 3118   // Save if nv
// 3119   ZDApp_NVUpdate();
// 3120 
// 3121   return status;
// 3122 }
// 3123 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3124 
// 3125 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3126 /******************************************************************************
// 3127  * @fn          ZDSecMgrSwitchNwkKey
// 3128  *
// 3129  * @brief       Causes the NWK key to switch via a network wide command.
// 3130  *
// 3131  * @param       keySeqNum - [in] new NWK key sequence number
// 3132  *
// 3133  * @return      ZStatus_t
// 3134  */
// 3135 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
// 3136 {
// 3137   ZStatus_t            status;
// 3138   APSME_SwitchKeyReq_t req;
// 3139 
// 3140   // initialize common elements of local variables
// 3141   req.dstAddr = dstAddr;
// 3142   req.keySeqNum = keySeqNum;
// 3143 
// 3144   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3145   {
// 3146     ZDSecMgrEntry_t*     entry;
// 3147     uint16               index;
// 3148     AddrMgrEntry_t       addrEntry;
// 3149 
// 3150     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3151 
// 3152     status = ZFailure;
// 3153 
// 3154     // verify data is available
// 3155     if ( ZDSecMgrEntries != NULL )
// 3156     {
// 3157       // find available entry
// 3158       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3159       {
// 3160         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3161         {
// 3162           // return successful result
// 3163           entry = &ZDSecMgrEntries[index];
// 3164 
// 3165           // get NWK address
// 3166           addrEntry.index = entry->ami;
// 3167 
// 3168           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3169           {
// 3170             req.dstAddr = addrEntry.nwkAddr;
// 3171             status = APSME_SwitchKeyReq( &req );
// 3172           }
// 3173         }
// 3174       }
// 3175     }
// 3176   }
// 3177   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3178   {
// 3179     status = APSME_SwitchKeyReq( &req );
// 3180   }
// 3181 
// 3182   SSP_SwitchNwkKey( keySeqNum );
// 3183 
// 3184   // Save if nv
// 3185   ZDApp_NVUpdate();
// 3186 
// 3187   return status;
// 3188 }
// 3189 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3190 
// 3191 #if ( ZG_BUILD_JOINING_TYPE )
// 3192 /******************************************************************************
// 3193  * @fn          ZDSecMgrRequestAppKey
// 3194  *
// 3195  * @brief       Request an application key with partner.
// 3196  *
// 3197  * @param       partNwkAddr - [in] partner network address
// 3198  *
// 3199  * @return      ZStatus_t
// 3200  */
// 3201 ZStatus_t ZDSecMgrRequestAppKey( uint16 partNwkAddr )
// 3202 {
// 3203   ZStatus_t             status;
// 3204   APSME_RequestKeyReq_t req;
// 3205   uint8                 partExtAddr[Z_EXTADDR_LEN];
// 3206 
// 3207 
// 3208   if ( AddrMgrExtAddrLookup( partNwkAddr, partExtAddr ) )
// 3209   {
// 3210     req.dstAddr = 0;
// 3211     req.keyType = KEY_TYPE_APP_MASTER;
// 3212     req.partExtAddr = partExtAddr;
// 3213     status = APSME_RequestKeyReq( &req );
// 3214   }
// 3215   else
// 3216   {
// 3217     status = ZFailure;
// 3218   }
// 3219 
// 3220   return status;
// 3221 }
// 3222 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3223 
// 3224 #if ( ZG_BUILD_JOINING_TYPE )
// 3225 /******************************************************************************
// 3226  * @fn          ZDSecMgrSetupPartner
// 3227  *
// 3228  * @brief       Setup for application key partner.
// 3229  *
// 3230  * @param       partNwkAddr - [in] partner network address
// 3231  *
// 3232  * @return      ZStatus_t
// 3233  */
// 3234 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 3235 {
// 3236   AddrMgrEntry_t entry;
// 3237   ZStatus_t      status;
// 3238 
// 3239   status = ZFailure;
// 3240 
// 3241   // update the address manager
// 3242   entry.user    = ADDRMGR_USER_SECURITY;
// 3243   entry.nwkAddr = partNwkAddr;
// 3244   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 3245 
// 3246   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3247   {
// 3248     status = ZSuccess;
// 3249 
// 3250     // check for address discovery
// 3251     if ( partNwkAddr == INVALID_NODE_ADDR )
// 3252     {
// 3253       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3254     }
// 3255     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 3256     {
// 3257       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3258     }
// 3259   }
// 3260 
// 3261   return status;
// 3262 }
// 3263 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3264 
// 3265 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3266 /******************************************************************************
// 3267  * @fn          ZDSecMgrAppKeyTypeSet
// 3268  *
// 3269  * @brief       Set application key type.
// 3270  *
// 3271  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 3272  *                                                   KEY_TYPE_APP_LINK@3
// 3273  *
// 3274  * @return      ZStatus_t
// 3275  */
// 3276 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
// 3277 {
// 3278   if ( keyType == KEY_TYPE_APP_LINK )
// 3279   {
// 3280     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
// 3281   }
// 3282   else
// 3283   {
// 3284     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
// 3285   }
// 3286 
// 3287   return ZSuccess;
// 3288 }
// 3289 #endif
// 3290 
// 3291 /******************************************************************************
// 3292  * ZigBee Device Security Manager - Stub Implementations
// 3293  */
// 3294 /******************************************************************************
// 3295  * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
// 3296  *
// 3297  * @brief       Get MASTER key for specified EXT address.
// 3298  *
// 3299  * @param       extAddr - [in] EXT address
// 3300  * @param       key     - [out] MASTER key
// 3301  *
// 3302  * @return      ZStatus_t
// 3303  */
// 3304 ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint8** key )
// 3305 {
// 3306   ZStatus_t status;
// 3307   uint16    ami;
// 3308 
// 3309 
// 3310   // lookup entry for specified EXT address
// 3311   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 3312   //status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3313 
// 3314   if ( status == ZSuccess )
// 3315   {
// 3316     ZDSecMgrMasterKeyLookup( ami, key );
// 3317   }
// 3318   else
// 3319   {
// 3320     *key = NULL;
// 3321   }
// 3322 
// 3323   return status;
// 3324 }
// 3325 
// 3326 /******************************************************************************
// 3327  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 3328  *
// 3329  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 3330  *
// 3331  * @param       extAddr - [in] EXT address
// 3332  * @param       data    - [in] APSME_LinkKeyData_t
// 3333  *
// 3334  * @return      ZStatus_t
// 3335  */
// 3336 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
// 3337 {
// 3338   ZStatus_t        status;
// 3339   ZDSecMgrEntry_t* entry;
// 3340 
// 3341 
// 3342   // lookup entry index for specified EXT address
// 3343   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3344 
// 3345   if ( status == ZSuccess )
// 3346   {
// 3347     // setup the link key data reference
// 3348     osal_memcpy( entry->lkd.key, key, SEC_KEY_LEN );
// 3349 
// 3350     entry->lkd.apsmelkd.rxFrmCntr = 0;
// 3351     entry->lkd.apsmelkd.txFrmCntr = 0;
// 3352   }
// 3353 
// 3354   return status;
// 3355 }
// 3356 
// 3357 /******************************************************************************
// 3358  * @fn          ZDSecMgrAuthenticationSet
// 3359  *
// 3360  * @brief       Mark the specific device as authenticated or not
// 3361  *
// 3362  * @param       extAddr - [in] EXT address
// 3363  * @param       option  - [in] authenticated or not
// 3364  *
// 3365  * @return      ZStatus_t
// 3366  */
// 3367 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
// 3368 {
// 3369   ZStatus_t        status;
// 3370   ZDSecMgrEntry_t* entry;
// 3371 
// 3372 
// 3373   // lookup entry index for specified EXT address
// 3374   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3375 
// 3376   if ( status == ZSuccess )
// 3377   {
// 3378     entry->authenticateOption = option;
// 3379   }
// 3380 
// 3381   return status;
// 3382 }
// 3383 
// 3384 /******************************************************************************
// 3385  * @fn          ZDSecMgrAuthenticationCheck
// 3386  *
// 3387  * @brief       Check if the specific device has been authenticated or not
// 3388  *              For non-trust center device, always return true
// 3389  *
// 3390  * @param       shortAddr - [in] short address
// 3391  *
// 3392  * @return      TRUE @ authenticated with CBKE
// 3393  *              FALSE @ not authenticated
// 3394  */
// 3395 
// 3396 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
// 3397 {
// 3398 #if defined (SE_PROFILE)
// 3399 
// 3400   ZDSecMgrEntry_t* entry;
// 3401   uint8 extAddr[Z_EXTADDR_LEN];
// 3402 
// 3403   // If the local device is not the trust center, always return TRUE
// 3404   if ( NLME_GetShortAddr() != TCshortAddr )
// 3405   {
// 3406     return TRUE;
// 3407   }
// 3408   // Otherwise, check the authentication option
// 3409   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 3410   {
// 3411     // lookup entry index for specified EXT address
// 3412     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 3413     {
// 3414       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 3415       {
// 3416         return TRUE;
// 3417       }
// 3418       else
// 3419       {
// 3420         return FALSE;
// 3421       }
// 3422     }
// 3423   }
// 3424   return FALSE;
// 3425 
// 3426 #else
// 3427   (void)shortAddr;  // Intentionally unreferenced parameter
// 3428   
// 3429   // For non AMI/SE Profile, perform no check and always return true.
// 3430   return TRUE;
// 3431 
// 3432 #endif // SE_PROFILE
// 3433 }
// 3434 
// 3435 
// 3436 /******************************************************************************
// 3437  * @fn          ZDSecMgrLinkKeyDataGet (stubs APSME_LinkKeyDataGet)
// 3438  *
// 3439  * @brief       Get <APSME_LinkKeyData_t> for specified NWK address.
// 3440  *
// 3441  * @param       extAddr - [in] EXT address
// 3442  * @param       data    - [out] APSME_LinkKeyData_t
// 3443  *
// 3444  * @return      ZStatus_t
// 3445  */
// 3446 ZStatus_t ZDSecMgrLinkKeyDataGet(uint8* extAddr, APSME_LinkKeyData_t** data)
// 3447 {
// 3448   ZStatus_t        status;
// 3449   ZDSecMgrEntry_t* entry;
// 3450 
// 3451 
// 3452   // lookup entry index for specified NWK address
// 3453   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3454 
// 3455   if ( status == ZSuccess )
// 3456   {
// 3457     // setup the link key data reference
// 3458     (*data) = &entry->lkd.apsmelkd;
// 3459     (*data)->key = entry->lkd.key;
// 3460   }
// 3461   else
// 3462   {
// 3463     *data = NULL;
// 3464   }
// 3465 
// 3466   return status;
// 3467 }
// 3468 
// 3469 /******************************************************************************
// 3470  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 3471  *
// 3472  * @brief       Verify and process key transportation to child.
// 3473  *
// 3474  * @param       ind - [in] APSME_TransportKeyInd_t
// 3475  *
// 3476  * @return      uint8 - success(TRUE:FALSE)
// 3477  */
// 3478 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
// 3479 {
// 3480   uint8 success;
// 3481 
// 3482   success = FALSE;
// 3483 
// 3484   // verify from Trust Center
// 3485   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 3486   {
// 3487     success = TRUE;
// 3488 
// 3489     // check for initial NWK key
// 3490     if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 3491          ( ind->keyType == 6                 ) ||
// 3492          ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
// 3493     {
// 3494       // set association status to authenticated
// 3495       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
// 3496     }
// 3497   }
// 3498 
// 3499   return success;
// 3500 }
// 3501 
// 3502 /******************************************************************************
// 3503  * @fn          ZDSecMgrAddLinkKey
// 3504  *
// 3505  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 3506  *              as authenticated in the authenticateOption. Note that this function
// 3507  *              is hardwared to CBKE right now.
// 3508  *
// 3509  * @param       shortAddr - short address of the partner device
// 3510  * @param       extAddr - extended address of the partner device
// 3511  * @param       key - link key
// 3512  *
// 3513  * @return      none
// 3514  */
// 3515 void ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
// 3516 {
// 3517   uint16           ami;
// 3518   ZDSecMgrEntry_t* entry;
// 3519 
// 3520   ZDSecMgrAddrStore( shortAddr, extAddr, &ami );
// 3521 
// 3522   ZDSecMgrEntryLookupAMI( ami, &entry );
// 3523 
// 3524   // If no existing entry, create one
// 3525   if ( entry == NULL )
// 3526   {
// 3527     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 3528     {
// 3529       entry->ami = ami;
// 3530     }
// 3531   }
// 3532   // Write the link key
// 3533   APSME_LinkKeySet( extAddr, key );
// 3534 
// 3535 #if defined (SE_PROFILE)
// 3536   // Mark the device as authenticated.
// 3537   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 3538 #endif
// 3539 
// 3540   // Write the new established link key to NV.
// 3541   ZDSecMgrWriteNV();
// 3542 }
// 3543 
// 3544 /******************************************************************************
// 3545  * @fn          ZDSecMgrInitNV
// 3546  *
// 3547  * @brief       Initialize the SecMgr entry data in NV.
// 3548  *
// 3549  * @param       none
// 3550  *
// 3551  * @return      uint8 - <osal_nv_item_init> return codes
// 3552  */
// 3553 uint8 ZDSecMgrInitNV( void )
// 3554 {
// 3555   uint8  status;
// 3556   uint16 size;
// 3557 
// 3558   size = (uint16)( sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX );
// 3559 
// 3560   status = osal_nv_item_init( ZCD_NV_APS_LINK_KEY_TABLE, size, NULL );
// 3561 
// 3562   // The item does not already exist
// 3563   if ( status != ZSUCCESS )
// 3564   {
// 3565     ZDSecMgrSetDefaultNV();
// 3566   }
// 3567 
// 3568   return status;
// 3569 }
// 3570 
// 3571 
// 3572 /******************************************************************************
// 3573  * @fn          ZDSecMgrSetDefaultNV
// 3574  *
// 3575  * @brief       Set default SecMgr entry data in NV.
// 3576  *
// 3577  * @param       none
// 3578  *
// 3579  * @return      none
// 3580  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock402 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock402
        REQUIRE ??Subroutine97_0
        ; // Fall through to label ??Subroutine97_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine97_0:
        CFI Block cfiBlock403 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock403
        REQUIRE ??Subroutine98_0
        ; // Fall through to label ??Subroutine98_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine98_0:
        CFI Block cfiBlock404 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock404
        REQUIRE ??Subroutine99_0
        ; // Fall through to label ??Subroutine99_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine99_0:
        CFI Block cfiBlock405 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock405

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyCfm:
        CFI Block cfiBlock406 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyCfm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock406

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCExtAddrCheck:
        CFI Block cfiBlock407 Using cfiCommon0
        CFI Function ZDSecMgrTCExtAddrCheck
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrTCExtAddrCheck_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrTCExtAddrCheck_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x8
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock407

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCDataLoad:
        CFI Block cfiBlock408 Using cfiCommon0
        CFI Function ZDSecMgrTCDataLoad
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_53
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_53
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_27:
        JZ      ??CrossCallReturnLabel_53
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    @DPTR,A
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0x4
        LJMP    ??Subroutine98_0 & 0xFFFF
        CFI EndBlock cfiBlock408

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond409 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker411 Using cfiCommon1
        CFI (cfiPicker411) NoFunction
        CFI (cfiPicker411) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_143:
        LCALL   ??ZDSecMgrMasterKeyStore?relay
        RET
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiPicker411

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyInd:
        CFI Block cfiBlock412 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyInd
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCExtAddrCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrDeviceValidateSKKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, APSME_EstablishKeyRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_82:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_76:
        ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrTCExtAddrCheck?relay
        MOV     A,R1
        JZ      ??ZDSecMgrEstablishKeyInd_0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??ZDSecMgrEstablishKeyInd_1
??ZDSecMgrEstablishKeyInd_0:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_215:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_176:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
??ZDSecMgrEstablishKeyInd_1:
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_71:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEstablishKeyInd_2
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrEstablishKeyInd_3
??ZDSecMgrEstablishKeyInd_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrEstablishKeyInd_3:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_180:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_177:
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine89_0 & 0xFFFF
??CrossCallReturnLabel_146:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_160:
        LCALL   ??APSME_EstablishKeyRsp?relay
        MOV     A,#0x11
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock412

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond413 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond415 Using cfiCommon0
        CFI (cfiCond415) NoFunction
        CFI (cfiCond415) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond415) CFA_SP SP+0
        CFI (cfiCond415) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker416 Using cfiCommon1
        CFI (cfiPicker416) NoFunction
        CFI (cfiPicker416) Picker
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiCond415
        CFI EndBlock cfiPicker416

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond417 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond418 Using cfiCommon0
        CFI (cfiCond418) NoFunction
        CFI (cfiCond418) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond418) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond418) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond418) CFA_SP SP+0
        CFI (cfiCond418) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker419 Using cfiCommon1
        CFI (cfiPicker419) NoFunction
        CFI (cfiPicker419) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_223:
        RET
        CFI EndBlock cfiCond417
        CFI EndBlock cfiCond418
        CFI EndBlock cfiPicker419

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock420 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock420
        REQUIRE ??Subroutine100_0
        ; // Fall through to label ??Subroutine100_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine100_0:
        CFI Block cfiBlock421 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock421
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine101_0:
        CFI Block cfiBlock422 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock422

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTransportKeyInd:
        CFI Block cfiBlock423 Using cfiCommon0
        CFI Function ZDSecMgrTransportKeyInd
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
        MOV     A,R6
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine89_0 & 0xFFFF
??CrossCallReturnLabel_147:
        JZ      ??ZDSecMgrTransportKeyInd_0
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrTransportKeyInd_0
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_2:
        MOV     ?V0 + 0,R2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_3
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_2
??ZDSecMgrTransportKeyInd_3:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_4
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,#(zgPreConfigKey & 0xff)
        MOV     R3,#((zgPreConfigKey >> 8) & 0xff)
        LCALL   ??SSP_UpdateNwkKey?relay
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrTransportKeyInd_6
??ZDSecMgrTransportKeyInd_4:
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??SSP_UpdateNwkKey?relay
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
??ZDSecMgrTransportKeyInd_6:
        LCALL   ??SSP_SwitchNwkKey?relay
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   ??ZDSecMgrAuthNwkKey?relay
??ZDSecMgrTransportKeyInd_0:
        LJMP    ??Subroutine99_0 & 0xFFFF
        CFI EndBlock cfiBlock423

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond424 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker426 Using cfiCommon1
        CFI (cfiPicker426) NoFunction
        CFI (cfiPicker426) Picker
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiPicker426

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrUpdateDeviceInd:
        CFI Block cfiBlock427 Using cfiCommon0
        CFI Function ZDSecMgrUpdateDeviceInd
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_183:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ??ZDSecMgrDeviceJoin?relay
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock427

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond428 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond429) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond429) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond429) CFA_SP SP+-5
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker430 Using cfiCommon1
        CFI (cfiPicker430) NoFunction
        CFI (cfiPicker430) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_227:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiPicker430

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRemoveDeviceInd:
        CFI Block cfiBlock431 Using cfiCommon0
        CFI Function ZDSecMgrRemoveDeviceInd
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrRemoveDeviceInd_0:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        MOV     A,R2
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine95_0 & 0xFFFF
??CrossCallReturnLabel_192:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine92_0 & 0xFFFF
??CrossCallReturnLabel_161:
        LCALL   ??ZDSecMgrDeviceRemove?relay
??ZDSecMgrRemoveDeviceInd_1:
        MOV     A,#0xa
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock431

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestKeyInd:
        CFI Block cfiBlock432 Using cfiCommon0
        CFI Function ZDSecMgrRequestKeyInd
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        XRL     A,R4
        JZ      ??ZDSecMgrRequestKeyInd_0
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??ZDSecMgrRequestKeyInd_0
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   ??ZDSecMgrAppKeyReq?relay
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock432

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSwitchKeyInd:
        CFI Block cfiBlock433 Using cfiCommon0
        CFI Function ZDSecMgrSwitchKeyInd
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock433

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateInd:
        CFI Block cfiBlock434 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateInd
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_216:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_178:
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_83:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateInd_0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_217:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ??APSME_AuthenticateReq?relay
??ZDSecMgrAuthenticateInd_0:
        MOV     A,#0x14
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock434

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond435 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond436) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond436) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond436) CFA_SP SP+0
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker437 Using cfiCommon1
        CFI (cfiPicker437) NoFunction
        CFI (cfiPicker437) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiPicker437

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond438 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_208
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker440 Using cfiCommon1
        CFI (cfiPicker440) NoFunction
        CFI (cfiPicker440) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiPicker440
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine102_0:
        CFI Block cfiCond441 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_222
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond443) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond443) CFA_SP SP+0
        CFI (cfiCond443) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker444 Using cfiCommon1
        CFI (cfiPicker444) NoFunction
        CFI (cfiPicker444) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiPicker444
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine103_0:
        CFI Block cfiCond445 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_221
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond446) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond446) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond446) CFA_SP SP+-5
        CFI Block cfiCond447 Using cfiCommon0
        CFI (cfiCond447) NoFunction
        CFI (cfiCond447) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond447) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond447) CFA_SP SP+0
        CFI (cfiCond447) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond448) CFA_SP SP+0
        CFI (cfiCond448) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker449 Using cfiCommon1
        CFI (cfiPicker449) NoFunction
        CFI (cfiPicker449) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiPicker449
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine104_0:
        CFI Block cfiCond450 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_210
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond451 Using cfiCommon0
        CFI (cfiCond451) NoFunction
        CFI (cfiCond451) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond451) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond451) CFA_SP SP+0
        CFI (cfiCond451) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond452 Using cfiCommon0
        CFI (cfiCond452) NoFunction
        CFI (cfiCond452) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond452) CFA_SP SP+0
        CFI (cfiCond452) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_213
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond454) CFA_SP SP+0
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond455 Using cfiCommon0
        CFI (cfiCond455) NoFunction
        CFI (cfiCond455) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond455) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond455) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond455) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond455) CFA_SP SP+0
        CFI (cfiCond455) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond456 Using cfiCommon0
        CFI (cfiCond456) NoFunction
        CFI (cfiCond456) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond456) CFA_SP SP+0
        CFI (cfiCond456) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond457) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond457) CFA_SP SP+0
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond458 Using cfiCommon0
        CFI (cfiCond458) NoFunction
        CFI (cfiCond458) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond458) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond458) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond458) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond458) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond458) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond458) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond458) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond458) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond458) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond458) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond458) CFA_SP SP+0
        CFI (cfiCond458) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond459 Using cfiCommon0
        CFI (cfiCond459) NoFunction
        CFI (cfiCond459) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond459) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond459) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond459) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond459) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond459) CFA_SP SP+0
        CFI (cfiCond459) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond460 Using cfiCommon0
        CFI (cfiCond460) NoFunction
        CFI (cfiCond460) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond460) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond460) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond460) CFA_SP SP+-5
        CFI (cfiCond460) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond461 Using cfiCommon0
        CFI (cfiCond461) NoFunction
        CFI (cfiCond461) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond461) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond461) CFA_SP SP+0
        CFI (cfiCond461) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond462 Using cfiCommon0
        CFI (cfiCond462) NoFunction
        CFI (cfiCond462) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond462) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond462) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond462) CFA_SP SP+-5
        CFI Block cfiCond463 Using cfiCommon0
        CFI (cfiCond463) NoFunction
        CFI (cfiCond463) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond463) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond463) CFA_SP SP+0
        CFI (cfiCond463) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker465 Using cfiCommon1
        CFI (cfiPicker465) NoFunction
        CFI (cfiPicker465) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_229:
        RET
        CFI EndBlock cfiCond450
        CFI EndBlock cfiCond451
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiCond455
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiCond458
        CFI EndBlock cfiCond459
        CFI EndBlock cfiCond460
        CFI EndBlock cfiCond461
        CFI EndBlock cfiCond462
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiPicker465

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond466 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond467 Using cfiCommon0
        CFI (cfiCond467) NoFunction
        CFI (cfiCond467) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_8
        CFI (cfiCond467) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond467) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond467) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond467) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond467) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond467) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond467) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond467) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond467) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond467) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond467) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond467) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond467) CFA_SP SP+0
        CFI (cfiCond467) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_5
        CFI (cfiCond468) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond468) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond468) CFA_SP SP+-5
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond469 Using cfiCommon0
        CFI (cfiCond469) NoFunction
        CFI (cfiCond469) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_6
        CFI (cfiCond469) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond469) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond469) CFA_SP SP+-5
        CFI (cfiCond469) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker470 Using cfiCommon1
        CFI (cfiPicker470) NoFunction
        CFI (cfiPicker470) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond466
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiCond469
        CFI EndBlock cfiPicker470
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine105_0:
        CFI Block cfiCond471 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond472 Using cfiCommon0
        CFI (cfiCond472) NoFunction
        CFI (cfiCond472) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_42
        CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond472) CFA_SP SP+0
        CFI (cfiCond472) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond473 Using cfiCommon0
        CFI (cfiCond473) NoFunction
        CFI (cfiCond473) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_43
        CFI (cfiCond473) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond473) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond473) CFA_SP SP+-5
        CFI (cfiCond473) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_181
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_182
        CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond475) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond475) CFA_SP SP+0
        CFI (cfiCond475) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond476 Using cfiCommon0
        CFI (cfiCond476) NoFunction
        CFI (cfiCond476) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_183
        CFI (cfiCond476) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond476) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond476) CFA_SP SP+-5
        CFI (cfiCond476) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_9
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_10
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_208
        CFI (cfiCond479) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond479) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond479) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond479) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond479) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond479) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond479) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond479) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond479) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond479) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond479) CFA_SP SP+0
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_209
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_222
        CFI (cfiCond481) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond481) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond481) CFA_SP SP+-5
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_221
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond483 Using cfiCommon0
        CFI (cfiCond483) NoFunction
        CFI (cfiCond483) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_210
        CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond483) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond483) CFA_SP SP+0
        CFI (cfiCond483) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond484 Using cfiCommon0
        CFI (cfiCond484) NoFunction
        CFI (cfiCond484) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_211
        CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond484) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond484) CFA_SP SP+0
        CFI (cfiCond484) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_212
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_213
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond487 Using cfiCommon0
        CFI (cfiCond487) NoFunction
        CFI (cfiCond487) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_214
        CFI (cfiCond487) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond487) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond487) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond487) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond487) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond487) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond487) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond487) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond487) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond487) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond487) CFA_SP SP+0
        CFI (cfiCond487) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond488 Using cfiCommon0
        CFI (cfiCond488) NoFunction
        CFI (cfiCond488) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_215
        CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond488) CFA_SP SP+0
        CFI (cfiCond488) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_216
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_217
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_218
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_219
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_220
        CFI (cfiCond493) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond493) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond493) CFA_SP SP+-5
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_44
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_45
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond496 Using cfiCommon0
        CFI (cfiCond496) NoFunction
        CFI (cfiCond496) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_7
        CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond496) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond496) CFA_SP SP+0
        CFI (cfiCond496) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond497 Using cfiCommon0
        CFI (cfiCond497) NoFunction
        CFI (cfiCond497) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_8
        CFI (cfiCond497) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond497) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond497) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond497) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond497) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond497) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond497) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond497) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond497) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond497) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond497) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond497) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond497) CFA_SP SP+0
        CFI (cfiCond497) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_5
        CFI (cfiCond498) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond498) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond498) CFA_SP SP+-5
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond499 Using cfiCommon0
        CFI (cfiCond499) NoFunction
        CFI (cfiCond499) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_6
        CFI (cfiCond499) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond499) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond499) CFA_SP SP+-5
        CFI (cfiCond499) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker500 Using cfiCommon1
        CFI (cfiPicker500) NoFunction
        CFI (cfiPicker500) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond471
        CFI EndBlock cfiCond472
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiCond483
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiCond487
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495
        CFI EndBlock cfiCond496
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiCond499
        CFI EndBlock cfiPicker500

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond501 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond502 Using cfiCommon0
        CFI (cfiCond502) NoFunction
        CFI (cfiCond502) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond502) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond502) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond502) CFA_SP SP+-5
        CFI (cfiCond502) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond503 Using cfiCommon0
        CFI (cfiCond503) NoFunction
        CFI (cfiCond503) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond503) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond503) CFA_SP SP+0
        CFI (cfiCond503) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond504) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond504) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond504) CFA_SP SP+-5
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond505) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond505) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond505) CFA_SP SP+-5
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker506 Using cfiCommon1
        CFI (cfiPicker506) NoFunction
        CFI (cfiPicker506) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_163:
        RET
        CFI EndBlock cfiCond501
        CFI EndBlock cfiCond502
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiPicker506

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond507 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_151
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_152
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_153
        CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond509) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond509) CFA_SP SP+0
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_154
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_155
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond512 Using cfiCommon0
        CFI (cfiCond512) NoFunction
        CFI (cfiCond512) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_156
        CFI (cfiCond512) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond512) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond512) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond512) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond512) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond512) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond512) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond512) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond512) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond512) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond512) CFA_SP SP+0
        CFI (cfiCond512) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_157
        CFI (cfiCond513) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond513) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond513) CFA_SP SP+-5
        CFI (cfiCond513) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_158
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_159
        CFI (cfiCond515) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond515) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond515) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond515) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond515) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond515) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond515) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond515) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond515) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond515) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond515) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond515) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond515) CFA_SP SP+0
        CFI (cfiCond515) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond516 Using cfiCommon0
        CFI (cfiCond516) NoFunction
        CFI (cfiCond516) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_160
        CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond516) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond516) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond516) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond516) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond516) CFA_SP SP+0
        CFI (cfiCond516) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_161
        CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond517) CFA_SP SP+0
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_0
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond519 Using cfiCommon0
        CFI (cfiCond519) NoFunction
        CFI (cfiCond519) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_1
        CFI (cfiCond519) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond519) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond519) CFA_SP SP+-5
        CFI (cfiCond519) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond520 Using cfiCommon0
        CFI (cfiCond520) NoFunction
        CFI (cfiCond520) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_2
        CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond520) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond520) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond520) CFA_SP SP+0
        CFI (cfiCond520) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond521 Using cfiCommon0
        CFI (cfiCond521) NoFunction
        CFI (cfiCond521) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_3
        CFI (cfiCond521) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond521) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond521) CFA_SP SP+-5
        CFI (cfiCond521) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond522 Using cfiCommon0
        CFI (cfiCond522) NoFunction
        CFI (cfiCond522) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_4
        CFI (cfiCond522) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond522) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond522) CFA_SP SP+-5
        CFI (cfiCond522) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker523 Using cfiCommon1
        CFI (cfiPicker523) NoFunction
        CFI (cfiPicker523) Picker
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiCond519
        CFI EndBlock cfiCond520
        CFI EndBlock cfiCond521
        CFI EndBlock cfiCond522
        CFI EndBlock cfiPicker523

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateCfm:
        CFI Block cfiBlock524 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateCfm
        FUNCALL ZDSecMgrAuthenticateCfm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_150:
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
??ZDSecMgrAuthenticateCfm_0:
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock524

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestAppKey:
        CFI Block cfiBlock525 Using cfiCommon0
        CFI Function ZDSecMgrRequestAppKey
        FUNCALL ZDSecMgrRequestAppKey, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrRequestAppKey_0
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ??APSME_RequestKeyReq?relay
        SJMP    ??ZDSecMgrRequestAppKey_1
??ZDSecMgrRequestAppKey_0:
        MOV     R1,#0x1
??ZDSecMgrRequestAppKey_1:
        MOV     A,#0xc
        LJMP    ??Subroutine81_0 & 0xFFFF
        CFI EndBlock cfiBlock525

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSetupPartner:
        CFI Block cfiBlock526 Using cfiCommon0
        CFI Function ZDSecMgrSetupPartner
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,#0x1
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_75:
        JNZ     ??ZDSecMgrSetupPartner_0
        MOV     ?V0 + 2,#0x0
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??ZDSecMgrSetupPartner_1
        MOV     A,#-0x1
        XRL     A,R7
??ZDSecMgrSetupPartner_1:
        JNZ     ??ZDSecMgrSetupPartner_2
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDP_NwkAddrReq?relay
        SJMP    ??ZDSecMgrSetupPartner_3
??ZDSecMgrSetupPartner_2:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrSetupPartner_0
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_IEEEAddrReq?relay
??ZDSecMgrSetupPartner_3:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrSetupPartner_0:
        MOV     R1,?V0 + 2
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock526

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_MasterKeyGet:
        CFI Block cfiBlock527 Using cfiCommon0
        CFI Function APSME_MasterKeyGet
        FUNCALL APSME_MasterKeyGet, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_MasterKeyGet, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??APSME_MasterKeyGet_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_55:
        SJMP    ??APSME_MasterKeyGet_1
??APSME_MasterKeyGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??APSME_MasterKeyGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock527

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond528 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker530 Using cfiCommon1
        CFI (cfiPicker530) NoFunction
        CFI (cfiPicker530) Picker
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_93:
        RET
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiPicker530

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond531 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_26
        CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond532) CFA_SP SP+0
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_27
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond534 Using cfiCommon0
        CFI (cfiCond534) NoFunction
        CFI (cfiCond534) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_54
        CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond534) CFA_SP SP+0
        CFI (cfiCond534) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond535 Using cfiCommon0
        CFI (cfiCond535) NoFunction
        CFI (cfiCond535) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_55
        CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond535) CFA_SP SP+0
        CFI (cfiCond535) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker536 Using cfiCommon1
        CFI (cfiPicker536) NoFunction
        CFI (cfiPicker536) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        RET
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiCond534
        CFI EndBlock cfiCond535
        CFI EndBlock cfiPicker536

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeySet:
        CFI Block cfiBlock537 Using cfiCommon0
        CFI Function APSME_LinkKeySet
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??APSME_LinkKeySet_0
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ?L_MOV_TO_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?L_MOV_TO_X
??APSME_LinkKeySet_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock537

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond538 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker540 Using cfiCommon1
        CFI (cfiPicker540) NoFunction
        CFI (cfiPicker540) Picker
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiPicker540

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond541 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_96
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond542 Using cfiCommon0
        CFI (cfiCond542) NoFunction
        CFI (cfiCond542) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_46
        CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond542) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond542) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond542) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond542) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond542) CFA_SP SP+0
        CFI (cfiCond542) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_47
        CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond543) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond543) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond543) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond543) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond543) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond543) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond543) CFA_SP SP+0
        CFI (cfiCond543) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker544 Using cfiCommon1
        CFI (cfiPicker544) NoFunction
        CFI (cfiPicker544) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond541
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiPicker544

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationSet:
        CFI Block cfiBlock545 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationSet
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAuthenticationSet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R6
        MOVX    @DPTR,A
??ZDSecMgrAuthenticationSet_0:
        LJMP    ??Subroutine86_0 & 0xFFFF
        CFI EndBlock cfiBlock545

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationCheck:
        CFI Block cfiBlock546 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationCheck
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x1
        LJMP    ?BRET
        CFI EndBlock cfiBlock546

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeyDataGet:
        CFI Block cfiBlock547 Using cfiCommon0
        CFI Function APSME_LinkKeyDataGet
        FUNCALL APSME_LinkKeyDataGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??APSME_LinkKeyDataGet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine95_0 & 0xFFFF
??CrossCallReturnLabel_193:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyDataGet_1
??APSME_LinkKeyDataGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyDataGet_1:
        MOVX    @DPTR,A
        LJMP    ??Subroutine86_0 & 0xFFFF
        CFI EndBlock cfiBlock547

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond548 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond549) CFA_SP SP+0
        CFI (cfiCond549) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker550 Using cfiCommon1
        CFI (cfiPicker550) NoFunction
        CFI (cfiPicker550) Picker
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiPicker550

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond551 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond552) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond553) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond553) CFA_SP SP+0
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker554 Using cfiCommon1
        CFI (cfiPicker554) NoFunction
        CFI (cfiPicker554) Picker
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_95:
        RET
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiPicker554

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond555 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_37
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_38
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond557) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_39
        CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond558) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond558) CFA_SP SP+0
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_40
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker560 Using cfiCommon1
        CFI (cfiPicker560) NoFunction
        CFI (cfiPicker560) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_126:
        RET
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiPicker560

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond561 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_123
        CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond562) CFA_SP SP+0
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_121
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_28
        CFI (cfiCond564) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond564) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond564) CFA_SP SP+-5
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_29
        CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond565) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond565) CFA_SP SP+0
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_36
        CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond566) CFA_SP SP+0
        CFI (cfiCond566) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_37
        CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond567) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond567) CFA_SP SP+0
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_38
        CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond568) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond568) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond568) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond568) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond568) CFA_SP SP+0
        CFI (cfiCond568) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_39
        CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond569) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond569) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond569) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond569) CFA_SP SP+0
        CFI (cfiCond569) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond570 Using cfiCommon0
        CFI (cfiCond570) NoFunction
        CFI (cfiCond570) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_40
        CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond570) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond570) CFA_SP SP+0
        CFI (cfiCond570) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker571 Using cfiCommon1
        CFI (cfiPicker571) NoFunction
        CFI (cfiPicker571) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiCond570
        CFI EndBlock cfiPicker571

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_KeyFwdToChild:
        CFI Block cfiBlock572 Using cfiCommon0
        CFI Function APSME_KeyFwdToChild
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R6,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??APSME_KeyFwdToChild_0
        INC     DPTR
        MOVX    A,@DPTR
??APSME_KeyFwdToChild_0:
        JNZ     ??APSME_KeyFwdToChild_1
        INC     R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x5
        XRL     A,R4
        JNZ     ??APSME_KeyFwdToChild_1
??APSME_KeyFwdToChild_2:
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??APSME_KeyFwdToChild_1:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock572

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond573 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker575 Using cfiCommon1
        CFI (cfiPicker575) NoFunction
        CFI (cfiPicker575) Picker
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ??AssocGetWithExt?relay
        RET
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiPicker575

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddLinkKey:
        CFI Block cfiBlock576 Using cfiCommon0
        CFI Function ZDSecMgrAddLinkKey
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAddLinkKey_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrAddLinkKey_0:
        JNZ     ??CrossCallReturnLabel_179
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_179
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_179:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeySet?relay
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL   ??ZDSecMgrWriteNV?relay
        MOV     A,#0x4
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock576

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond577 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker579 Using cfiCommon1
        CFI (cfiPicker579) NoFunction
        CFI (cfiPicker579) Picker
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_142:
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        RET
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiPicker579

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond580 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond581) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond581) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond581) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond581) CFA_SP SP+0
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker582 Using cfiCommon1
        CFI (cfiPicker582) NoFunction
        CFI (cfiPicker582) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_226:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiPicker582

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrInitNV:
        CFI Block cfiBlock583 Using cfiCommon0
        CFI Function ZDSecMgrInitNV
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, ZDSecMgrSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x57
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
        JZ      ??ZDSecMgrInitNV_0
        ; Setup parameters for call to function ZDSecMgrSetDefaultNV
        LCALL   ??ZDSecMgrSetDefaultNV?relay
??ZDSecMgrInitNV_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine99_0 & 0xFFFF
        CFI EndBlock cfiBlock583

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3581 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
        CFI Block cfiBlock584 Using cfiCommon0
        CFI Function ZDSecMgrSetDefaultNV
// 3582 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 3583   nvDeviceListHdr_t hdr;
// 3584 
// 3585   // Initialize the header
// 3586   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3587 
// 3588   // Save off the header
// 3589   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock584
// 3590 }
// 3591 
// 3592 
// 3593 
// 3594 /*********************************************************************
// 3595  * @fn      ZDSecMgrWriteNV()
// 3596  *
// 3597  * @brief   Save off the link key list to NV
// 3598  *
// 3599  * @param   none
// 3600  *
// 3601  * @return  none
// 3602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3603 void ZDSecMgrWriteNV( void )
ZDSecMgrWriteNV:
        CFI Block cfiBlock585 Using cfiCommon0
        CFI Function ZDSecMgrWriteNV
// 3604 {
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 3605   uint16 i;
// 3606   nvDeviceListHdr_t hdr;
// 3607 
// 3608   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3609 
// 3610   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV     R6,A
        MOV     R7,A
// 3611   {
// 3612     if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
??ZDSecMgrWriteNV_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1d
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x1d
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrWriteNV_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrWriteNV_1:
        JZ      ??ZDSecMgrWriteNV_2
// 3613     {
// 3614       // Save off the record
// 3615       osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3616               (uint16)((sizeof(nvDeviceListHdr_t)) + (hdr.numRecs * sizeof(ZDSecMgrEntry_t))),
// 3617                       sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1d
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_218:
        MOV     A,R0
        MOV     B,#0x1d
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x1d
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#0x2
        ADD     A,R0
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 3618       hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
// 3619     }
// 3620   }
??ZDSecMgrWriteNV_2:
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_68:
        JC      ??ZDSecMgrWriteNV_0
// 3621 
// 3622   // Save off the header
// 3623   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock585
// 3624 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond586 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond587 Using cfiCommon0
        CFI (cfiCond587) NoFunction
        CFI (cfiCond587) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond587) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond587) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond587) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond587) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond587) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond587) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond587) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond587) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond587) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond587) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond587) CFA_SP SP+0
        CFI (cfiCond587) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker588 Using cfiCommon1
        CFI (cfiPicker588) NoFunction
        CFI (cfiPicker588) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond586
        CFI EndBlock cfiCond587
        CFI EndBlock cfiPicker588
// 3625 
// 3626 /******************************************************************************
// 3627  * @fn          ZDSecMgrRestoreFromNV
// 3628  *
// 3629  * @brief       Restore the SecMgr entry data from NV.
// 3630  *
// 3631  * @param       none
// 3632  *
// 3633  * @return      ZStatus_t ZSuccess or ZFailure
// 3634  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3635 ZStatus_t ZDSecMgrRestoreFromNV( void )
ZDSecMgrRestoreFromNV:
        CFI Block cfiBlock589 Using cfiCommon0
        CFI Function ZDSecMgrRestoreFromNV
// 3636 {
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
// 3637   uint8 x = 0;
        MOV     ?V0 + 4,#0x0
// 3638   nvDeviceListHdr_t hdr;
// 3639 
// 3640   // Initialize the device list
// 3641   if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr ) == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        JZ      ??ZDSecMgrRestoreFromNV_0
// 3642   {
// 3643     // Read in the device list
// 3644     for ( ; x < hdr.numRecs; x++ )
// 3645     {
// 3646       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 3647                 (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 3648                       sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == ZSUCCESS )
// 3649       {
// 3650         ZDSecMgrEntries[x].lkd.apsmelkd.txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
// 3651       }
// 3652     }
// 3653 
// 3654     // Write the updated entry back to NV.
// 3655     ZDSecMgrWriteNV();
// 3656 
// 3657     return ZSuccess;
// 3658   }
// 3659   return ZFailure;
        MOV     R1,#0x1
??ZDSecMgrRestoreFromNV_1:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 15)
??ZDSecMgrRestoreFromNV_2:
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R6,A
        MOV     R4,B
        MOV     A,R4
        MOV     R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1d
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     A,R4
        MOV     R3,A
        MOV     A,#0x2
        ADD     A,R2
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     R2,#0x4c
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        JNZ     ??ZDSecMgrRestoreFromNV_3
        MOV     DPTR,#__Constant_b
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#0x14
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
??ZDSecMgrRestoreFromNV_3:
        INC     ?V0 + 4
??ZDSecMgrRestoreFromNV_0:
        MOV     DPL,?V0 + 4
        MOV     R2,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_219:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        JC      ??ZDSecMgrRestoreFromNV_2
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL   ??ZDSecMgrWriteNV?relay
        MOV     R1,#0x0
        LJMP    ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
        CFI EndBlock cfiBlock589
// 3660 }
// 3661 
// 3662 /******************************************************************************
// 3663  * @fn          ZDSecMgrAPSRemove
// 3664  *
// 3665  * @brief       Remove device from network.
// 3666  *
// 3667  * @param       nwkAddr - device's NWK address
// 3668  * @param       extAddr - device's Extended address
// 3669  * @param       parentAddr - parent's NWK address
// 3670  *
// 3671  * @return      ZStatus_t
// 3672  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3673 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
        CFI Block cfiBlock590 Using cfiCommon0
        CFI Function ZDSecMgrAPSRemove
// 3674 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
// 3675   ZDSecMgrDevice_t device;
// 3676 
// 3677   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 3678        ( extAddr == NULL )              ||
// 3679        ( parentAddr == INVALID_NODE_ADDR ) )
??CrossCallReturnLabel_220:
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,R5
??ZDSecMgrAPSRemove_2:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_3
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_3:
        JNZ     ??ZDSecMgrAPSRemove_4
// 3680   {
// 3681     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_5
// 3682   }
// 3683 
// 3684   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_4:
        LCALL   ?Subroutine18 & 0xFFFF
// 3685   device.extAddr = extAddr;
??CrossCallReturnLabel_195:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3686   device.parentAddr = parentAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
// 3687 
// 3688   // remove device
// 3689   ZDSecMgrDeviceRemove( &device );
??CrossCallReturnLabel_4:
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 3690 
// 3691   return ( ZSuccess );
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_5:
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock590
// 3692 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrTCMasterKey>`:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 137, 103, 69, 35, 1, 239, 205, 171

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrAppKeyType>`:
        DB 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_b:
        DD 11

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryFree?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlRelease?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlRelease

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlTerm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlTerm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendMasterKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendMasterKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrMgrUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrMgrUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlSetup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_SKA_TimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_SKA_TimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateSKKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateSKKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateRM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateCM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateCM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinDirect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinFwd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAssocDeviceAuth?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthInitiate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthInitiate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoining?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoiningTimeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNewDeviceEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCExtAddrCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCDataLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTransportKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRemoveDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestAppKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetupPartner?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetupPartner

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_MasterKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_MasterKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeySet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeyDataGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeyDataGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_KeyFwdToChild?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInitNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetDefaultNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrWriteNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRestoreFromNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAPSRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAPSRemove

        END
// 3693 
// 3694 /******************************************************************************
// 3695 ******************************************************************************/
// 3696 
// 
// 6 861 bytes in segment BANKED_CODE
//   450 bytes in segment BANK_RELAYS
//    17 bytes in segment XDATA_I
//    17 bytes in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    28 bytes in segment XDATA_Z
// 
// 7 328 bytes of CODE  memory
//     0 bytes of CONST memory (+ 8 bytes shared)
//    45 bytes of XDATA memory
//
//Errors: none
//Warnings: none
