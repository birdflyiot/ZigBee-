###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                07/Jun/2011  16:54:01 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Utilities\Transmit\Source\TransmitApp.c     #
#    Command line       =  -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\Utilities\Transmit\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ             #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\Tools #
#                          \CC2530DB\f8wConfig.cfg" (-DSECURE=0               #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\Source\TransmitApp.c"   #
#                          -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D             #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐ #
#                          ò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proj #
#                          ects\zstack\Utilities\Transmit\CC2530DB\Coordinato #
#                          rEB-Pro\List\" -lA "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí #
#                          )\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\Utilities\Transmit\CC25 #
#                          30DB\CoordinatorEB-Pro\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\Zi #
#                          gBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0 #
#                          -1.3.0\Projects\zstack\Utilities\Transmit\CC2530DB #
#                          \CoordinatorEB-Pro\Obj\" -e --require_prototypes   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\SOURCE\"    #
#                          -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\Utilities\Transmit\CC2530DB\..\..\..\ZM #
#                          AIN\TI2530DB\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí) #
#                          \ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2. #
#                          2.0-1.3.0\Projects\zstack\Utilities\Transmit\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MT\" -I              #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\HAL\INCLUDE\" -I                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\HAL\TARGET\CC2530EB\" -I               #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\OSAL\MCU\CCSOC\" -I                    #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\OSAL\INCLUDE\" -I                      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\AF\" -I                          #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\NWK\" -I                         #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SEC\" -I                         #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SAPI\" -I                        #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SYS\" -I                         #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\ZDO\" -I                         #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\ZMAC\F8W\" -I                          #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\ZMAC\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕ #
#                          ûÀí)\ZigBee2007³ÌÐò\Texas                          #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\Utilities\Transmit\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SADDR\" -I                        #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\SERVICES\SDATA\" -I                    #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MAC\INCLUDE\" -I                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MAC\HIGH_LEVEL\" -I                    #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MAC\LOW_LEVEL\srf04\" -I               #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\Utilities\Transmit\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ohz            #
#    List file          =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Utilities\Transmit\CC2530DB\CoordinatorEB-P #
#                          ro\List\TransmitApp.lst                            #
#    Object file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\Utilities\Transmit\CC2530DB\CoordinatorEB-P #
#                          ro\Obj\TransmitApp.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\Utilities\Transmit\Source\TransmitApp.c
      1          /**************************************************************************************************
      2            Filename:       TransmitApp.c
      3            Revised:        $Date: 2009-03-12 10:06:30 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19395 $
      5          
      6            Description:    Transmit Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application will send a data packet to another
     42            tranmitApp device as fast as it can.  The receiving
     43            transmitApp device will calculate the following transmit
     44            rate statistics:
     45              - Number bytes in the last second
     46              - Number of seconds running
     47              - Average number of bytes per second
     48              - Number of packets received.
     49          
     50            The application will send one message and as soon as it
     51            receives the confirmation for that message it will send
     52            the next message.
     53          
     54            If you would like a delay between messages
     55            define TRANSMITAPP_DELAY_SEND and set the delay amount
     56            in TRANSMITAPP_SEND_DELAY.
     57          
     58            TransmitApp_MaxDataLength defines the message size
     59          
     60            Set TRANSMITAPP_TX_OPTIONS to AF_MSG_ACK_REQUEST to send
     61            the message expecting an APS ACK, this will decrease your
     62            throughput.  Set TRANSMITAPP_TX_OPTIONS to 0 for no
     63            APS ACK.
     64          
     65            This applications doesn't have a profile, so it handles
     66            everything directly - itself.
     67          
     68            Key control:
     69              SW1:  Starts and stops the transmitting
     70              SW2:  initiates end device binding
     71              SW3:  Resets the display totals
     72              SW4:  initiates a match description request
     73          
     74            Notes:
     75          
     76              This application was intended to be used to test the maximum
     77              throughput between 2 devices in a network - between routers
     78              coordinators.
     79          
     80              Although not recommended, it can be used between
     81              an end device and a router (or coordinator), but you must
     82              enable the delay feature (TRANSMITAPP_DELAY_SEND and
     83              TRANSMITAPP_SEND_DELAY).  If you don't include the delay, the
     84              end device can't receive messages because it will stop polling.
     85              Also, the delay must be greater than RESPONSE_POLL_RATE (default 100 MSec).
     86          *********************************************************************/
     87          
     88          /*********************************************************************
     89           * INCLUDES
     90           */
     91          #include "OSAL.h"
     92          #include "AF.h"
     93          #include "ZDObject.h"
     94          #include "ZDProfile.h"
     95          
     96          #include "TransmitApp.h"
     97          #include "OnBoard.h"
     98          
     99          #include "DebugTrace.h"
    100          
    101          /* HAL */
    102          #include "hal_lcd.h"
    103          #include "hal_led.h"
    104          #include "hal_key.h"
    105          #include "hal_uart.h"
    106          
    107          /*********************************************************************
    108           * MACROS
    109           */
    110          
    111          /*********************************************************************
    112           * CONSTANTS
    113           */
    114          //#define TRANSMITAPP_RANDOM_LEN 
    115          
    116          #define TRANSMITAPP_STATE_WAITING 0
    117          #define TRANSMITAPP_STATE_SENDING 1
    118          
    119          #if !defined ( RTR_NWK )
    120            // Use these 2 lines to add a delay between each packet sent
    121            //  - default for end devices
    122            #define TRANSMITAPP_DELAY_SEND
    123            #define TRANSMITAPP_SEND_DELAY    (RESPONSE_POLL_RATE * 2)  // in MSecs
    124          #endif
    125          
    126          // Send with or without APS ACKs
    127          //#define TRANSMITAPP_TX_OPTIONS    (AF_DISCV_ROUTE | AF_ACK_REQUEST)
    128          #define TRANSMITAPP_TX_OPTIONS    AF_DISCV_ROUTE
    129          
    130          #define TRANSMITAPP_INITIAL_MSG_COUNT  2
    131          
    132          #define TRANSMITAPP_TRANSMIT_TIME   4  // 4 MS
    133          #define TRANSMITAPP_DISPLAY_TIMER   (2 * 1000)
    134          
    135          #if defined ( TRANSMITAPP_FRAGMENTED )
    136          #define TRANSMITAPP_MAX_DATA_LEN    225
    137          #else
    138          #define TRANSMITAPP_MAX_DATA_LEN    102
    139          #endif
    140          
    141          /*********************************************************************
    142           * TYPEDEFS
    143           */
    144          
    145          /*********************************************************************
    146           * GLOBAL VARIABLES
    147           */
    148          
    149          // This is the buffer that is sent out as data.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ];
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
    151          
    152          // This is the Cluster ID List and should be filled with Application
    153          // specific cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    154          const cId_t TransmitApp_ClusterList[TRANSMITAPP_MAX_CLUSTERS] =
   \                     TransmitApp_ClusterList:
   \   000000   0100         DW 1
    155          {
    156            TRANSMITAPP_CLUSTERID_TESTMSG  // MSG Cluster ID
    157          };
    158          

   \                                 In  segment XDATA_ROM_C, align 1
    159          const SimpleDescriptionFormat_t TransmitApp_SimpleDesc =
   \                     TransmitApp_SimpleDesc:
   \   000000   01           DB 1
   \   000001   050F0100     DW 3845, 1
   \   000005   0001         DB 0, 1
   \   000007   ....         DW TransmitApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TransmitApp_ClusterList
    160          {
    161            TRANSMITAPP_ENDPOINT,              //  int    Endpoint;
    162            TRANSMITAPP_PROFID,                //  uint16 AppProfId[2];
    163            TRANSMITAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    164            TRANSMITAPP_DEVICE_VERSION,        //  int    AppDevVer:4;
    165            TRANSMITAPP_FLAGS,                 //  int    AppFlags:4;
    166            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    167            (cId_t *)TransmitApp_ClusterList,  //  byte   *pAppInClusterList;
    168            TRANSMITAPP_MAX_CLUSTERS,          //  byte   AppNumInClusters;
    169            (cId_t *)TransmitApp_ClusterList   //  byte   *pAppInClusterList;
    170          };
    171          
    172          // This is the Endpoint/Interface description.  It is defined here, but
    173          // filled-in in TransmitApp_Init().  Another way to go would be to fill
    174          // in the structure here and make it a "const" (in code space).  The
    175          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          endPointDesc_t TransmitApp_epDesc;
   \                     TransmitApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    177          
    178          /*********************************************************************
    179           * EXTERNAL VARIABLES
    180           */
    181          
    182          /*********************************************************************
    183           * EXTERNAL FUNCTIONS
    184           */
    185          
    186          /*********************************************************************
    187           * LOCAL VARIABLES
    188           */
    189          
    190          // Task ID for event processing - received when TransmitApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          byte TransmitApp_TaskID;
   \                     TransmitApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          devStates_t TransmitApp_NwkState;
   \                     TransmitApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static byte TransmitApp_TransID;  // This is the unique message ID (counter)
   \                     TransmitApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    196          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          afAddrType_t TransmitApp_DstAddr;
   \                     TransmitApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    198          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          byte TransmitApp_State;
   \                     TransmitApp_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    200          
    201          // Shadow of the OSAL system clock used for calculating actual time expired.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          static uint32 clkShdw;
   \                     clkShdw:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    203          // Running total count of test messages recv/sent since beginning current run.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint32 rxTotal, txTotal;
   \                     rxTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txTotal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    205          // Running count of test messages recv/sent since last display / update - 1 Hz.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint32 rxAccum, txAccum;
   \                     rxAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txAccum:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    207          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static byte timerOn;
   \                     timerOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          static byte timesToSend;
   \                     timesToSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    211          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          uint16 pktCounter;
   \                     pktCounter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    213          
    214          // Max Data Request Length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint16 TransmitApp_MaxDataLength;
   \                     TransmitApp_MaxDataLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    216          
    217          /*********************************************************************
    218           * LOCAL FUNCTIONS
    219           */
    220          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    221          void TransmitApp_HandleKeys( byte shift, byte keys );
    222          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    223          void TransmitApp_SendTheMessage( void );
    224          void TransmitApp_ChangeState( void );
    225          
    226          /*********************************************************************
    227           * NETWORK LAYER CALLBACKS
    228           */
    229          
    230          /*********************************************************************
    231           * PUBLIC FUNCTIONS
    232           */
    233          void TransmitApp_DisplayResults( void );
    234          
    235          /*********************************************************************
    236           * @fn      TransmitApp_Init
    237           *
    238           * @brief   Initialization function for the Generic App Task.
    239           *          This is called during initialization and should contain
    240           *          any application specific initialization (ie. hardware
    241           *          initialization/setup, table initialization, power up
    242           *          notificaiton ... ).
    243           *
    244           * @param   task_id - the ID assigned by OSAL.  This ID should be
    245           *                    used to send messages and set timers.
    246           *
    247           * @return  none
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void TransmitApp_Init( byte task_id )
   \                     TransmitApp_Init:
    250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    251          #if !defined ( TRANSMITAPP_FRAGMENTED )
    252            afDataReqMTU_t mtu;
    253          #endif
    254            uint16 i;
    255          
    256            TransmitApp_TaskID = task_id;
   \   000009   E9           MOV     A,R1
   \   00000A   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000D   F0           MOVX    @DPTR,A
    257            TransmitApp_NwkState = DEV_INIT;
   \   00000E   7401         MOV     A,#0x1
   \   000010   90....       MOV     DPTR,#TransmitApp_NwkState
   \   000013   F0           MOVX    @DPTR,A
    258            TransmitApp_TransID = 0;
   \   000014   E4           CLR     A
   \   000015   90....       MOV     DPTR,#TransmitApp_TransID
   \   000018   F0           MOVX    @DPTR,A
    259          
    260            pktCounter = 0;
   \   000019   90....       MOV     DPTR,#pktCounter
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    261          
    262            TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \   00001F   90....       MOV     DPTR,#TransmitApp_State
   \   000022   F0           MOVX    @DPTR,A
    263          
    264            // Device hardware initialization can be added here or in main() (Zmain.c).
    265            // If the hardware is application specific - add it here.
    266            // If the hardware is other parts of the device add it in main().
    267          
    268            TransmitApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000023   90....       MOV     DPTR,#(TransmitApp_DstAddr + 8)
   \   000026   F0           MOVX    @DPTR,A
    269            TransmitApp_DstAddr.endPoint = 0;
   \   000027   90....       MOV     DPTR,#(TransmitApp_DstAddr + 9)
   \   00002A   F0           MOVX    @DPTR,A
    270            TransmitApp_DstAddr.addr.shortAddr = 0;
   \   00002B   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
    271          
    272            // Fill out the endpoint description.
    273            TransmitApp_epDesc.endPoint = TRANSMITAPP_ENDPOINT;
   \   000031   7401         MOV     A,#0x1
   \   000033   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000036   F0           MOVX    @DPTR,A
    274            TransmitApp_epDesc.task_id = &TransmitApp_TaskID;
   \   000037   90....       MOV     DPTR,#(TransmitApp_epDesc + 1)
   \   00003A   74..         MOV     A,#(TransmitApp_TaskID & 0xff)
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#((TransmitApp_TaskID >> 8) & 0xff)
   \   000040   F0           MOVX    @DPTR,A
    275            TransmitApp_epDesc.simpleDesc
    276                      = (SimpleDescriptionFormat_t *)&TransmitApp_SimpleDesc;
   \   000041   90....       MOV     DPTR,#(TransmitApp_epDesc + 3)
   \   000044   74..         MOV     A,#(TransmitApp_SimpleDesc & 0xff)
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#((TransmitApp_SimpleDesc >> 8) & 0xff)
   \   00004A   F0           MOVX    @DPTR,A
    277            TransmitApp_epDesc.latencyReq = noLatencyReqs;
   \   00004B   E4           CLR     A
   \   00004C   90....       MOV     DPTR,#(TransmitApp_epDesc + 5)
   \   00004F   F0           MOVX    @DPTR,A
    278          
    279            // Register the endpoint/interface description with the AF
    280            afRegister( &TransmitApp_epDesc );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#(TransmitApp_epDesc & 0xff)
   \   000052   7B..         MOV     R3,#((TransmitApp_epDesc >> 8) & 0xff)
   \   000054   12....       LCALL   ??afRegister?relay
    281          
    282            // Register for all key events - This app will handle all key events
    283            RegisterForKeys( TransmitApp_TaskID );
   \   000057                ; Setup parameters for call to function RegisterForKeys
   \   000057   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   ??RegisterForKeys?relay
    284          
    285            // Update the display
    286          #if defined ( LCD_SUPPORTED )
    287            HalLcdWriteString( "TransmitApp", HAL_LCD_LINE_2 );
   \   00005F                ; Setup parameters for call to function HalLcdWriteString
   \   00005F   7903         MOV     R1,#0x3
   \   000061   7A..         MOV     R2,#(`?<Constant "TransmitApp">` & 0xff)
   \   000063   7B..         MOV     R3,#((`?<Constant "TransmitApp">` >> 8) & 0xff)
   \   000065   12....       LCALL   ??HalLcdWriteString?relay
    288          #endif
    289          
    290            // Set the data length
    291          #if defined ( TRANSMITAPP_FRAGMENTED )
    292            TransmitApp_MaxDataLength = TRANSMITAPP_MAX_DATA_LEN;
    293          #else
    294            mtu.kvp        = FALSE;
   \   000068   E4           CLR     A
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   F0           MOVX    @DPTR,A
    295            mtu.aps.secure = FALSE;
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E4           CLR     A
   \   000076   12....       LCALL   ?Subroutine2 & 0xFFFF
    296            TransmitApp_MaxDataLength = afDataReqMTU( &mtu );
   \                     ??CrossCallReturnLabel_7:
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??afDataReqMTU?relay
   \   000080   E9           MOV     A,R1
   \   000081   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    297          #endif
    298          
    299            // Generate the data
    300            for (i=0; i<TransmitApp_MaxDataLength; i++)
   \   000088   F8           MOV     R0,A
   \   000089   8012         SJMP    ??TransmitApp_Init_0
    301            {
    302              TransmitApp_Msg[i] = (uint8) i;
   \                     ??TransmitApp_Init_1:
   \   00008B   E8           MOV     A,R0
   \   00008C   24..         ADD     A,#(TransmitApp_Msg & 0xff)
   \   00008E   F582         MOV     DPL,A
   \   000090   E9           MOV     A,R1
   \   000091   34..         ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
   \   000093   F583         MOV     DPH,A
   \   000095   E8           MOV     A,R0
   \   000096   F0           MOVX    @DPTR,A
    303            }
   \   000097   2401         ADD     A,#0x1
   \   000099   08           INC     R0
   \   00009A   E9           MOV     A,R1
   \   00009B   3400         ADDC    A,#0x0
   \                     ??TransmitApp_Init_0:
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   C3           CLR     C
   \   0000A7   E8           MOV     A,R0
   \   0000A8   9A           SUBB    A,R2
   \   0000A9   E9           MOV     A,R1
   \   0000AA   9B           SUBB    A,R3
   \   0000AB   40DE         JC      ??TransmitApp_Init_1
    304          
    305            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, End_Device_Bind_rsp );
   \   0000AD                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000AD   7A20         MOV     R2,#0x20
   \   0000AF   7B80         MOV     R3,#-0x80
   \   0000B1   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    306            ZDO_RegisterForZDOMsg( TransmitApp_TaskID, Match_Desc_rsp );
   \   0000B9                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000B9   7A06         MOV     R2,#0x6
   \   0000BB   7B80         MOV     R3,#-0x80
   \   0000BD   90....       MOV     DPTR,#TransmitApp_TaskID
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    307          }
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA                REQUIRE ?Subroutine9
   \   0000CA                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    308          
    309          /*********************************************************************
    310           * @fn      TransmitApp_ProcessEvent
    311           *
    312           * @brief   Generic Application Task event processor.  This function
    313           *          is called to process all events for the task.  Events
    314           *          include timers, messages and any other user defined events.
    315           *
    316           * @param   task_id  - The OSAL assigned task ID.
    317           * @param   events - events to process.  This is a bit map and can
    318           *                   contain more than one event.
    319           *
    320           * @return  none
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          UINT16 TransmitApp_ProcessEvent( byte task_id, UINT16 events )
   \                     TransmitApp_ProcessEvent:
    323          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    324            afIncomingMSGPacket_t *MSGpkt;
    325            afDataConfirm_t *afDataConfirm;
    326            (void)task_id;  // Intentionally unreferenced parameter
    327          
    328            // Data Confirmation message fields
    329            ZStatus_t sentStatus;
    330            byte sentEP;
    331          
    332            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??TransmitApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??TransmitApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??TransmitApp_ProcessEvent_1 & 0xFFFF
    333            {
    334              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8013         SJMP    ??TransmitApp_ProcessEvent_2
    335              while ( MSGpkt )
    336              {
    337                switch ( MSGpkt->hdr.event )
    338                {
    339                  case ZDO_CB_MSG:
    340                    TransmitApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    341                    break;
    342          
    343                  case KEY_CHANGE:
    344                    TransmitApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    345                    break;
    346          
    347                  case AF_DATA_CONFIRM_CMD:
    348                    // This message is received as a confirmation of a data packet sent.
    349                    // The status is of ZStatus_t type [defined in ZComDef.h]
    350                    // The message fields are defined in AF.h
    351                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    352                    sentEP = afDataConfirm->endpoint;
    353                    sentStatus = afDataConfirm->hdr.status;
    354          
    355                    if ( (ZSuccess == sentStatus) &&
    356                         (TransmitApp_epDesc.endPoint == sentEP) )
    357                    {
    358          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    359                      txAccum += TransmitApp_MaxDataLength;
    360          #endif
    361                      if ( !timerOn )
    362                      {
    363                        osal_start_timerEx( TransmitApp_TaskID,TRANSMITAPP_RCVTIMER_EVT,
    364                                                               TRANSMITAPP_DISPLAY_TIMER);
    365                        clkShdw = osal_GetSystemClock();
    366                        timerOn = TRUE;
    367                      }
    368                    }
    369          
    370                    // Action taken when confirmation is received: Send the next message.
    371                    TransmitApp_SetSendEvt();
    372                    break;
    373          
    374                  case AF_INCOMING_MSG_CMD:
    375                    TransmitApp_MessageMSGCB( MSGpkt );
    376                    break;
    377          
    378                  case ZDO_STATE_CHANGE:
    379                    TransmitApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TransmitApp_ProcessEvent_3:
   \   000018   85..82       MOV     DPL,?V0 + 4
   \   00001B   85..83       MOV     DPH,?V0 + 5
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#TransmitApp_NwkState
   \   000023   F0           MOVX    @DPTR,A
    380                    break;
    381          
    382                  default:
    383                    break;
    384                }
    385          
    386                // Release the memory
    387                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TransmitApp_ProcessEvent_4:
   \   000024                ; Setup parameters for call to function osal_msg_deallocate
   \   000024   AA..         MOV     R2,?V0 + 4
   \   000026   AB..         MOV     R3,?V0 + 5
   \   000028   12....       LCALL   ??osal_msg_deallocate?relay
    388          
    389                // Next
    390                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TransmitApp_TaskID );
   \   00002B                ; Setup parameters for call to function osal_msg_receive
   \                     ??TransmitApp_ProcessEvent_2:
   \   00002B   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_msg_receive?relay
   \   000033   8A..         MOV     ?V0 + 4,R2
   \   000035   8B..         MOV     ?V0 + 5,R3
   \   000037   E5..         MOV     A,?V0 + 4
   \   000039   7002         JNZ     ??TransmitApp_ProcessEvent_5
   \   00003B   E5..         MOV     A,?V0 + 5
   \                     ??TransmitApp_ProcessEvent_5:
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??TransmitApp_ProcessEvent_6 & 0xFFFF
   \   000042   85..82       MOV     DPL,?V0 + 4
   \   000045   85..83       MOV     DPH,?V0 + 5
   \   000048   E0           MOVX    A,@DPTR
   \   000049   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessEvent>_0`:
   \   00004C   00           DB        0
   \   00004D   05           DB        5
   \   00004E   1A           DB        26
   \   00004F   ....         DW        ??TransmitApp_ProcessEvent_7
   \   000051   C0           DB        192
   \   000052   ....         DW        ??TransmitApp_ProcessEvent_8
   \   000054   D1           DB        209
   \   000055   ....         DW        ??TransmitApp_ProcessEvent_3
   \   000057   D3           DB        211
   \   000058   ....         DW        ??TransmitApp_ProcessEvent_9
   \   00005A   FD           DB        253
   \   00005B   ....         DW        ??TransmitApp_ProcessEvent_10
   \   00005D   ....         DW        ??TransmitApp_ProcessEvent_4
   \                     ??TransmitApp_ProcessEvent_9:
   \   00005F                ; Setup parameters for call to function TransmitApp_ProcessZDOMsgs
   \   00005F   AA..         MOV     R2,?V0 + 4
   \   000061   AB..         MOV     R3,?V0 + 5
   \   000063   12....       LCALL   ??TransmitApp_ProcessZDOMsgs?relay
   \   000066   80BC         SJMP    ??TransmitApp_ProcessEvent_4
   \                     ??TransmitApp_ProcessEvent_8:
   \   000068                ; Setup parameters for call to function TransmitApp_HandleKeys
   \   000068   85..82       MOV     DPL,?V0 + 4
   \   00006B   85..83       MOV     DPH,?V0 + 5
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??TransmitApp_HandleKeys?relay
   \   000078   80AA         SJMP    ??TransmitApp_ProcessEvent_4
   \                     ??TransmitApp_ProcessEvent_10:
   \   00007A   85..82       MOV     DPL,?V0 + 4
   \   00007D   85..83       MOV     DPH,?V0 + 5
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   7037         JNZ     ??TransmitApp_ProcessEvent_11
   \   000084   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000087   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00008A   6A           XRL     A,R2
   \   00008B   702E         JNZ     ??TransmitApp_ProcessEvent_11
   \   00008D   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000090   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000093   90....       MOV     DPTR,#txAccum
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?L_ADD_TO_X
   \   00009B   90....       MOV     DPTR,#timerOn
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   701A         JNZ     ??TransmitApp_ProcessEvent_11
   \   0000A1                ; Setup parameters for call to function osal_start_timerEx
   \   0000A1   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000A4                ; Setup parameters for call to function osal_GetSystemClock
   \   0000A4   12....       LCALL   ??osal_GetSystemClock?relay
   \   0000A7   90....       MOV     DPTR,#clkShdw
   \   0000AA   EA           MOV     A,R2
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   EB           MOV     A,R3
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   EC           MOV     A,R4
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   ED           MOV     A,R5
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   90....       MOV     DPTR,#timerOn
   \   0000BA   F0           MOVX    @DPTR,A
   \                     ??TransmitApp_ProcessEvent_11:
   \   0000BB                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000BB   12....       LCALL   ??TransmitApp_SetSendEvt?relay
   \   0000BE   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
   \                     ??TransmitApp_ProcessEvent_7:
   \   0000C1                ; Setup parameters for call to function TransmitApp_MessageMSGCB
   \   0000C1   AA..         MOV     R2,?V0 + 4
   \   0000C3   AB..         MOV     R3,?V0 + 5
   \   0000C5   12....       LCALL   ??TransmitApp_MessageMSGCB?relay
   \   0000C8   02....       LJMP    ??TransmitApp_ProcessEvent_4 & 0xFFFF
    391              }
    392          
    393              // Squash compiler warnings until values are used.
    394              (void)sentStatus;
    395              (void)sentEP;
    396          
    397              // Return unprocessed events
    398              return (events ^ SYS_EVENT_MSG);
   \                     ??TransmitApp_ProcessEvent_6:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   7480         MOV     A,#-0x80
   \   0000CF   6F           XRL     A,R7
   \                     ??TransmitApp_ProcessEvent_12:
   \   0000D0   FB           MOV     R3,A
   \   0000D1   8035         SJMP    ??TransmitApp_ProcessEvent_13
    399            }
    400          
    401            // Send a message out
    402            if ( events & TRANSMITAPP_SEND_MSG_EVT )
   \                     ??TransmitApp_ProcessEvent_1:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D6   5012         JNC     ??TransmitApp_ProcessEvent_14
    403            {
    404              if ( TransmitApp_State == TRANSMITAPP_STATE_SENDING )
   \   0000D8   90....       MOV     DPTR,#TransmitApp_State
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   7003         JNZ     ??TransmitApp_ProcessEvent_15
    405              {
    406                TransmitApp_SendTheMessage();
   \   0000E0                ; Setup parameters for call to function TransmitApp_SendTheMessage
   \   0000E0   12....       LCALL   ??TransmitApp_SendTheMessage?relay
    407              }
    408          
    409              // Return unprocessed events
    410              return (events ^ TRANSMITAPP_SEND_MSG_EVT);
   \                     ??TransmitApp_ProcessEvent_15:
   \   0000E3   7401         MOV     A,#0x1
   \                     ??TransmitApp_ProcessEvent_16:
   \   0000E5   6E           XRL     A,R6
   \   0000E6   FA           MOV     R2,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   80E6         SJMP    ??TransmitApp_ProcessEvent_12
    411            }
    412          
    413            // Timed wait from error
    414            if ( events & TRANSMITAPP_SEND_ERR_EVT )
   \                     ??TransmitApp_ProcessEvent_14:
   \   0000EA   5404         ANL     A,#0x4
   \   0000EC   6007         JZ      ??TransmitApp_ProcessEvent_17
    415            {
    416              TransmitApp_SetSendEvt();
   \   0000EE                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   0000EE   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    417          
    418              // Return unprocessed events
    419              return (events ^ TRANSMITAPP_SEND_ERR_EVT);
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   80F0         SJMP    ??TransmitApp_ProcessEvent_16
    420            }
    421          
    422            // Receive timer
    423            if ( events & TRANSMITAPP_RCVTIMER_EVT )
   \                     ??TransmitApp_ProcessEvent_17:
   \   0000F5   EE           MOV     A,R6
   \   0000F6   5402         ANL     A,#0x2
   \   0000F8   600A         JZ      ??TransmitApp_ProcessEvent_18
    424            {
    425              // Setup to display the next result
    426              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    427                                                      TRANSMITAPP_DISPLAY_TIMER );
   \   0000FA                ; Setup parameters for call to function osal_start_timerEx
   \   0000FA   12....       LCALL   ?Subroutine6 & 0xFFFF
    428              TransmitApp_DisplayResults();
   \                     ??CrossCallReturnLabel_20:
   \   0000FD                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   0000FD   12....       LCALL   ??TransmitApp_DisplayResults?relay
    429          
    430              return (events ^ TRANSMITAPP_RCVTIMER_EVT);
   \   000100   7402         MOV     A,#0x2
   \   000102   80E1         SJMP    ??TransmitApp_ProcessEvent_16
    431            }
    432          
    433            // Discard unknown events
    434            return 0;
   \                     ??TransmitApp_ProcessEvent_18:
   \   000104   7A00         MOV     R2,#0x0
   \   000106   7B00         MOV     R3,#0x0
   \                     ??TransmitApp_ProcessEvent_13:
   \   000108                REQUIRE ?Subroutine10
   \   000108                ; // Fall through to label ?Subroutine10
    435          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7CD0         MOV     R4,#-0x30
   \   000002   7D07         MOV     R5,#0x7
   \   000004   7A02         MOV     R2,#0x2
   \   000006                REQUIRE ??Subroutine13_0
   \   000006                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   85..82       MOV     DPL,?V0 + 4
   \   000005   85..83       MOV     DPH,?V0 + 5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   75..00       MOV     ?V0 + 2,#0x0
   \   00000A   75..00       MOV     ?V0 + 3,#0x0
   \   00000D   22           RET
    436          
    437          /*********************************************************************
    438           * Event Generation Functions
    439           */
    440          /*********************************************************************
    441           * @fn      TransmitApp_ProcessZDOMsgs()
    442           *
    443           * @brief   Process response messages
    444           *
    445           * @param   none
    446           *
    447           * @return  none
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void TransmitApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TransmitApp_ProcessZDOMsgs:
    450          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    451            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 1,A
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TransmitApp_ProcessZDOMsgs>_0`:
   \   00001A   0000         DW        0
   \   00001C   0200         DW        2
   \   00001E   0680         DW        32774
   \   000020   ....         DW        ??TransmitApp_ProcessZDOMsgs_0
   \   000022   2080         DW        32800
   \   000024   ....         DW        ??TransmitApp_ProcessZDOMsgs_1
   \   000026   ....         DW        ??TransmitApp_ProcessZDOMsgs_2
    452            {
    453              case End_Device_Bind_rsp:
    454                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TransmitApp_ProcessZDOMsgs_1:
   \   000028   EA           MOV     A,R2
   \   000029   2413         ADD     A,#0x13
   \   00002B   F582         MOV     DPL,A
   \   00002D   EB           MOV     A,R3
   \   00002E   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7009         JNZ     ??TransmitApp_ProcessZDOMsgs_3
    455                {
    456                  // Light LED
    457                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A01         MOV     R2,#0x1
   \                     ??TransmitApp_ProcessZDOMsgs_4:
   \   00003E   7908         MOV     R1,#0x8
   \   000040   12....       LCALL   ??HalLedSet?relay
   \   000043   8055         SJMP    ??TransmitApp_ProcessZDOMsgs_2
    458                }
    459          #if defined(BLINK_LEDS)
    460                else
    461                {
    462                  // Flash LED to show failure
    463                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??TransmitApp_ProcessZDOMsgs_3:
   \   000045                ; Setup parameters for call to function HalLedSet
   \   000045   7A04         MOV     R2,#0x4
   \   000047   80F5         SJMP    ??TransmitApp_ProcessZDOMsgs_4
    464                }
    465          #endif
    466                break;
    467          
    468              case Match_Desc_rsp:
    469                {
    470                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TransmitApp_ProcessZDOMsgs_0:
   \   000049                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000049   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   AE..         MOV     R6,?V0 + 0
   \   000052   AF..         MOV     R7,?V0 + 1
    471                  if ( pRsp )
   \   000054   EE           MOV     A,R6
   \   000055   7001         JNZ     ??TransmitApp_ProcessZDOMsgs_5
   \   000057   EF           MOV     A,R7
   \                     ??TransmitApp_ProcessZDOMsgs_5:
   \   000058   6040         JZ      ??TransmitApp_ProcessZDOMsgs_2
    472                  {
    473                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7032         JNZ     ??TransmitApp_ProcessZDOMsgs_6
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   602C         JZ      ??TransmitApp_ProcessZDOMsgs_6
    474                    {
    475                      TransmitApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000067   7402         MOV     A,#0x2
   \   000069   90....       MOV     DPTR,#(TransmitApp_DstAddr + 8)
   \   00006C   F0           MOVX    @DPTR,A
    476                      TransmitApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#TransmitApp_DstAddr
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    477                      // Take the first endpoint, Can be changed to search through endpoints
    478                      TransmitApp_DstAddr.endPoint = pRsp->epList[0];
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   90....       MOV     DPTR,#(TransmitApp_DstAddr + 9)
   \   00008B   F0           MOVX    @DPTR,A
    479          
    480                      // Light LED
    481                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008C                ; Setup parameters for call to function HalLedSet
   \   00008C   7A01         MOV     R2,#0x1
   \   00008E   7908         MOV     R1,#0x8
   \   000090   12....       LCALL   ??HalLedSet?relay
    482                    }
    483                    osal_mem_free( pRsp );
   \                     ??TransmitApp_ProcessZDOMsgs_6:
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   ??osal_mem_free?relay
    484                  }
    485                }
    486                break;
    487            }
    488          }
   \                     ??TransmitApp_ProcessZDOMsgs_2:
   \   00009A                REQUIRE ?Subroutine11
   \   00009A                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    489          
    490          /*********************************************************************
    491           * @fn      TransmitApp_HandleKeys
    492           *
    493           * @brief   Handles all key events for this device.
    494           *
    495           * @param   shift - true if in shift/alt.
    496           * @param   keys - bit field for key events. Valid entries:
    497           *                 EVAL_SW4
    498           *                 EVAL_SW3
    499           *                 EVAL_SW2
    500           *                 EVAL_SW1
    501           *
    502           * @return  none
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void TransmitApp_HandleKeys( byte shift, byte keys )
   \                     TransmitApp_HandleKeys:
    505          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    506            zAddrType_t dstAddr;
    507          
    508            // Shift is used to make each button/switch dual purpose.
    509            if ( shift )
   \   00000C   E9           MOV     A,R1
   \   00000D   6003         JZ      $+5
   \   00000F   02....       LJMP    ??TransmitApp_HandleKeys_0 & 0xFFFF
    510            {
    511              if ( keys & HAL_KEY_SW_1 )
    512              {
    513              }
    514              if ( keys & HAL_KEY_SW_2 )
    515              {
    516              }
    517              if ( keys & HAL_KEY_SW_3 )
    518              {
    519              }
    520              if ( keys & HAL_KEY_SW_4 )
    521              {
    522              }
    523            }
    524            else
    525            {
    526              if ( keys & HAL_KEY_SW_1 )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   5003         JNC     ??TransmitApp_HandleKeys_1
    527              {
    528                TransmitApp_ChangeState();
   \   000017                ; Setup parameters for call to function TransmitApp_ChangeState
   \   000017   12....       LCALL   ??TransmitApp_ChangeState?relay
    529              }
    530          
    531              if ( keys & HAL_KEY_SW_2 )
   \                     ??TransmitApp_HandleKeys_1:
   \   00001A   75....       MOV     ?V0 + 4,#(TransmitApp_ClusterList & 0xff)
   \   00001D   75....       MOV     ?V0 + 5,#((TransmitApp_ClusterList >> 8) & 0xff)
   \   000020   EE           MOV     A,R6
   \   000021   A2E1         MOV     C,0xE0 /* A   */.1
   \   000023   5060         JNC     ??TransmitApp_HandleKeys_2
    532              {
    533                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7908         MOV     R1,#0x8
   \   000029   12....       LCALL   ??HalLedSet?relay
    534          
    535                // Initiate an End Device Bind Request for the mandatory endpoint
    536                dstAddr.addrMode = Addr16Bit;
   \   00002C   7408         MOV     A,#0x8
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?Subroutine2 & 0xFFFF
    537                dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \                     ??CrossCallReturnLabel_8:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
    538                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    539                                      TransmitApp_epDesc.endPoint,
    540                                      TRANSMITAPP_PROFID,
    541                                      TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
    542                                      TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
    543                                      FALSE );
   \   00003A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003A   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   AC..         MOV     R4,?V0 + 0
   \   000043   AD..         MOV     R5,?V0 + 1
   \   000045                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000045   75..00       MOV     ?V0 + 0,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004D   78..         MOV     R0,#?V0 + 4
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   78..         MOV     R0,#?V0 + 4
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75..05       MOV     ?V0 + 0,#0x5
   \   000067   75..0F       MOV     ?V0 + 1,#0xf
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   90....       MOV     DPTR,#TransmitApp_epDesc
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000080   7409         MOV     A,#0x9
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    544              }
    545          
    546              if ( keys & HAL_KEY_SW_3 )
   \                     ??TransmitApp_HandleKeys_2:
   \   000085   EE           MOV     A,R6
   \   000086   A2E4         MOV     C,0xE0 /* A   */.4
   \   000088   502C         JNC     ??TransmitApp_HandleKeys_3
    547              {
    548                rxTotal = txTotal = 0;
   \   00008A   90....       MOV     DPTR,#__Constant_0
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?L_MOV_X
   \   000092   90....       MOV     DPTR,#txTotal
   \   000095   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000098   12....       LCALL   ?L_MOV_X
   \   00009B   90....       MOV     DPTR,#rxTotal
   \   00009E   12....       LCALL   ?Subroutine0 & 0xFFFF
    549                rxAccum = txAccum = 0;
   \                     ??CrossCallReturnLabel_0:
   \   0000A1   12....       LCALL   ?L_MOV_X
   \   0000A4   90....       MOV     DPTR,#txAccum
   \   0000A7   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000AA   12....       LCALL   ?L_MOV_X
   \   0000AD   90....       MOV     DPTR,#rxAccum
   \   0000B0   12....       LCALL   ?Subroutine8 & 0xFFFF
    550                TransmitApp_DisplayResults();
   \                     ??CrossCallReturnLabel_17:
   \   0000B3                ; Setup parameters for call to function TransmitApp_DisplayResults
   \   0000B3   12....       LCALL   ??TransmitApp_DisplayResults?relay
    551              }
    552          
    553              if ( keys & HAL_KEY_SW_4 )
   \                     ??TransmitApp_HandleKeys_3:
   \   0000B6   EE           MOV     A,R6
   \   0000B7   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B9   5052         JNC     ??TransmitApp_HandleKeys_0
    554              {
    555                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   0000BB                ; Setup parameters for call to function HalLedSet
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7908         MOV     R1,#0x8
   \   0000BF   12....       LCALL   ??HalLedSet?relay
    556          
    557                // Initiate a Match Description Request (Service Discovery)
    558                dstAddr.addrMode = AddrBroadcast;
   \   0000C2   7408         MOV     A,#0x8
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   740F         MOV     A,#0xf
   \   0000C9   12....       LCALL   ?Subroutine2 & 0xFFFF
    559                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \                     ??CrossCallReturnLabel_9:
   \   0000CC   74FF         MOV     A,#-0x1
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   F0           MOVX    @DPTR,A
    560                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    561                                  TRANSMITAPP_PROFID,
    562                                  TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
    563                                  TRANSMITAPP_MAX_CLUSTERS, (cId_t *)TransmitApp_ClusterList,
    564                                  FALSE );
   \   0000D1                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000D1   75..00       MOV     ?V0 + 0,#0x0
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D9   78..         MOV     R0,#?V0 + 4
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   75..01       MOV     ?V0 + 0,#0x1
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E6   78..         MOV     R0,#?V0 + 4
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EB   75..05       MOV     ?V0 + 0,#0x5
   \   0000EE   75..0F       MOV     ?V0 + 1,#0xf
   \   0000F1   78..         MOV     R0,#?V0 + 0
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   7901         MOV     R1,#0x1
   \   0000F8   7CFF         MOV     R4,#-0x1
   \   0000FA   7DFF         MOV     R5,#-0x1
   \   0000FC   7408         MOV     A,#0x8
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   AA82         MOV     R2,DPL
   \   000103   AB83         MOV     R3,DPH
   \   000105   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   000108   7408         MOV     A,#0x8
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
    565              }
    566            }
    567          }
   \                     ??TransmitApp_HandleKeys_0:
   \   00010D   7409         MOV     A,#0x9
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   02....       LJMP    ?Subroutine10 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   90....       MOV     DPTR,#__Constant_0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E5..         MOV     A,?V0 + 3
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET
    568          
    569          /*********************************************************************
    570           * LOCAL FUNCTIONS
    571           */
    572          
    573          /*********************************************************************
    574           * @fn      TransmitApp_MessageMSGCB
    575           *
    576           * @brief   Data message processor callback.  This function processes
    577           *          any incoming data - probably from other devices.  So, based
    578           *          on cluster ID, perform the intended action.
    579           *
    580           * @param   none
    581           *
    582           * @return  none
    583           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          void TransmitApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TransmitApp_MessageMSGCB:
    585          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    586            int16 i;
    587            uint8 error = FALSE;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
    588          
    589            switch ( pkt->clusterId )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   7002         JNZ     ??TransmitApp_MessageMSGCB_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \                     ??TransmitApp_MessageMSGCB_0:
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??TransmitApp_MessageMSGCB_1 & 0xFFFF
    590            {
    591              case TRANSMITAPP_CLUSTERID_TESTMSG:
    592          #if !defined ( TRANSMITAPP_RANDOM_LEN )
    593                if (pkt->cmd.DataLength != TransmitApp_MaxDataLength)
   \   000020   EA           MOV     A,R2
   \   000021   241F         ADD     A,#0x1f
   \   000023   FE           MOV     R6,A
   \   000024   EB           MOV     A,R3
   \   000025   3400         ADDC    A,#0x0
   \   000027   FF           MOV     R7,A
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 7,A
   \   000033   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000036   E0           MOVX    A,@DPTR
   \   000037   65..         XRL     A,?V0 + 6
   \   000039   7004         JNZ     ??TransmitApp_MessageMSGCB_2
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0 + 7
   \                     ??TransmitApp_MessageMSGCB_2:
   \   00003F   6003         JZ      ??TransmitApp_MessageMSGCB_3
    594                {
    595                  error = TRUE;
   \   000041   75..01       MOV     ?V0 + 4,#0x1
    596                }
    597          #endif
    598          
    599                for (i=4; i<pkt->cmd.DataLength; i++)
   \                     ??TransmitApp_MessageMSGCB_3:
   \   000044   7C04         MOV     R4,#0x4
   \   000046   7D00         MOV     R5,#0x0
   \   000048   8036         SJMP    ??TransmitApp_MessageMSGCB_4
    600                {
    601                  if (pkt->cmd.Data[i] != i%256)
   \                     ??TransmitApp_MessageMSGCB_5:
   \   00004A   E5..         MOV     A,?V0 + 0
   \   00004C   2421         ADD     A,#0x21
   \   00004E   F582         MOV     DPL,A
   \   000050   E5..         MOV     A,?V0 + 1
   \   000052   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2C           ADD     A,R4
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   3D           ADDC    A,R5
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   F583         MOV     DPH,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F582         MOV     DPL,A
   \   000062   EC           MOV     A,R4
   \   000063   F8           MOV     R0,A
   \   000064   ED           MOV     A,R5
   \   000065   F9           MOV     R1,A
   \   000066   7A00         MOV     R2,#0x0
   \   000068   7B01         MOV     R3,#0x1
   \   00006A   12....       LCALL   ?S_DIV_MOD
   \   00006D   EA           MOV     A,R2
   \   00006E   6582         XRL     A,DPL
   \   000070   7001         JNZ     ??TransmitApp_MessageMSGCB_6
   \   000072   EB           MOV     A,R3
   \                     ??TransmitApp_MessageMSGCB_6:
   \   000073   6003         JZ      ??TransmitApp_MessageMSGCB_7
    602                    error = TRUE;
   \   000075   75..01       MOV     ?V0 + 4,#0x1
    603                }
   \                     ??TransmitApp_MessageMSGCB_7:
   \   000078   EC           MOV     A,R4
   \   000079   2401         ADD     A,#0x1
   \   00007B   0C           INC     R4
   \   00007C   ED           MOV     A,R5
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   FD           MOV     R5,A
   \                     ??TransmitApp_MessageMSGCB_4:
   \   000080   C3           CLR     C
   \   000081   EC           MOV     A,R4
   \   000082   95..         SUBB    A,?V0 + 6
   \   000084   ED           MOV     A,R5
   \   000085   95..         SUBB    A,?V0 + 7
   \   000087   40C1         JC      ??TransmitApp_MessageMSGCB_5
    604          
    605                if (error)
   \   000089   E5..         MOV     A,?V0 + 4
   \   00008B   6009         JZ      ??TransmitApp_MessageMSGCB_8
    606                {
    607                  // Display error LED
    608                  HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   00008D                ; Setup parameters for call to function HalLedSet
   \   00008D   7A01         MOV     R2,#0x1
   \   00008F   7901         MOV     R1,#0x1
   \   000091   12....       LCALL   ??HalLedSet?relay
   \   000094   8024         SJMP    ??TransmitApp_MessageMSGCB_1
    609                }
    610                else
    611                {
    612                  if ( !timerOn )
   \                     ??TransmitApp_MessageMSGCB_8:
   \   000096   90....       MOV     DPTR,#timerOn
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   700F         JNZ     ??TransmitApp_MessageMSGCB_9
    613                  {
    614                    osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT,
    615                                                            TRANSMITAPP_DISPLAY_TIMER );
   \   00009C                ; Setup parameters for call to function osal_start_timerEx
   \   00009C   12....       LCALL   ?Subroutine6 & 0xFFFF
    616                    clkShdw = osal_GetSystemClock();
   \                     ??CrossCallReturnLabel_21:
   \   00009F                ; Setup parameters for call to function osal_GetSystemClock
   \   00009F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000A2   12....       LCALL   ?L_MOV_TO_X
    617                    timerOn = TRUE;
   \   0000A5   7401         MOV     A,#0x1
   \   0000A7   90....       MOV     DPTR,#timerOn
   \   0000AA   F0           MOVX    @DPTR,A
    618                  }
    619                  rxAccum += pkt->cmd.DataLength;
   \                     ??TransmitApp_MessageMSGCB_9:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   12....       LCALL   ?Subroutine4 & 0xFFFF
    620                }
    621                break;
    622          
    623              // Could receive control messages in the future.
    624              default:
    625                break;
    626            }
   \                     ??CrossCallReturnLabel_14:
   \   0000B2   90....       MOV     DPTR,#rxAccum
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?L_ADD_TO_X
    627          }
   \                     ??TransmitApp_MessageMSGCB_1:
   \   0000BA                REQUIRE ?Subroutine12
   \   0000BA                ; // Fall through to label ?Subroutine12

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??osal_GetSystemClock?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   8C..         MOV     ?V0 + 2,R4
   \   000009   8D..         MOV     ?V0 + 3,R5
   \   00000B   90....       MOV     DPTR,#clkShdw
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET
    628          
    629          /*********************************************************************
    630           * @fn      TransmitApp_SendTheMessage
    631           *
    632           * @brief   Send "the" message.
    633           *
    634           * @param   none
    635           *
    636           * @return  none
    637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    638          void TransmitApp_SendTheMessage( void )
   \                     TransmitApp_SendTheMessage:
    639          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    640            uint16 len;
    641            uint8 tmp;
    642          
    643            do {
    644              // put the sequence number in the message
    645              tmp = HI_UINT8( TransmitApp_TransID );
   \                     ??TransmitApp_SendTheMessage_0:
   \   000005   90....       MOV     DPTR,#TransmitApp_TransID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C4           SWAP    A
   \   00000A   540F         ANL     A,#0xf
   \   00000C   FA           MOV     R2,A
    646              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   00000D   C3           CLR     C
   \   00000E   940A         SUBB    A,#0xa
   \   000010   5004         JNC     ??TransmitApp_SendTheMessage_1
   \   000012   7830         MOV     R0,#0x30
   \   000014   8002         SJMP    ??TransmitApp_SendTheMessage_2
   \                     ??TransmitApp_SendTheMessage_1:
   \   000016   7837         MOV     R0,#0x37
   \                     ??TransmitApp_SendTheMessage_2:
   \   000018   E8           MOV     A,R0
   \   000019   2A           ADD     A,R2
    647              TransmitApp_Msg[2] = tmp;
   \   00001A   90....       MOV     DPTR,#(TransmitApp_Msg + 2)
   \   00001D   F0           MOVX    @DPTR,A
    648              tmp = LO_UINT8( TransmitApp_TransID );
   \   00001E   90....       MOV     DPTR,#TransmitApp_TransID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   FA           MOV     R2,A
    649              tmp += (tmp <= 9) ? ('0') : ('A' - 0x0A);
   \   000025   C3           CLR     C
   \   000026   940A         SUBB    A,#0xa
   \   000028   5004         JNC     ??TransmitApp_SendTheMessage_3
   \   00002A   7830         MOV     R0,#0x30
   \   00002C   8002         SJMP    ??TransmitApp_SendTheMessage_4
   \                     ??TransmitApp_SendTheMessage_3:
   \   00002E   7837         MOV     R0,#0x37
   \                     ??TransmitApp_SendTheMessage_4:
   \   000030   E8           MOV     A,R0
   \   000031   2A           ADD     A,R2
    650              TransmitApp_Msg[3] = tmp;
   \   000032   90....       MOV     DPTR,#(TransmitApp_Msg + 3)
   \   000035   F0           MOVX    @DPTR,A
    651            
    652              len = TransmitApp_MaxDataLength;
    653            
    654          #if defined ( TRANSMITAPP_RANDOM_LEN )
    655              len = (uint8)(osal_rand() & 0x7F);
    656              if( len > TransmitApp_MaxDataLength || len == 0 )
    657                len = TransmitApp_MaxDataLength;
    658              else if ( len < 4 )
    659                len = 4;
    660          #endif
    661          	
    662              tmp = AF_DataRequest( &TransmitApp_DstAddr, &TransmitApp_epDesc,
    663                                     TRANSMITAPP_CLUSTERID_TESTMSG,
    664                                     len, TransmitApp_Msg,
    665                                    &TransmitApp_TransID,
    666                                     TRANSMITAPP_TX_OPTIONS,
    667                                     AF_DEFAULT_RADIUS );
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV     ?V0 + 0,#0x1e
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV     ?V0 + 0,#(TransmitApp_TransID & 0xff)
   \   000041   75....       MOV     ?V0 + 1,#((TransmitApp_TransID >> 8) & 0xff)
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75....       MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
   \   00004C   75....       MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#TransmitApp_MaxDataLength
   \   000057   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005A   75..01       MOV     ?V0 + 0,#0x1
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#(TransmitApp_epDesc & 0xff)
   \   000069   7D..         MOV     R5,#((TransmitApp_epDesc >> 8) & 0xff)
   \   00006B   7A..         MOV     R2,#(TransmitApp_DstAddr & 0xff)
   \   00006D   7B..         MOV     R3,#((TransmitApp_DstAddr >> 8) & 0xff)
   \   00006F   12....       LCALL   ??AF_DataRequest?relay
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FA           MOV     R2,A
    668              
    669          #if defined ( TRANSMITAPP_RANDOM_LEN )
    670              if ( tmp == afStatus_SUCCESS )
    671              {
    672                txAccum += len;
    673              }
    674          #endif
    675          
    676              if ( timesToSend )
   \   000079   90....       MOV     DPTR,#timesToSend
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   600A         JZ      ??TransmitApp_SendTheMessage_5
    677              {
    678                timesToSend--;
    679              }
    680            } while ( (timesToSend != 0) && (afStatus_SUCCESS == tmp) );
   \   00007F   14           DEC     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   6006         JZ      ??TransmitApp_SendTheMessage_5
   \   000083   EA           MOV     A,R2
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??TransmitApp_SendTheMessage_0 & 0xFFFF
    681          
    682            if ( afStatus_SUCCESS == tmp )
   \                     ??TransmitApp_SendTheMessage_5:
   \   000089   EA           MOV     A,R2
   \   00008A   700E         JNZ     ??TransmitApp_SendTheMessage_6
    683            {
    684              pktCounter++;
   \   00008C   90....       MOV     DPTR,#pktCounter
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   2401         ADD     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   3400         ADDC    A,#0x0
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8009         SJMP    ??CrossCallReturnLabel_22
    685            }
    686            else
    687            {
    688              // Error, so wait (10 mSec) and try again.
    689              osal_start_timerEx( TransmitApp_TaskID, TRANSMITAPP_SEND_ERR_EVT, 10 );
   \                     ??TransmitApp_SendTheMessage_6:
   \   00009A                ; Setup parameters for call to function osal_start_timerEx
   \   00009A   7C0A         MOV     R4,#0xa
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7A04         MOV     R2,#0x4
   \   0000A0   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    690            }
    691          }
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   02....       LJMP    ?Subroutine11 & 0xFFFF
    692          
    693          /*********************************************************************
    694           * @fn      TransmitApp_ChangeState
    695           *
    696           * @brief   Toggle the Sending/Waiting state flag
    697           *
    698           * @param   none
    699           *
    700           * @return  none
    701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    702          void TransmitApp_ChangeState( void )
   \                     TransmitApp_ChangeState:
    703          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    704            if ( TransmitApp_State == TRANSMITAPP_STATE_WAITING )
   \   000004   90....       MOV     DPTR,#TransmitApp_State
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??TransmitApp_ChangeState_0
    705            {
    706              TransmitApp_State = TRANSMITAPP_STATE_SENDING;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
    707              TransmitApp_SetSendEvt();
   \   00000D                ; Setup parameters for call to function TransmitApp_SetSendEvt
   \   00000D   12....       LCALL   ??TransmitApp_SetSendEvt?relay
    708              timesToSend = TRANSMITAPP_INITIAL_MSG_COUNT;
   \   000010   7402         MOV     A,#0x2
   \   000012   90....       MOV     DPTR,#timesToSend
   \   000015   8001         SJMP    ??TransmitApp_ChangeState_1
    709            }
    710            else
    711            {
    712              TransmitApp_State = TRANSMITAPP_STATE_WAITING;
   \                     ??TransmitApp_ChangeState_0:
   \   000017   E4           CLR     A
   \                     ??TransmitApp_ChangeState_1:
   \   000018   F0           MOVX    @DPTR,A
    713            }
    714          }
   \   000019   02....       LJMP    ?Subroutine9 & 0xFFFF
    715          
    716          /*********************************************************************
    717           * @fn      TransmitApp_SetSendEvt
    718           *
    719           * @brief   Set the event flag
    720           *
    721           * @param   none
    722           *
    723           * @return  none
    724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    725          void TransmitApp_SetSendEvt( void )
   \                     TransmitApp_SetSendEvt:
    726          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    727          #if defined( TRANSMITAPP_DELAY_SEND )
    728            // Adds a delay to sending the data
    729            osal_start_timerEx( TransmitApp_TaskID,
    730                              TRANSMITAPP_SEND_MSG_EVT, TRANSMITAPP_SEND_DELAY );
    731          #else
    732            // No Delay - just send the data
    733            osal_set_event( TransmitApp_TaskID, TRANSMITAPP_SEND_MSG_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#TransmitApp_TaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_set_event?relay
    734          #endif
    735          }
   \   000010   02....       LJMP    ?Subroutine9 & 0xFFFF
    736          
    737          /*********************************************************************
    738           * @fn      TransmitApp_DisplayResults
    739           *
    740           * @brief   Display the results and clear the accumulators
    741           *
    742           * @param   none
    743           *
    744           * @return  none
    745           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   E583         MOV     A,DPH
   \   000008                REQUIRE ??Subroutine14_0
   \   000008                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    746          void TransmitApp_DisplayResults( void )
   \                     TransmitApp_DisplayResults:
    747          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    748          #ifdef LCD_SUPPORTED
    749            #define LCD_W  16
    750            uint32 rxShdw, txShdw, tmp;
    751            byte lcd_buf[LCD_W+1];
    752            byte idx;
    753          #endif
    754            // The OSAL timers are not real-time, so calculate the actual time expired.
    755            uint32 msecs = osal_GetSystemClock() - clkShdw;
   \   00000A                ; Setup parameters for call to function osal_GetSystemClock
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000D   12....       LCALL   ?L_SUB_X
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?L_MOV_TO_X
    756            clkShdw = osal_GetSystemClock();
   \   00001B                ; Setup parameters for call to function osal_GetSystemClock
   \   00001B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00001E   12....       LCALL   ?L_MOV_TO_X
    757          
    758            rxTotal += rxAccum;
   \   000021   90....       MOV     DPTR,#rxAccum
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   90....       MOV     DPTR,#rxTotal
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_ADD_TO_X
    759            txTotal += txAccum;
   \   000031   90....       MOV     DPTR,#txAccum
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?L_MOV_X
   \   000039   90....       MOV     DPTR,#txTotal
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?L_ADD_TO_X
    760          
    761          #if defined ( LCD_SUPPORTED )
    762            rxShdw = (rxAccum * 1000 + msecs/2) / msecs;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?L_MOV_X
   \   00004C   7401         MOV     A,#0x1
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?UL_SHR
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?L_MOV_TO_X
   \   00005D   90....       MOV     DPTR,#rxAccum
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?L_MOV_X
   \   000065   90....       MOV     DPTR,#__Constant_3e8
   \   000068   78..         MOV     R0,#?V0 + 4
   \   00006A   12....       LCALL   ?L_MOV_X
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   79..         MOV     R1,#?V0 + 4
   \   000071   12....       LCALL   ?L_MUL
   \   000074   740C         MOV     A,#0xc
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?L_ADD_X
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   78..         MOV     R0,#?V0 + 4
   \   000086   12....       LCALL   ?L_MOV_X
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   79..         MOV     R1,#?V0 + 4
   \   00008D   12....       LCALL   ?UL_DIV_MOD
   \   000090   7408         MOV     A,#0x8
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?L_MOV_TO_X
    763            txShdw = (txAccum * 1000 + msecs/2) / msecs;
   \   00009A   90....       MOV     DPTR,#txAccum
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   90....       MOV     DPTR,#__Constant_3e8
   \   0000A5   78..         MOV     R0,#?V0 + 4
   \   0000A7   12....       LCALL   ?L_MOV_X
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   79..         MOV     R1,#?V0 + 4
   \   0000AE   12....       LCALL   ?L_MUL
   \   0000B1   740C         MOV     A,#0xc
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_ADD_X
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?L_MOV_X
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   79..         MOV     R1,#?V0 + 4
   \   0000CA   12....       LCALL   ?UL_DIV_MOD
   \   0000CD   7404         MOV     A,#0x4
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   78..         MOV     R0,#?V0 + 0
   \   0000D4   12....       LCALL   ?L_MOV_TO_X
    764          
    765            osal_memset( lcd_buf, ' ', LCD_W );
   \   0000D7                ; Setup parameters for call to function osal_memset
   \   0000D7   7C10         MOV     R4,#0x10
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7920         MOV     R1,#0x20
   \   0000DD   EC           MOV     A,R4
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   AA82         MOV     R2,DPL
   \   0000E3   AB83         MOV     R3,DPH
   \   0000E5   12....       LCALL   ??osal_memset?relay
    766            lcd_buf[LCD_W] = NULL;
   \   0000E8   7420         MOV     A,#0x20
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E4           CLR     A
   \   0000EE   F0           MOVX    @DPTR,A
    767          
    768            idx = 4;
   \   0000EF   7A04         MOV     R2,#0x4
    769            tmp = (rxShdw >= 100000) ? 99999 : rxShdw;
   \   0000F1   7408         MOV     A,#0x8
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   C082         PUSH    DPL
   \   0000F8   C083         PUSH    DPH
   \   0000FA   90....       MOV     DPTR,#__Constant_186a0
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?L_MOV_X
   \   000102   D083         POP     DPH
   \   000104   D082         POP     DPL
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?UL_GT_X
   \   00010B   4005         JC      ??TransmitApp_DisplayResults_0
   \   00010D   90....       MOV     DPTR,#__Constant_1869f
   \   000110   8005         SJMP    ??TransmitApp_DisplayResults_1
   \                     ??TransmitApp_DisplayResults_0:
   \   000112   7408         MOV     A,#0x8
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??TransmitApp_DisplayResults_1:
   \   000117   78..         MOV     R0,#?V0 + 0
   \   000119   12....       LCALL   ?L_MOV_X
   \   00011C   85..82       MOV     DPL,?XSP + 0
   \   00011F   85..83       MOV     DPH,?XSP + 1
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?L_MOV_TO_X
    770            do
    771            {
    772              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   \                     ??TransmitApp_DisplayResults_2:
   \   000127   85..82       MOV     DPL,?XSP + 0
   \   00012A   85..83       MOV     DPH,?XSP + 1
   \   00012D   78..         MOV     R0,#?V0 + 4
   \   00012F   12....       LCALL   ?L_MOV_X
   \   000132   90....       MOV     DPTR,#__Constant_a
   \   000135   78..         MOV     R0,#?V0 + 0
   \   000137   12....       LCALL   ?L_MOV_X
   \   00013A   78..         MOV     R0,#?V0 + 4
   \   00013C   79..         MOV     R1,#?V0 + 0
   \   00013E   12....       LCALL   ?UL_DIV_MOD
   \   000141   E5..         MOV     A,?V0 + 0
   \   000143   2430         ADD     A,#0x30
   \   000145   C0E0         PUSH    A
   \   000147   8A..         MOV     ?V0 + 0,R2
   \   000149   7410         MOV     A,#0x10
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine7 & 0xFFFF
    773              tmp /= 10;
    774            } while ( tmp );
   \                     ??CrossCallReturnLabel_26:
   \   000151   D0E0         POP     A
   \   000153   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000156   12....       LCALL   ?L_MOV_X
   \   000159   90....       MOV     DPTR,#__Constant_a
   \   00015C   78..         MOV     R0,#?V0 + 0
   \   00015E   12....       LCALL   ?L_MOV_X
   \   000161   78..         MOV     R0,#?V0 + 4
   \   000163   79..         MOV     R1,#?V0 + 0
   \   000165   12....       LCALL   ?UL_DIV_MOD
   \   000168   85..82       MOV     DPL,?XSP + 0
   \   00016B   85..83       MOV     DPH,?XSP + 1
   \   00016E   78..         MOV     R0,#?V0 + 4
   \   000170   12....       LCALL   ?L_MOV_TO_X
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   C082         PUSH    DPL
   \   00017B   C083         PUSH    DPH
   \   00017D   90....       MOV     DPTR,#__Constant_0
   \   000180   78..         MOV     R0,#?V0 + 0
   \   000182   12....       LCALL   ?L_MOV_X
   \   000185   D083         POP     DPH
   \   000187   D082         POP     DPL
   \   000189   78..         MOV     R0,#?V0 + 0
   \   00018B   12....       LCALL   ?L_EQ_X
   \   00018E   7097         JNZ     ??TransmitApp_DisplayResults_2
    775          
    776            idx = LCD_W-1;
   \   000190   7A0F         MOV     R2,#0xf
    777            tmp = rxTotal;
   \   000192   90....       MOV     DPTR,#rxTotal
   \   000195   78..         MOV     R0,#?V0 + 0
   \   000197   12....       LCALL   ?L_MOV_X
   \   00019A   85..82       MOV     DPL,?XSP + 0
   \   00019D   85..83       MOV     DPH,?XSP + 1
   \   0001A0   78..         MOV     R0,#?V0 + 0
   \   0001A2   12....       LCALL   ?L_MOV_TO_X
    778            do
    779            {
    780              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   \                     ??TransmitApp_DisplayResults_3:
   \   0001A5   85..82       MOV     DPL,?XSP + 0
   \   0001A8   85..83       MOV     DPH,?XSP + 1
   \   0001AB   78..         MOV     R0,#?V0 + 4
   \   0001AD   12....       LCALL   ?L_MOV_X
   \   0001B0   90....       MOV     DPTR,#__Constant_a
   \   0001B3   78..         MOV     R0,#?V0 + 0
   \   0001B5   12....       LCALL   ?L_MOV_X
   \   0001B8   78..         MOV     R0,#?V0 + 4
   \   0001BA   79..         MOV     R1,#?V0 + 0
   \   0001BC   12....       LCALL   ?UL_DIV_MOD
   \   0001BF   E5..         MOV     A,?V0 + 0
   \   0001C1   2430         ADD     A,#0x30
   \   0001C3   C0E0         PUSH    A
   \   0001C5   8A..         MOV     ?V0 + 0,R2
   \   0001C7   7410         MOV     A,#0x10
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ?Subroutine7 & 0xFFFF
    781              tmp /= 10;
    782            } while ( tmp );
   \                     ??CrossCallReturnLabel_27:
   \   0001CF   D0E0         POP     A
   \   0001D1   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001D4   12....       LCALL   ?L_MOV_X
   \   0001D7   90....       MOV     DPTR,#__Constant_a
   \   0001DA   78..         MOV     R0,#?V0 + 0
   \   0001DC   12....       LCALL   ?L_MOV_X
   \   0001DF   78..         MOV     R0,#?V0 + 4
   \   0001E1   79..         MOV     R1,#?V0 + 0
   \   0001E3   12....       LCALL   ?UL_DIV_MOD
   \   0001E6   85..82       MOV     DPL,?XSP + 0
   \   0001E9   85..83       MOV     DPH,?XSP + 1
   \   0001EC   78..         MOV     R0,#?V0 + 4
   \   0001EE   12....       LCALL   ?L_MOV_TO_X
   \   0001F1   85..82       MOV     DPL,?XSP + 0
   \   0001F4   85..83       MOV     DPH,?XSP + 1
   \   0001F7   C082         PUSH    DPL
   \   0001F9   C083         PUSH    DPH
   \   0001FB   90....       MOV     DPTR,#__Constant_0
   \   0001FE   78..         MOV     R0,#?V0 + 0
   \   000200   12....       LCALL   ?L_MOV_X
   \   000203   D083         POP     DPH
   \   000205   D082         POP     DPL
   \   000207   78..         MOV     R0,#?V0 + 0
   \   000209   12....       LCALL   ?L_EQ_X
   \   00020C   7097         JNZ     ??TransmitApp_DisplayResults_3
    783          
    784            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_1 );
   \   00020E                ; Setup parameters for call to function HalLcdWriteString
   \   00020E   7901         MOV     R1,#0x1
   \   000210   7410         MOV     A,#0x10
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   AA82         MOV     R2,DPL
   \   000217   AB83         MOV     R3,DPH
   \   000219   12....       LCALL   ??HalLcdWriteString?relay
    785            osal_memset( lcd_buf, ' ', LCD_W );
   \   00021C                ; Setup parameters for call to function osal_memset
   \   00021C   7C10         MOV     R4,#0x10
   \   00021E   7D00         MOV     R5,#0x0
   \   000220   7920         MOV     R1,#0x20
   \   000222   EC           MOV     A,R4
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   AA82         MOV     R2,DPL
   \   000228   AB83         MOV     R3,DPH
   \   00022A   12....       LCALL   ??osal_memset?relay
    786          
    787            idx = 4;
   \   00022D   7A04         MOV     R2,#0x4
    788            tmp = (txShdw >= 100000) ? 99999 : txShdw;
   \   00022F   EA           MOV     A,R2
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   C082         PUSH    DPL
   \   000235   C083         PUSH    DPH
   \   000237   90....       MOV     DPTR,#__Constant_186a0
   \   00023A   78..         MOV     R0,#?V0 + 0
   \   00023C   12....       LCALL   ?L_MOV_X
   \   00023F   D083         POP     DPH
   \   000241   D082         POP     DPL
   \   000243   78..         MOV     R0,#?V0 + 0
   \   000245   12....       LCALL   ?UL_GT_X
   \   000248   4005         JC      ??TransmitApp_DisplayResults_4
   \   00024A   90....       MOV     DPTR,#__Constant_1869f
   \   00024D   8004         SJMP    ??TransmitApp_DisplayResults_5
   \                     ??TransmitApp_DisplayResults_4:
   \   00024F   EA           MOV     A,R2
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??TransmitApp_DisplayResults_5:
   \   000253   78..         MOV     R0,#?V0 + 0
   \   000255   12....       LCALL   ?L_MOV_X
   \   000258   85..82       MOV     DPL,?XSP + 0
   \   00025B   85..83       MOV     DPH,?XSP + 1
   \   00025E   78..         MOV     R0,#?V0 + 0
   \   000260   12....       LCALL   ?L_MOV_TO_X
    789            do
    790            {
    791              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   \                     ??TransmitApp_DisplayResults_6:
   \   000263   85..82       MOV     DPL,?XSP + 0
   \   000266   85..83       MOV     DPH,?XSP + 1
   \   000269   78..         MOV     R0,#?V0 + 4
   \   00026B   12....       LCALL   ?L_MOV_X
   \   00026E   90....       MOV     DPTR,#__Constant_a
   \   000271   78..         MOV     R0,#?V0 + 0
   \   000273   12....       LCALL   ?L_MOV_X
   \   000276   78..         MOV     R0,#?V0 + 4
   \   000278   79..         MOV     R1,#?V0 + 0
   \   00027A   12....       LCALL   ?UL_DIV_MOD
   \   00027D   E5..         MOV     A,?V0 + 0
   \   00027F   2430         ADD     A,#0x30
   \   000281   C0E0         PUSH    A
   \   000283   8A..         MOV     ?V0 + 0,R2
   \   000285   7410         MOV     A,#0x10
   \   000287   12....       LCALL   ?XSTACK_DISP0_8
   \   00028A   12....       LCALL   ?Subroutine7 & 0xFFFF
    792              tmp /= 10;
    793            } while ( tmp );
   \                     ??CrossCallReturnLabel_28:
   \   00028D   D0E0         POP     A
   \   00028F   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000292   12....       LCALL   ?L_MOV_X
   \   000295   90....       MOV     DPTR,#__Constant_a
   \   000298   78..         MOV     R0,#?V0 + 0
   \   00029A   12....       LCALL   ?L_MOV_X
   \   00029D   78..         MOV     R0,#?V0 + 4
   \   00029F   79..         MOV     R1,#?V0 + 0
   \   0002A1   12....       LCALL   ?UL_DIV_MOD
   \   0002A4   85..82       MOV     DPL,?XSP + 0
   \   0002A7   85..83       MOV     DPH,?XSP + 1
   \   0002AA   78..         MOV     R0,#?V0 + 4
   \   0002AC   12....       LCALL   ?L_MOV_TO_X
   \   0002AF   85..82       MOV     DPL,?XSP + 0
   \   0002B2   85..83       MOV     DPH,?XSP + 1
   \   0002B5   C082         PUSH    DPL
   \   0002B7   C083         PUSH    DPH
   \   0002B9   90....       MOV     DPTR,#__Constant_0
   \   0002BC   78..         MOV     R0,#?V0 + 0
   \   0002BE   12....       LCALL   ?L_MOV_X
   \   0002C1   D083         POP     DPH
   \   0002C3   D082         POP     DPL
   \   0002C5   78..         MOV     R0,#?V0 + 0
   \   0002C7   12....       LCALL   ?L_EQ_X
   \   0002CA   7097         JNZ     ??TransmitApp_DisplayResults_6
    794          
    795            idx = LCD_W-1;
   \   0002CC   7A0F         MOV     R2,#0xf
    796            tmp = txTotal;
   \   0002CE   90....       MOV     DPTR,#txTotal
   \   0002D1   78..         MOV     R0,#?V0 + 0
   \   0002D3   12....       LCALL   ?L_MOV_X
   \   0002D6   85..82       MOV     DPL,?XSP + 0
   \   0002D9   85..83       MOV     DPH,?XSP + 1
   \   0002DC   78..         MOV     R0,#?V0 + 0
   \   0002DE   12....       LCALL   ?L_MOV_TO_X
    797            do
    798            {
    799              lcd_buf[idx--] = (uint8) ('0' + (tmp % 10));
   \                     ??TransmitApp_DisplayResults_7:
   \   0002E1   85..82       MOV     DPL,?XSP + 0
   \   0002E4   85..83       MOV     DPH,?XSP + 1
   \   0002E7   78..         MOV     R0,#?V0 + 4
   \   0002E9   12....       LCALL   ?L_MOV_X
   \   0002EC   90....       MOV     DPTR,#__Constant_a
   \   0002EF   78..         MOV     R0,#?V0 + 0
   \   0002F1   12....       LCALL   ?L_MOV_X
   \   0002F4   78..         MOV     R0,#?V0 + 4
   \   0002F6   79..         MOV     R1,#?V0 + 0
   \   0002F8   12....       LCALL   ?UL_DIV_MOD
   \   0002FB   E5..         MOV     A,?V0 + 0
   \   0002FD   2430         ADD     A,#0x30
   \   0002FF   C0E0         PUSH    A
   \   000301   8A..         MOV     ?V0 + 0,R2
   \   000303   7410         MOV     A,#0x10
   \   000305   12....       LCALL   ?XSTACK_DISP0_8
   \   000308   12....       LCALL   ?Subroutine7 & 0xFFFF
    800              tmp /= 10;
    801            } while ( tmp );
   \                     ??CrossCallReturnLabel_29:
   \   00030B   D0E0         POP     A
   \   00030D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000310   12....       LCALL   ?L_MOV_X
   \   000313   90....       MOV     DPTR,#__Constant_a
   \   000316   78..         MOV     R0,#?V0 + 0
   \   000318   12....       LCALL   ?L_MOV_X
   \   00031B   78..         MOV     R0,#?V0 + 4
   \   00031D   79..         MOV     R1,#?V0 + 0
   \   00031F   12....       LCALL   ?UL_DIV_MOD
   \   000322   85..82       MOV     DPL,?XSP + 0
   \   000325   85..83       MOV     DPH,?XSP + 1
   \   000328   78..         MOV     R0,#?V0 + 4
   \   00032A   12....       LCALL   ?L_MOV_TO_X
   \   00032D   85..82       MOV     DPL,?XSP + 0
   \   000330   85..83       MOV     DPH,?XSP + 1
   \   000333   C082         PUSH    DPL
   \   000335   C083         PUSH    DPH
   \   000337   90....       MOV     DPTR,#__Constant_0
   \   00033A   78..         MOV     R0,#?V0 + 0
   \   00033C   12....       LCALL   ?L_MOV_X
   \   00033F   D083         POP     DPH
   \   000341   D082         POP     DPL
   \   000343   78..         MOV     R0,#?V0 + 0
   \   000345   12....       LCALL   ?L_EQ_X
   \   000348   7097         JNZ     ??TransmitApp_DisplayResults_7
    802          
    803            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   00034A                ; Setup parameters for call to function HalLcdWriteString
   \   00034A   7903         MOV     R1,#0x3
   \   00034C   7410         MOV     A,#0x10
   \   00034E   12....       LCALL   ?XSTACK_DISP0_8
   \   000351   AA82         MOV     R2,DPL
   \   000353   AB83         MOV     R3,DPH
   \   000355   12....       LCALL   ??HalLcdWriteString?relay
    804          #else
    805            DEBUG_INFO( COMPID_APP, SEVERITY_INFORMATION, 3, rxAccum,
    806                                                        (uint16)msecs, (uint16)rxTotal );
    807          #endif
    808          
    809            if ( (rxAccum == 0) && (txAccum == 0) )
   \   000358   90....       MOV     DPTR,#__Constant_0
   \   00035B   78..         MOV     R0,#?V0 + 0
   \   00035D   12....       LCALL   ?L_MOV_X
   \   000360   7583..       MOV     DPH,#((rxAccum >> 8) & 0xff)
   \   000363   7582..       MOV     DPL,#(rxAccum & 0xff)
   \   000366   78..         MOV     R0,#?V0 + 0
   \   000368   12....       LCALL   ?L_EQ_X
   \   00036B   7026         JNZ     ??TransmitApp_DisplayResults_8
   \   00036D   90....       MOV     DPTR,#__Constant_0
   \   000370   78..         MOV     R0,#?V0 + 0
   \   000372   12....       LCALL   ?L_MOV_X
   \   000375   7583..       MOV     DPH,#((txAccum >> 8) & 0xff)
   \   000378   7582..       MOV     DPL,#(txAccum & 0xff)
   \   00037B   78..         MOV     R0,#?V0 + 0
   \   00037D   12....       LCALL   ?L_EQ_X
   \   000380   7011         JNZ     ??TransmitApp_DisplayResults_8
    810            {
    811              osal_stop_timerEx( TransmitApp_TaskID, TRANSMITAPP_RCVTIMER_EVT );
   \   000382                ; Setup parameters for call to function osal_stop_timerEx
   \   000382   7A02         MOV     R2,#0x2
   \   000384   7B00         MOV     R3,#0x0
   \   000386   90....       MOV     DPTR,#TransmitApp_TaskID
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   F9           MOV     R1,A
   \   00038B   12....       LCALL   ??osal_stop_timerEx?relay
    812              timerOn = FALSE;
   \   00038E   E4           CLR     A
   \   00038F   90....       MOV     DPTR,#timerOn
   \   000392   F0           MOVX    @DPTR,A
    813            }
    814          
    815            rxAccum = txAccum = 0;
   \                     ??TransmitApp_DisplayResults_8:
   \   000393   90....       MOV     DPTR,#__Constant_0
   \   000396   78..         MOV     R0,#?V0 + 0
   \   000398   12....       LCALL   ?L_MOV_X
   \   00039B   90....       MOV     DPTR,#txAccum
   \   00039E   78..         MOV     R0,#?V0 + 0
   \   0003A0   12....       LCALL   ?L_MOV_TO_X
   \   0003A3   90....       MOV     DPTR,#__Constant_0
   \   0003A6   78..         MOV     R0,#?V0 + 0
   \   0003A8   12....       LCALL   ?L_MOV_X
   \   0003AB   90....       MOV     DPTR,#rxAccum
   \   0003AE   78..         MOV     R0,#?V0 + 0
   \   0003B0   12....       LCALL   ?L_MOV_TO_X
    816          }
   \   0003B3   7421         MOV     A,#0x21
   \   0003B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B8   02....       LJMP    ?Subroutine12 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   1A           DEC     R2
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_SetSendEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_SetSendEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TransmitApp_DisplayResults?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TransmitApp_DisplayResults

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TransmitApp">`:
   \   000000   5472616E     DB "TransmitApp"
   \            736D6974
   \            41707000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_186a0:
   \   000000   A0860100     DD 100000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1869f:
   \   000000   9F860100     DD 99999

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
    817          
    818          /*********************************************************************
    819          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     TransmitApp_ChangeState            2      0     23
       -> TransmitApp_SetSendEvt        4      0      0
     TransmitApp_DisplayResults         2      0     72
       -> osal_GetSystemClock           0      0     98
       -> osal_GetSystemClock           0      0     98
       -> osal_memset                   0      0     98
       -> HalLcdWriteString             0      0     98
       -> osal_memset                   0      0     98
       -> HalLcdWriteString             0      0     98
       -> osal_stop_timerEx             0      0     98
     TransmitApp_HandleKeys             1      0     46
       -> TransmitApp_ChangeState       0      0     46
       -> HalLedSet                     0      0     46
       -> NLME_GetShortAddr             0      0     46
       -> ZDP_EndDeviceBindReq          0      0     64
       -> TransmitApp_DisplayResults
                                        0      0     46
       -> HalLedSet                     0      0     46
       -> ZDP_MatchDescReq              0      0     62
     TransmitApp_Init                   3      0      2
       -> afRegister                    4      0      4
       -> RegisterForKeys               4      0      4
       -> HalLcdWriteString             4      0      4
       -> afDataReqMTU                  4      0      4
       -> ZDO_RegisterForZDOMsg         4      0      4
       -> ZDO_RegisterForZDOMsg         4      0      4
     TransmitApp_MessageMSGCB           0      0     30
       -> HalLedSet                     0      0     32
       -> osal_start_timerEx            0      0     32
       -> osal_GetSystemClock           0      0     32
     TransmitApp_ProcessEvent           0      0     14
       -> osal_msg_receive              0      0     28
       -> osal_msg_deallocate           0      0     28
       -> osal_msg_receive              0      0     28
       -> TransmitApp_ProcessZDOMsgs
                                        0      0     28
       -> TransmitApp_HandleKeys        0      0     28
       -> osal_start_timerEx            0      0     28
       -> osal_GetSystemClock           0      0     28
       -> TransmitApp_SetSendEvt        0      0     28
       -> TransmitApp_MessageMSGCB      0      0     28
       -> TransmitApp_SendTheMessage
                                        0      0     28
       -> TransmitApp_SetSendEvt        0      0     28
       -> osal_start_timerEx            0      0     28
       -> TransmitApp_DisplayResults
                                        0      0     28
     TransmitApp_ProcessZDOMsgs         0      0     24
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20
       -> ZDO_ParseEPListRsp            0      0     20
       -> HalLedSet                     0      0     20
       -> osal_mem_free                 0      0     20
     TransmitApp_SendTheMessage         0      0     33
       -> AF_DataRequest                0      0     38
       -> osal_start_timerEx            0      0     20
     TransmitApp_SetSendEvt             2      0     14
       -> osal_set_event                4      0      0


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     TransmitApp_Msg                     102
     TransmitApp_ClusterList               2
     TransmitApp_SimpleDesc               12
     TransmitApp_epDesc                    6
     TransmitApp_TaskID                    1
     TransmitApp_NwkState                  1
     TransmitApp_TransID                   1
     TransmitApp_DstAddr                  12
     TransmitApp_State                     1
     clkShdw                               4
     rxTotal                               4
     txTotal                               4
     rxAccum                               4
     txAccum                               4
     timerOn                               1
     timesToSend                           1
     pktCounter                            2
     TransmitApp_MaxDataLength             2
     TransmitApp_Init                    202
     ?Subroutine9                          7
     ?Subroutine2                          8
     TransmitApp_ProcessEvent            264
     ?Subroutine10                         5
     ?Subroutine6                          6
     ??Subroutine13_0                     11
     ?Subroutine5                         12
     ?Subroutine4                         14
     TransmitApp_ProcessZDOMsgs          154
     ?Subroutine11                         5
     ??Subroutine14_0                      5
     TransmitApp_HandleKeys              277
     ?Subroutine0                          9
     ?Subroutine8                         16
     TransmitApp_MessageMSGCB            186
     ?Subroutine12                         5
     ?Subroutine3                         17
     TransmitApp_SendTheMessage          166
     TransmitApp_ChangeState              28
     TransmitApp_SetSendEvt               19
     ?Subroutine7                          8
     TransmitApp_DisplayResults          955
     ?Subroutine1                         11
     ??TransmitApp_Init?relay              6
     ??TransmitApp_ProcessEvent?relay      6
     ??TransmitApp_ProcessZDOMsgs?relay    6
     ??TransmitApp_HandleKeys?relay        6
     ??TransmitApp_MessageMSGCB?relay      6
     ??TransmitApp_SendTheMessage?relay    6
     ??TransmitApp_ChangeState?relay       6
     ??TransmitApp_SetSendEvt?relay        6
     ??TransmitApp_DisplayResults?relay    6
     ?<Constant "TransmitApp">            12
     __Constant_0                          4
     __Constant_3e8                        4
     __Constant_186a0                      4
     __Constant_1869f                      4
     __Constant_a                          4

 
 2 390 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    46 bytes in segment XDATA_ROM_C
   150 bytes in segment XDATA_Z
 
 2 444 bytes of CODE  memory
    26 bytes of CONST memory (+ 20 bytes shared)
   150 bytes of XDATA memory

Errors: none
Warnings: none
