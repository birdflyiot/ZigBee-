###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                07/Jun/2011  16:44:06 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Component #
#                          s\mt\MT_APP.c                                      #
#    Command line       =  -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wZCL.cfg" (-DZCL_READ      #
#                          -DZCL_WRITE -DZCL_BASIC -DZCL_IDENTIFY             #
#                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                   #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Componen #
#                          ts\mt\MT_APP.c" -D ZIGBEEPRO -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\Route #
#                          rEB-Pro\List\" -lA "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí #
#                          )\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2 #
#                          .2.0-1.3.0\Projects\zstack\HomeAutomation\SampleSw #
#                          itch\CC2530DB\RouterEB-Pro\List\" --diag_suppress  #
#                          Pe001,Pa010 -o "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\Zi #
#                          gBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0 #
#                          -1.3.0\Projects\zstack\HomeAutomation\SampleSwitch #
#                          \CC2530DB\RouterEB-Pro\Obj\" -e                    #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ý #
#                          ÕûÀí)\ZigBee2007³ÌÐò\Texas                         #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\HomeAutomation\SampleSwitch\CC2530DB\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\SO #
#                          URCE\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2 #
#                          007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3. #
#                          0\Projects\zstack\HomeAutomation\SampleSwitch\CC25 #
#                          30DB\..\..\SOURCE\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ý #
#                          ÕûÀí)\ZigBee2007³ÌÐò\Texas                         #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ #
#                          ZMAIN\TI2530DB\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀ #
#                          í)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530- #
#                          2.2.0-1.3.0\Projects\zstack\HomeAutomation\SampleS #
#                          witch\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I   #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\" -I              #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\" -I             #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\" -I                 #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\" -I               #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZCL\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\" -I                 #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\" -I                     #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\" -I              #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\" -I "C:\Program Files\IAR Systems\Embedded     #
#                          Workbench 5.3 Evaluation version\8051\INC\" -I     #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\CLIB\" -Ohz        #
#    List file          =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\HomeAutomation\SampleSwitch\CC2530DB\Router #
#                          EB-Pro\List\MT_APP.lst                             #
#    Object file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\HomeAutomation\SampleSwitch\CC2530DB\Router #
#                          EB-Pro\Obj\MT_APP.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Components\mt\MT_APP.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2008-06-17 11:48:11 -0700 (Tue, 17 Jun 2008) $
      4            Revision:       $Revision: 17273 $
      5          
      6            Description:    MonitorTest
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"        /* This is here because all the SPI_CMD_XXX are defined in this header */
     45          #include "MT_APP.h"
     46          #include "MT_AF.h"     /* This is here because this MT_APP makes some routine call to AF */
     47          
     48          #if defined( APP_TP )
     49           #include "TestProfile.h"
     50          #endif
     51          #if defined( APP_TP2 )
     52           #include "TestProfile2.h"
     53           #include "nwk_util.h"
     54          #endif
     55          
     56          /***************************************************************************************************
     57           * LOCAL FUNCTIONS
     58           ***************************************************************************************************/
     59          #if defined (MT_APP_FUNC)
     60          void MT_AppMsg(uint8 *pBuf);
     61          void MT_AppUserCmd(byte *pData);
     62          #endif
     63          
     64          #if defined (MT_APP_FUNC)
     65          /***************************************************************************************************
     66           * @fn      MT_AppCommandProcessing
     67           *
     68           * @brief  Process all the APP commands that are issued by test tool
     69           *
     70           * @param   pBuf - pointer to the received buffer
     71           *
     72           * @return  status
     73           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          uint8 MT_AppCommandProcessing(uint8 *pBuf)
   \                     MT_AppCommandProcessing:
     75          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     76            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
     77          
     78            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for MT_AppCommandProcessing>_0`:
   \   000011   00           DB        0
   \   000012   01           DB        1
   \   000013   ....         DW        ??MT_AppCommandProcessing_0
   \   000015   ....         DW        ??MT_AppCommandProcessing_1
   \   000017   ....         DW        ??MT_AppCommandProcessing_2
     79            {
     80              case MT_APP_MSG:
     81                MT_AppMsg(pBuf);
   \                     ??MT_AppCommandProcessing_1:
   \   000019                ; Setup parameters for call to function MT_AppMsg
   \   000019   12....       LCALL   ??MT_AppMsg?relay
   \   00001C   8007         SJMP    ??MT_AppCommandProcessing_3
     82                break;
     83          
     84              case MT_APP_USER_TEST:
     85                MT_AppUserCmd(pBuf);
   \                     ??MT_AppCommandProcessing_2:
   \   00001E                ; Setup parameters for call to function MT_AppUserCmd
   \   00001E   12....       LCALL   ??MT_AppUserCmd?relay
   \   000021   8002         SJMP    ??MT_AppCommandProcessing_3
     86                break;
     87          
     88              default:
     89                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AppCommandProcessing_0:
   \   000023   0E           INC     R6
   \   000024   0E           INC     R6
     90                break;
     91            }
     92          
     93            return status;
   \                     ??MT_AppCommandProcessing_3:
   \   000025   EE           MOV     A,R6
   \   000026   F9           MOV     R1,A
   \   000027   7F01         MOV     R7,#0x1
   \   000029   02....       LJMP    ?BANKED_LEAVE_XDATA
     94          }
     95          
     96          /***************************************************************************************************
     97           * @fn      MT_AppMsg
     98           *
     99           * @brief   Process APP_MSG command
    100           *
    101           * @param   pBuf - pointer to the received buffer
    102           *
    103           * @return  void
    104           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void MT_AppMsg(uint8 *pBuf)
   \                     MT_AppMsg:
    106          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    107            uint8 retValue = ZFailure;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    108            uint8 endpoint;
    109            endPointDesc_t *epDesc;
    110            mtSysAppMsg_t *msg;
    111            uint8 cmdId, dataLen;
    112          
    113            /* parse header */
    114            dataLen = pBuf[MT_RPC_POS_LEN];
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
    115            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C0E0         PUSH    A
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    116            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000027   EA           MOV     A,R2
   \   000028   2403         ADD     A,#0x3
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   EB           MOV     A,R3
   \   00002D   3400         ADDC    A,#0x0
    117          
    118            /* Get the endpoint and skip past it.*/
    119            endpoint = *pBuf++;
   \   00002F   85..82       MOV     DPL,?V0 + 0
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 3,A
   \   000037   A3           INC     DPTR
   \   000038   8582..       MOV     ?V0 + 0,DPL
   \   00003B   8583..       MOV     ?V0 + 1,DPH
    120            dataLen--;
   \   00003E   15..         DEC     ?V0 + 2
    121          
    122            /* Look up the endpoint */
    123            epDesc = afFindEndPointDesc( endpoint );
   \   000040                ; Setup parameters for call to function afFindEndPointDesc
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   ??afFindEndPointDesc?relay
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   EA           MOV     A,R2
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   EB           MOV     A,R3
   \   00004D   F0           MOVX    @DPTR,A
    124          
    125            if (epDesc)
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   7002         JNZ     ??MT_AppMsg_0
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \                     ??MT_AppMsg_0:
   \   000058   7003         JNZ     $+5
   \   00005A   02....       LJMP    ??MT_AppMsg_1 & 0xFFFF
    126            {
    127              /* Build and send the message to the APP */
    128              msg = (mtSysAppMsg_t *)osal_msg_allocate(sizeof(mtSysAppMsg_t) + (dataLen));
   \   00005D   85..82       MOV     DPL,?V0 + 2
   \   000060   AE82         MOV     R6,DPL
   \   000062                ; Setup parameters for call to function osal_msg_allocate
   \   000062   7406         MOV     A,#0x6
   \   000064   2E           ADD     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3400         ADDC    A,#0x0
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ??osal_msg_allocate?relay
   \   00006D   8A..         MOV     ?V0 + 6,R2
   \   00006F   8B..         MOV     ?V0 + 7,R3
    129              if ( msg )
   \   000071   EA           MOV     A,R2
   \   000072   7001         JNZ     ??MT_AppMsg_2
   \   000074   EB           MOV     A,R3
   \                     ??MT_AppMsg_2:
   \   000075   606A         JZ      ??MT_AppMsg_1
    130              {
    131                /* Build and send message up the app */
    132                msg->hdr.event = MT_SYS_APP_MSG;
   \   000077   7423         MOV     A,#0x23
   \   000079   8A82         MOV     DPL,R2
   \   00007B   8B83         MOV     DPH,R3
   \   00007D   F0           MOVX    @DPTR,A
    133                msg->endpoint = endpoint;
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E5..         MOV     A,?V0 + 3
   \   000082   F0           MOVX    @DPTR,A
    134                msg->appDataLen = dataLen;
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   EE           MOV     A,R6
   \   00008B   F0           MOVX    @DPTR,A
    135                msg->appData = (uint8*)(msg+1);
   \   00008C   EA           MOV     A,R2
   \   00008D   2404         ADD     A,#0x4
   \   00008F   FA           MOV     R2,A
   \   000090   EB           MOV     A,R3
   \   000091   3400         ADDC    A,#0x0
   \   000093   FB           MOV     R3,A
   \   000094   E5..         MOV     A,?V0 + 6
   \   000096   2406         ADD     A,#0x6
   \   000098   F8           MOV     R0,A
   \   000099   E5..         MOV     A,?V0 + 7
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F9           MOV     R1,A
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   E8           MOV     A,R0
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E9           MOV     A,R1
   \   0000A6   F0           MOVX    @DPTR,A
    136                osal_memcpy( msg->appData, pBuf, dataLen);
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   75..00       MOV     ?V0 + 2,#0x0
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FC           MOV     R4,A
   \   0000B1   7D00         MOV     R5,#0x0
   \   0000B3   8A82         MOV     DPL,R2
   \   0000B5   8B83         MOV     DPH,R3
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FA           MOV     R2,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??osal_memcpy?relay
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
    137                osal_msg_send( *(epDesc->task_id), (uint8 *)msg );
   \   0000C4                ; Setup parameters for call to function osal_msg_send
   \   0000C4   AA..         MOV     R2,?V0 + 6
   \   0000C6   AB..         MOV     R3,?V0 + 7
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000D0   A3           INC     DPTR
   \   0000D1   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F9           MOV     R1,A
   \   0000D6   12....       LCALL   ??osal_msg_send?relay
    138          
    139                /* Info for response */
    140                retValue = ZSuccess;
   \   0000D9   E4           CLR     A
   \   0000DA   85..82       MOV     DPL,?XSP + 0
   \   0000DD   85..83       MOV     DPH,?XSP + 1
   \   0000E0   F0           MOVX    @DPTR,A
    141              }
    142            }
    143          
    144            /* Build and send back the response */
    145            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), cmdId, 1, &retValue);
   \                     ??MT_AppMsg_1:
   \   0000E1                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E1   85..82       MOV     DPL,?XSP + 0
   \   0000E4   85..83       MOV     DPH,?XSP + 1
   \   0000E7   AC82         MOV     R4,DPL
   \   0000E9   AD83         MOV     R5,DPH
   \   0000EB   7B01         MOV     R3,#0x1
   \   0000ED   EB           MOV     A,R3
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FA           MOV     R2,A
   \   0000F3   7969         MOV     R1,#0x69
   \   0000F5   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    146          }
   \   0000F8   7404         MOV     A,#0x4
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FD   7F08         MOV     R7,#0x8
   \   0000FF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    147          
    148          /***************************************************************************************************
    149           * @fn      MT_AppMsg
    150           *
    151           * @brief   Process APP_MSG command
    152           *
    153           * @param   pBuf - pointer to the received buffer
    154           *
    155           * @return  void
    156           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          void MT_AppUserCmd(uint8 *pBuf) 						
   \                     MT_AppUserCmd:
    158          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    159          
    160            uint8 retValue, cmdId;
    161          
    162          #if defined (APP_TGEN) || defined (NWK_TEST) || defined (APP_TP) || defined (APP_TP2) || defined (OSAL_TOTAL_MEM) || defined (APP_DEBUG)
    163            uint16 app_cmd;
    164            byte srcEp;
    165            uint16 param1;
    166            uint16 param2;
    167          #endif
    168          
    169            /* parse header */
    170            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
    171            pBuf += MT_RPC_FRAME_HDR_SZ;
    172          
    173            retValue = INVALID_TASK;     //should be changed later
   \   000011   7403         MOV     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    174          
    175          #if defined (APP_TGEN) || defined (NWK_TEST) || defined (APP_TP) || defined (APP_TP2) || defined (OSAL_TOTAL_MEM) || defined (APP_DEBUG)
    176          
    177            srcEp = *pBuf++;
    178          
    179            app_cmd = BUILD_UINT16( pBuf[0] , pBuf[1] );
    180            pBuf = pBuf + sizeof( uint16 );
    181          
    182            param1 = BUILD_UINT16( pBuf[0] , pBuf[1] );
    183            pBuf = pBuf + sizeof( uint16 );
    184          
    185            param2 = BUILD_UINT16( pBuf[0] , pBuf[1] );
    186          
    187            switch ( app_cmd )
    188            {
    189          
    190          #if defined (APP_TGEN)
    191              case TGEN_START:
    192                TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_START );
    193                retValue = ZSUCCESS;
    194                break;
    195          
    196              case TGEN_STOP:
    197                TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_STOP );
    198                retValue = ZSUCCESS;
    199                break;
    200          
    201              case TGEN_COUNT:
    202                retValue = TrafficGenApp_CountPkt( param1, param2 );
    203                return;	
    204                break;				
    205          #endif
    206          
    207          #if defined (NWK_TEST)
    208              case HW_TEST:
    209                HwApp_Start( HI_UINT16(param1), LO_UINT16(param1), HI_UINT16(param2),
    210                              1000, LO_UINT16(param2), 3, 0 );
    211                break;
    212          
    213              case HW_DISPLAY_RESULT:
    214                HwApp_TestInfo();
    215                break;
    216          
    217              case HW_SEND_STATUS:
    218                HwApp_SendStats();
    219                break;
    220          #endif
    221          
    222          #if defined( APP_TP ) || defined ( APP_TP2 )
    223            #if defined( APP_TP )
    224              case TP_SEND_NODATA:
    225                retValue = TestProfileApp_SendNoData( srcEp, (byte)param1 );
    226                break;
    227            #endif // APP_TP
    228          			
    229              case TP_SEND_BUFFERTEST:
    230                retValue = TestProfileApp_SendBufferReq( srcEp, (byte)param1 );
    231                break;
    232          			
    233            #if defined( APP_TP )
    234              case TP_SEND_UINT8:
    235                retValue = TestProfileApp_SendUint8( srcEp, (byte)param1 );
    236                break;
    237          
    238              case TP_SEND_INT8:
    239                retValue = TestProfileApp_SendInt8( srcEp, (byte)param1 );
    240                break;
    241          
    242              case TP_SEND_UINT16:
    243                retValue = TestProfileApp_SendUint16( srcEp, (byte)param1 );
    244                break;
    245          
    246              case TP_SEND_INT16:
    247                retValue = TestProfileApp_SendInt16( srcEp, (byte)param1 );
    248                break;
    249          
    250              case TP_SEND_SEMIPREC:
    251                retValue = TestProfileApp_SendSemiPrec( srcEp, (byte)param1 );
    252                break;
    253          
    254              case TP_SEND_FREEFORM:
    255                retValue = TestProfileApp_SendFreeFormReq( srcEp, (byte)param1 );
    256                break;
    257          			
    258            #else // APP_TP
    259              case TP_SEND_FREEFORM:
    260                retValue = TestProfileApp_SendFreeFormReq(srcEp, (byte)param1, (byte)param2);
    261                break;
    262            #endif
    263          			
    264            #if defined( APP_TP )
    265              case TP_SEND_ABS_TIME:
    266                retValue = TestProfileApp_SendAbsTime( srcEp, (byte)param1 );
    267                break;
    268          
    269              case TP_SEND_REL_TIME:
    270                retValue = TestProfileApp_SendRelativeTime( srcEp, (byte)param1 );
    271                break;
    272          
    273              case TP_SEND_CHAR_STRING:
    274                retValue = TestProfileApp_SendCharString( srcEp, (byte)param1 );
    275                break;
    276          
    277              case TP_SEND_OCTET_STRING:
    278                retValue = TestProfileApp_SendOctetString( srcEp, (byte)param1 );
    279                break;		
    280            #endif // APP_TP
    281          				
    282              case TP_SET_DSTADDRESS:			
    283                retValue = TestProfileApp_SetDestAddress(HI_UINT16(param1), LO_UINT16(param1), param2);
    284                break;	
    285          
    286            #if defined( APP_TP2 )
    287              case TP_SEND_BUFFER_GROUP:
    288                retValue = TestProfileApp_SendBufferGroup( srcEp, (byte)param1 );
    289                break;
    290            #endif // APP_TP
    291          
    292              case TP_SEND_BUFFER:
    293                retValue = TestProfileApp_SendBuffer( srcEp, (byte)param1 );
    294                break;
    295          				
    296            #if defined( APP_TP )
    297              case TP_SEND_MULT_KVP_8BIT:
    298                TestProfileApp_SendMultiKVP_8bit( srcEp, (byte)param1 );
    299                retValue = ZSuccess;
    300                break;
    301          
    302              case TP_SEND_MULT_KVP_16BIT:
    303                TestProfileApp_SendMultiKVP_16bit( srcEp, (byte)param1 );
    304                retValue = ZSuccess;
    305                break;
    306          
    307              case TP_SEND_MULT_KVP_TIME:
    308                TestProfileApp_SendMultiKVP_Time( srcEp, (byte)param1 );
    309                retValue = ZSuccess;
    310                break;
    311          
    312              case TP_SEND_MULT_KVP_STRING:
    313                TestProfileApp_SendMultiKVP_String( srcEp, (byte)param1 );
    314                retValue = ZSuccess;
    315                break;
    316          
    317              case TP_SEND_MULTI_KVP_STR_TIME:
    318                retValue = ZSuccess;
    319                TestProfileApp_SendMultiKVP_String_Time( srcEp, (byte)param1 );
    320                break;
    321            #endif // APP_TP
    322          				
    323              case TP_SEND_COUNTED_PKTS:
    324                TestProfileApp_SendCountedPktsReq(HI_UINT16(param1), LO_UINT16(param1), param2);
    325                retValue = ZSuccess;
    326                break;
    327          
    328              case TP_SEND_RESET_COUNTER:
    329                TestProfileApp_CountedPakts_ResetCounterReq( (byte)param1 );
    330                retValue = ZSuccess;
    331                break;
    332          
    333              case TP_SEND_GET_COUNTER:
    334                TestProfileApp_CountedPakts_GetCounterReq( srcEp, (byte)param1 );
    335                retValue = ZSuccess;
    336                break;
    337          				
    338              case TP_SET_PERMIT_JOIN:
    339                if ( ZG_BUILD_RTR_TYPE && ZG_DEVICE_RTR_TYPE )
    340                {
    341                  NLME_PermitJoiningRequest( (byte)param1 );
    342                  retValue = ZSuccess;
    343                }
    344                else
    345                {
    346                  retValue = ZFailure;
    347                }
    348                break;
    349          
    350            #if defined ( APP_TP2 )
    351              case TP_ADD_GROUP:
    352                retValue = TestProfileApp_SetGroup( srcEp, param1 );
    353                break;
    354          
    355              case TP_REMOVE_GROUP:
    356                retValue = TestProfileApp_RemoveGroup( srcEp, param1 );
    357                break;
    358          
    359              case TP_SEND_UPDATE_KEY:
    360                retValue = TestProfileApp_UpdateKey( srcEp, (uint8)param1, param2 );
    361                break;
    362          
    363              case TP_SEND_SWITCH_KEY:
    364                retValue = TestProfileApp_SwitchKey(  srcEp, (uint8)param1, param2 );
    365                break;
    366          			
    367              case TP_SEND_BUFFERTEST_GROUP:
    368                retValue = TestProfileApp_SendBufferGroupReq( srcEp, (byte)param1, (byte)param2 );
    369                break;
    370          
    371              case TP_SEND_ROUTE_DISC_REQ:
    372                retValue = TestProfileApp_SendRouteDiscReq( srcEp, param1,
    373                                            HI_UINT16( param2 ), LO_UINT16( param2 ) );
    374                break;
    375          
    376              case TP_SEND_ROUTE_DISCOVERY:
    377                if ( ZG_BUILD_RTR_TYPE && ZG_DEVICE_RTR_TYPE )
    378                {
    379                  retValue = TestProfileApp_SendRouteDiscovery( param1,
    380                                              HI_UINT16( param2 ), LO_UINT16( param2 ) );
    381                }
    382                break;
    383          
    384              case TP_SEND_NEW_ADDR:
    385                retValue = TestProfileApp_ChangeShortAddr( param1, LO_UINT16(param2) );
    386                break;
    387          
    388              case TP_SEND_NWK_UPDATE:
    389                /* Send out a Network Update command. */
    390                retValue = NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
    391                                                  _NIB.extendedPANID, _NIB.nwkUpdateId+1, param1 );
    392                break;
    393          
    394           #if (ZG_BUILD_JOINING_TYPE)
    395              case TP_AK_SETUP_PARTNER:
    396                retValue = TestProfileApp_AppKeySetupPartner( srcEp, param1, param2 );
    397                break;
    398          
    399              case TP_AK_REQ_KEY:
    400                retValue = TestProfileApp_AppKeyRequest( srcEp, param1, param2 );
    401                break;
    402          
    403              case TP_AK_PARTNER_NWKADDR:
    404                retValue = TestProfileApp_SetPartnerNwkAddr( srcEp, param1, param2 );
    405                break;
    406          
    407              case TP_AK_PARTNER_EXTADDR7654:
    408                 retValue = TestProfileApp_SetPartnerExtAddr7654( srcEp, param1, param2 );
    409                break;
    410          
    411              case TP_AK_PARTNER_EXTADDR3210:
    412                retValue = TestProfileApp_SetPartnerExtAddr3210( srcEp, param1, param2 );
    413                break;
    414          
    415              case TP_AK_PARTNER_SET:
    416                retValue = TestProfileApp_SetPartner( srcEp, param1, param2 );
    417                break;
    418          #endif /* ZG_BUILD_JOINING_TYPE */
    419          
    420          #if (ZG_BUILD_COORDINATOR_TYPE)
    421              case TP_AK_TYPE_SET:
    422                retValue = TestProfileApp_AppKeyTypeSet( srcEp, param1, param2 );
    423                break;
    424          #endif /* ZG_BUILD_COORDINATOR_TYPE */
    425          
    426          #if defined ( ZIGBEE_FRAGMENTATION )
    427              case TP_FRAG_SKIP_BLOCK:
    428                retValue = TestProfileApp_FragSkipBlock( (uint8)param1 );
    429                break;
    430          #endif
    431          
    432              case TP_APS_REMOVE:
    433                retValue = TestProfileApp_APSRemove( param1, param2 );
    434                break;
    435          #endif // APP_TP2
    436          
    437          #endif  // APP_TP || APP_TP2
    438          
    439          #if defined ( OSAL_TOTAL_MEM )
    440              case OSAL_MEM_STACK_HIGH_WATER:
    441              case OSAL_MEM_HEAP_HIGH_WATER:
    442                if ( app_cmd == OSAL_MEM_STACK_HIGH_WATER)
    443                {
    444                  param1 = osal_stack_used();
    445                }
    446                else
    447                {
    448                  param1 = osal_heap_high_water();
    449                }
    450          
    451                pData[0] = LO_UINT16( param1 );
    452                pData[1] = HI_UINT16( param1 );
    453          
    454                MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP | MT_RPC_SYS_APP), cmdId, 2, pData);
    455                return;
    456          #endif
    457          
    458          #if defined ( APP_DEBUG )
    459              case DEBUG_GET:
    460                DebugApp_SendQuery( param1 );
    461                retValue = ZSUCCESS;
    462                break;
    463          #endif
    464          
    465          #if defined ( APP_TP2 )
    466              case TP_SEND_BCAST_RSP:
    467                retValue = TestProfileApp_SendBcastRsp( srcEp, (byte)param1 );
    468                break;
    469          #endif
    470          			
    471              default:
    472                break;
    473            }
    474          #endif // (APP_TGEN) || (NWK_TEST) || (APP_TP) || (APP_TP2) || (OSAL_TOTAL_MEM) || (APP_DEBUG)
    475          
    476            /* Build and send back the response */
    477            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), cmdId, 1, &retValue);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   AC82         MOV     R4,DPL
   \   00001C   AD83         MOV     R5,DPH
   \   00001E   7B01         MOV     R3,#0x1
   \   000020   7969         MOV     R1,#0x69
   \   000022   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    478          }
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AppCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AppCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AppMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AppMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AppUserCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AppUserCmd
    479          
    480          #endif /* MT_APP_FUNC */
    481          
    482          /***************************************************************************************************
    483           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_AppCommandProcessing            0      0      9
       -> MT_AppMsg                     0      0     18
       -> MT_AppUserCmd                 0      0     18
     MT_AppMsg                          1      0     32
       -> afFindEndPointDesc            0      0     40
       -> osal_msg_allocate             0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_msg_send                 0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     40
     MT_AppUserCmd                      3      0     10
       -> MT_BuildAndSendZToolResponse
                                        4      0      2


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     MT_AppCommandProcessing           44
     MT_AppMsg                        258
     ?Subroutine0                       9
     MT_AppUserCmd                     49
     ??MT_AppCommandProcessing?relay    6
     ??MT_AppMsg?relay                  6
     ??MT_AppUserCmd?relay              6

 
 360 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
 
 378 bytes of CODE memory

Errors: none
Warnings: none
