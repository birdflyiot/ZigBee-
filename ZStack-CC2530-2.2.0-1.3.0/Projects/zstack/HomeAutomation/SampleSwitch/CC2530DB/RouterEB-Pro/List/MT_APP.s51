///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               07/Jun/2011  16:44:06 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te /
//                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Compone /
//                          nts\mt\MT_APP.c                                   /
//    Command line       =  -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐ /
//                          ò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Pro /
//                          jects\zstack\HomeAutomation\SampleSwitch\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wRouter.cfg"           /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí) /
//                          \ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2 /
//                          .2.0-1.3.0\Projects\zstack\HomeAutomation\SampleS /
//                          witch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. /
//                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0            /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x04000000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wZCL.cfg" (-DZCL_READ     /
//                          -DZCL_WRITE -DZCL_BASIC -DZCL_IDENTIFY            /
//                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                  /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Compon /
//                          ents\mt\MT_APP.c" -D ZIGBEEPRO -D ZTOOL_P1 -D     /
//                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D          /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\Ro /
//                          uterEB-Pro\List\" -lA "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ý /
//                          ÕûÀí)\ZigBee2007³ÌÐò\Texas                        /
//                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\HomeAutomation\SampleSwitch\CC2530DB\RouterE /
//                          B-Pro\List\" --diag_suppress Pe001,Pa010 -o       /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\Ro /
//                          uterEB-Pro\Obj\" -e --require_prototypes --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ /
//                          ýÕûÀí)\ZigBee2007³ÌÐò\Texas                       /
//                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zs /
//                          tack\HomeAutomation\SampleSwitch\CC2530DB\" -I    /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \SOURCE\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\Zig /
//                          Bee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0 /
//                          -1.3.0\Projects\zstack\HomeAutomation\SampleSwitc /
//                          h\CC2530DB\..\..\SOURCE\" -I                      /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\ZMAIN\TI2530DB\" -I                        /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MT\" -I                   /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I          /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I  /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I       /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I         /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\AF\" -I             /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\NWK\" -I            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SEC\" -I            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SAPI\" -I           /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SYS\" -I            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\ZCL\" -I            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\ZDO\" -I            /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\F8W\" -I             /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\" -I                 /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I       /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I       /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I          /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I       /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I  /
//                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\T /
//                          exas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projec /
//                          ts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL /
//                          E_CHIP\" -I "C:\Program Files\IAR                 /
//                          Systems\Embedded Workbench 5.3 Evaluation         /
//                          version\8051\INC\" -I "C:\Program Files\IAR       /
//                          Systems\Embedded Workbench 5.3 Evaluation         /
//                          version\8051\INC\CLIB\" -Ohz                      /
//    List file          =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te /
//                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Project /
//                          s\zstack\HomeAutomation\SampleSwitch\CC2530DB\Rou /
//                          terEB-Pro\List\MT_APP.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_APP

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??MT_AppMsg?relay
        EXTERN ??MT_AppUserCmd?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??MT_AppCommandProcessing?relay
        FUNCTION ??MT_AppCommandProcessing?relay,0203H
        PUBLIC ??MT_AppMsg?relay
        FUNCTION ??MT_AppMsg?relay,0203H
        PUBLIC ??MT_AppUserCmd?relay
        FUNCTION ??MT_AppUserCmd?relay,0203H
        PUBLIC MT_AppCommandProcessing
        FUNCTION MT_AppCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_AppMsg
        FUNCTION MT_AppMsg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_AppUserCmd
        FUNCTION MT_AppUserCmd,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_memcpy         SYMBOL "osal_memcpy"
osal_msg_send       SYMBOL "osal_msg_send"
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
MT_AppCommandProcessing SYMBOL "MT_AppCommandProcessing"
??MT_AppCommandProcessing?relay SYMBOL "?relay", MT_AppCommandProcessing
MT_AppMsg           SYMBOL "MT_AppMsg"
??MT_AppMsg?relay   SYMBOL "?relay", MT_AppMsg
MT_AppUserCmd       SYMBOL "MT_AppUserCmd"
??MT_AppUserCmd?relay SYMBOL "?relay", MT_AppUserCmd

        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H

// F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Components\mt\MT_APP.c
//    1 /***************************************************************************************************
//    2   Filename:       MT.c
//    3   Revised:        $Date: 2008-06-17 11:48:11 -0700 (Tue, 17 Jun 2008) $
//    4   Revision:       $Revision: 17273 $
//    5 
//    6   Description:    MonitorTest
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"        /* This is here because all the SPI_CMD_XXX are defined in this header */
//   45 #include "MT_APP.h"
//   46 #include "MT_AF.h"     /* This is here because this MT_APP makes some routine call to AF */
//   47 
//   48 #if defined( APP_TP )
//   49  #include "TestProfile.h"
//   50 #endif
//   51 #if defined( APP_TP2 )
//   52  #include "TestProfile2.h"
//   53  #include "nwk_util.h"
//   54 #endif
//   55 
//   56 /***************************************************************************************************
//   57  * LOCAL FUNCTIONS
//   58  ***************************************************************************************************/
//   59 #if defined (MT_APP_FUNC)
//   60 void MT_AppMsg(uint8 *pBuf);
//   61 void MT_AppUserCmd(byte *pData);
//   62 #endif
//   63 
//   64 #if defined (MT_APP_FUNC)
//   65 /***************************************************************************************************
//   66  * @fn      MT_AppCommandProcessing
//   67  *
//   68  * @brief  Process all the APP commands that are issued by test tool
//   69  *
//   70  * @param   pBuf - pointer to the received buffer
//   71  *
//   72  * @return  status
//   73  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 uint8 MT_AppCommandProcessing(uint8 *pBuf)
MT_AppCommandProcessing:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_AppCommandProcessing
//   75 {
        FUNCALL MT_AppCommandProcessing, MT_AppMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AppCommandProcessing, MT_AppUserCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   76   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//   77 
//   78   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for MT_AppCommandProcessing>_0`:
        DATA
        DB        0
        DB        1
        DW        ??MT_AppCommandProcessing_0
        DW        ??MT_AppCommandProcessing_1
        DW        ??MT_AppCommandProcessing_2
        CODE
//   79   {
//   80     case MT_APP_MSG:
//   81       MT_AppMsg(pBuf);
??MT_AppCommandProcessing_1:
        ; Setup parameters for call to function MT_AppMsg
        LCALL   ??MT_AppMsg?relay
        SJMP    ??MT_AppCommandProcessing_3
//   82       break;
//   83 
//   84     case MT_APP_USER_TEST:
//   85       MT_AppUserCmd(pBuf);
??MT_AppCommandProcessing_2:
        ; Setup parameters for call to function MT_AppUserCmd
        LCALL   ??MT_AppUserCmd?relay
        SJMP    ??MT_AppCommandProcessing_3
//   86       break;
//   87 
//   88     default:
//   89       status = MT_RPC_ERR_COMMAND_ID;
??MT_AppCommandProcessing_0:
        INC     R6
        INC     R6
//   90       break;
//   91   }
//   92 
//   93   return status;
??MT_AppCommandProcessing_3:
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   94 }
//   95 
//   96 /***************************************************************************************************
//   97  * @fn      MT_AppMsg
//   98  *
//   99  * @brief   Process APP_MSG command
//  100  *
//  101  * @param   pBuf - pointer to the received buffer
//  102  *
//  103  * @return  void
//  104  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  105 void MT_AppMsg(uint8 *pBuf)
MT_AppMsg:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_AppMsg
//  106 {
        FUNCALL MT_AppMsg, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AppMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AppMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AppMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AppMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  107   uint8 retValue = ZFailure;
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  108   uint8 endpoint;
//  109   endPointDesc_t *epDesc;
//  110   mtSysAppMsg_t *msg;
//  111   uint8 cmdId, dataLen;
//  112 
//  113   /* parse header */
//  114   dataLen = pBuf[MT_RPC_POS_LEN];
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  115   cmdId = pBuf[MT_RPC_POS_CMD1];
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  116   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
//  117 
//  118   /* Get the endpoint and skip past it.*/
//  119   endpoint = *pBuf++;
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
//  120   dataLen--;
        DEC     ?V0 + 2
//  121 
//  122   /* Look up the endpoint */
//  123   epDesc = afFindEndPointDesc( endpoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,A
        LCALL   ??afFindEndPointDesc?relay
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  124 
//  125   if (epDesc)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??MT_AppMsg_0
        INC     DPTR
        MOVX    A,@DPTR
??MT_AppMsg_0:
        JNZ     $+5
        LJMP    ??MT_AppMsg_1 & 0xFFFF
//  126   {
//  127     /* Build and send the message to the APP */
//  128     msg = (mtSysAppMsg_t *)osal_msg_allocate(sizeof(mtSysAppMsg_t) + (dataLen));
        MOV     DPL,?V0 + 2
        MOV     R6,DPL
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,#0x6
        ADD     A,R6
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  129     if ( msg )
        MOV     A,R2
        JNZ     ??MT_AppMsg_2
        MOV     A,R3
??MT_AppMsg_2:
        JZ      ??MT_AppMsg_1
//  130     {
//  131       /* Build and send message up the app */
//  132       msg->hdr.event = MT_SYS_APP_MSG;
        MOV     A,#0x23
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  133       msg->endpoint = endpoint;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  134       msg->appDataLen = dataLen;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
//  135       msg->appData = (uint8*)(msg+1);
        MOV     A,R2
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,?V0 + 6
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  136       osal_memcpy( msg->appData, pBuf, dataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  137       osal_msg_send( *(epDesc->task_id), (uint8 *)msg );
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        INC     DPTR
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  138 
//  139       /* Info for response */
//  140       retValue = ZSuccess;
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  141     }
//  142   }
//  143 
//  144   /* Build and send back the response */
//  145   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), cmdId, 1, &retValue);
??MT_AppMsg_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x69
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  146 }
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4
//  147 
//  148 /***************************************************************************************************
//  149  * @fn      MT_AppMsg
//  150  *
//  151  * @brief   Process APP_MSG command
//  152  *
//  153  * @param   pBuf - pointer to the received buffer
//  154  *
//  155  * @return  void
//  156  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 void MT_AppUserCmd(uint8 *pBuf) 						
MT_AppUserCmd:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function MT_AppUserCmd
//  158 {
        FUNCALL MT_AppUserCmd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  159 
//  160   uint8 retValue, cmdId;
//  161 
//  162 #if defined (APP_TGEN) || defined (NWK_TEST) || defined (APP_TP) || defined (APP_TP2) || defined (OSAL_TOTAL_MEM) || defined (APP_DEBUG)
//  163   uint16 app_cmd;
//  164   byte srcEp;
//  165   uint16 param1;
//  166   uint16 param2;
//  167 #endif
//  168 
//  169   /* parse header */
//  170   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
//  171   pBuf += MT_RPC_FRAME_HDR_SZ;
//  172 
//  173   retValue = INVALID_TASK;     //should be changed later
        MOV     A,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  174 
//  175 #if defined (APP_TGEN) || defined (NWK_TEST) || defined (APP_TP) || defined (APP_TP2) || defined (OSAL_TOTAL_MEM) || defined (APP_DEBUG)
//  176 
//  177   srcEp = *pBuf++;
//  178 
//  179   app_cmd = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  180   pBuf = pBuf + sizeof( uint16 );
//  181 
//  182   param1 = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  183   pBuf = pBuf + sizeof( uint16 );
//  184 
//  185   param2 = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  186 
//  187   switch ( app_cmd )
//  188   {
//  189 
//  190 #if defined (APP_TGEN)
//  191     case TGEN_START:
//  192       TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_START );
//  193       retValue = ZSUCCESS;
//  194       break;
//  195 
//  196     case TGEN_STOP:
//  197       TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_STOP );
//  198       retValue = ZSUCCESS;
//  199       break;
//  200 
//  201     case TGEN_COUNT:
//  202       retValue = TrafficGenApp_CountPkt( param1, param2 );
//  203       return;	
//  204       break;				
//  205 #endif
//  206 
//  207 #if defined (NWK_TEST)
//  208     case HW_TEST:
//  209       HwApp_Start( HI_UINT16(param1), LO_UINT16(param1), HI_UINT16(param2),
//  210                     1000, LO_UINT16(param2), 3, 0 );
//  211       break;
//  212 
//  213     case HW_DISPLAY_RESULT:
//  214       HwApp_TestInfo();
//  215       break;
//  216 
//  217     case HW_SEND_STATUS:
//  218       HwApp_SendStats();
//  219       break;
//  220 #endif
//  221 
//  222 #if defined( APP_TP ) || defined ( APP_TP2 )
//  223   #if defined( APP_TP )
//  224     case TP_SEND_NODATA:
//  225       retValue = TestProfileApp_SendNoData( srcEp, (byte)param1 );
//  226       break;
//  227   #endif // APP_TP
//  228 			
//  229     case TP_SEND_BUFFERTEST:
//  230       retValue = TestProfileApp_SendBufferReq( srcEp, (byte)param1 );
//  231       break;
//  232 			
//  233   #if defined( APP_TP )
//  234     case TP_SEND_UINT8:
//  235       retValue = TestProfileApp_SendUint8( srcEp, (byte)param1 );
//  236       break;
//  237 
//  238     case TP_SEND_INT8:
//  239       retValue = TestProfileApp_SendInt8( srcEp, (byte)param1 );
//  240       break;
//  241 
//  242     case TP_SEND_UINT16:
//  243       retValue = TestProfileApp_SendUint16( srcEp, (byte)param1 );
//  244       break;
//  245 
//  246     case TP_SEND_INT16:
//  247       retValue = TestProfileApp_SendInt16( srcEp, (byte)param1 );
//  248       break;
//  249 
//  250     case TP_SEND_SEMIPREC:
//  251       retValue = TestProfileApp_SendSemiPrec( srcEp, (byte)param1 );
//  252       break;
//  253 
//  254     case TP_SEND_FREEFORM:
//  255       retValue = TestProfileApp_SendFreeFormReq( srcEp, (byte)param1 );
//  256       break;
//  257 			
//  258   #else // APP_TP
//  259     case TP_SEND_FREEFORM:
//  260       retValue = TestProfileApp_SendFreeFormReq(srcEp, (byte)param1, (byte)param2);
//  261       break;
//  262   #endif
//  263 			
//  264   #if defined( APP_TP )
//  265     case TP_SEND_ABS_TIME:
//  266       retValue = TestProfileApp_SendAbsTime( srcEp, (byte)param1 );
//  267       break;
//  268 
//  269     case TP_SEND_REL_TIME:
//  270       retValue = TestProfileApp_SendRelativeTime( srcEp, (byte)param1 );
//  271       break;
//  272 
//  273     case TP_SEND_CHAR_STRING:
//  274       retValue = TestProfileApp_SendCharString( srcEp, (byte)param1 );
//  275       break;
//  276 
//  277     case TP_SEND_OCTET_STRING:
//  278       retValue = TestProfileApp_SendOctetString( srcEp, (byte)param1 );
//  279       break;		
//  280   #endif // APP_TP
//  281 				
//  282     case TP_SET_DSTADDRESS:			
//  283       retValue = TestProfileApp_SetDestAddress(HI_UINT16(param1), LO_UINT16(param1), param2);
//  284       break;	
//  285 
//  286   #if defined( APP_TP2 )
//  287     case TP_SEND_BUFFER_GROUP:
//  288       retValue = TestProfileApp_SendBufferGroup( srcEp, (byte)param1 );
//  289       break;
//  290   #endif // APP_TP
//  291 
//  292     case TP_SEND_BUFFER:
//  293       retValue = TestProfileApp_SendBuffer( srcEp, (byte)param1 );
//  294       break;
//  295 				
//  296   #if defined( APP_TP )
//  297     case TP_SEND_MULT_KVP_8BIT:
//  298       TestProfileApp_SendMultiKVP_8bit( srcEp, (byte)param1 );
//  299       retValue = ZSuccess;
//  300       break;
//  301 
//  302     case TP_SEND_MULT_KVP_16BIT:
//  303       TestProfileApp_SendMultiKVP_16bit( srcEp, (byte)param1 );
//  304       retValue = ZSuccess;
//  305       break;
//  306 
//  307     case TP_SEND_MULT_KVP_TIME:
//  308       TestProfileApp_SendMultiKVP_Time( srcEp, (byte)param1 );
//  309       retValue = ZSuccess;
//  310       break;
//  311 
//  312     case TP_SEND_MULT_KVP_STRING:
//  313       TestProfileApp_SendMultiKVP_String( srcEp, (byte)param1 );
//  314       retValue = ZSuccess;
//  315       break;
//  316 
//  317     case TP_SEND_MULTI_KVP_STR_TIME:
//  318       retValue = ZSuccess;
//  319       TestProfileApp_SendMultiKVP_String_Time( srcEp, (byte)param1 );
//  320       break;
//  321   #endif // APP_TP
//  322 				
//  323     case TP_SEND_COUNTED_PKTS:
//  324       TestProfileApp_SendCountedPktsReq(HI_UINT16(param1), LO_UINT16(param1), param2);
//  325       retValue = ZSuccess;
//  326       break;
//  327 
//  328     case TP_SEND_RESET_COUNTER:
//  329       TestProfileApp_CountedPakts_ResetCounterReq( (byte)param1 );
//  330       retValue = ZSuccess;
//  331       break;
//  332 
//  333     case TP_SEND_GET_COUNTER:
//  334       TestProfileApp_CountedPakts_GetCounterReq( srcEp, (byte)param1 );
//  335       retValue = ZSuccess;
//  336       break;
//  337 				
//  338     case TP_SET_PERMIT_JOIN:
//  339       if ( ZG_BUILD_RTR_TYPE && ZG_DEVICE_RTR_TYPE )
//  340       {
//  341         NLME_PermitJoiningRequest( (byte)param1 );
//  342         retValue = ZSuccess;
//  343       }
//  344       else
//  345       {
//  346         retValue = ZFailure;
//  347       }
//  348       break;
//  349 
//  350   #if defined ( APP_TP2 )
//  351     case TP_ADD_GROUP:
//  352       retValue = TestProfileApp_SetGroup( srcEp, param1 );
//  353       break;
//  354 
//  355     case TP_REMOVE_GROUP:
//  356       retValue = TestProfileApp_RemoveGroup( srcEp, param1 );
//  357       break;
//  358 
//  359     case TP_SEND_UPDATE_KEY:
//  360       retValue = TestProfileApp_UpdateKey( srcEp, (uint8)param1, param2 );
//  361       break;
//  362 
//  363     case TP_SEND_SWITCH_KEY:
//  364       retValue = TestProfileApp_SwitchKey(  srcEp, (uint8)param1, param2 );
//  365       break;
//  366 			
//  367     case TP_SEND_BUFFERTEST_GROUP:
//  368       retValue = TestProfileApp_SendBufferGroupReq( srcEp, (byte)param1, (byte)param2 );
//  369       break;
//  370 
//  371     case TP_SEND_ROUTE_DISC_REQ:
//  372       retValue = TestProfileApp_SendRouteDiscReq( srcEp, param1,
//  373                                   HI_UINT16( param2 ), LO_UINT16( param2 ) );
//  374       break;
//  375 
//  376     case TP_SEND_ROUTE_DISCOVERY:
//  377       if ( ZG_BUILD_RTR_TYPE && ZG_DEVICE_RTR_TYPE )
//  378       {
//  379         retValue = TestProfileApp_SendRouteDiscovery( param1,
//  380                                     HI_UINT16( param2 ), LO_UINT16( param2 ) );
//  381       }
//  382       break;
//  383 
//  384     case TP_SEND_NEW_ADDR:
//  385       retValue = TestProfileApp_ChangeShortAddr( param1, LO_UINT16(param2) );
//  386       break;
//  387 
//  388     case TP_SEND_NWK_UPDATE:
//  389       /* Send out a Network Update command. */
//  390       retValue = NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
//  391                                         _NIB.extendedPANID, _NIB.nwkUpdateId+1, param1 );
//  392       break;
//  393 
//  394  #if (ZG_BUILD_JOINING_TYPE)
//  395     case TP_AK_SETUP_PARTNER:
//  396       retValue = TestProfileApp_AppKeySetupPartner( srcEp, param1, param2 );
//  397       break;
//  398 
//  399     case TP_AK_REQ_KEY:
//  400       retValue = TestProfileApp_AppKeyRequest( srcEp, param1, param2 );
//  401       break;
//  402 
//  403     case TP_AK_PARTNER_NWKADDR:
//  404       retValue = TestProfileApp_SetPartnerNwkAddr( srcEp, param1, param2 );
//  405       break;
//  406 
//  407     case TP_AK_PARTNER_EXTADDR7654:
//  408        retValue = TestProfileApp_SetPartnerExtAddr7654( srcEp, param1, param2 );
//  409       break;
//  410 
//  411     case TP_AK_PARTNER_EXTADDR3210:
//  412       retValue = TestProfileApp_SetPartnerExtAddr3210( srcEp, param1, param2 );
//  413       break;
//  414 
//  415     case TP_AK_PARTNER_SET:
//  416       retValue = TestProfileApp_SetPartner( srcEp, param1, param2 );
//  417       break;
//  418 #endif /* ZG_BUILD_JOINING_TYPE */
//  419 
//  420 #if (ZG_BUILD_COORDINATOR_TYPE)
//  421     case TP_AK_TYPE_SET:
//  422       retValue = TestProfileApp_AppKeyTypeSet( srcEp, param1, param2 );
//  423       break;
//  424 #endif /* ZG_BUILD_COORDINATOR_TYPE */
//  425 
//  426 #if defined ( ZIGBEE_FRAGMENTATION )
//  427     case TP_FRAG_SKIP_BLOCK:
//  428       retValue = TestProfileApp_FragSkipBlock( (uint8)param1 );
//  429       break;
//  430 #endif
//  431 
//  432     case TP_APS_REMOVE:
//  433       retValue = TestProfileApp_APSRemove( param1, param2 );
//  434       break;
//  435 #endif // APP_TP2
//  436 
//  437 #endif  // APP_TP || APP_TP2
//  438 
//  439 #if defined ( OSAL_TOTAL_MEM )
//  440     case OSAL_MEM_STACK_HIGH_WATER:
//  441     case OSAL_MEM_HEAP_HIGH_WATER:
//  442       if ( app_cmd == OSAL_MEM_STACK_HIGH_WATER)
//  443       {
//  444         param1 = osal_stack_used();
//  445       }
//  446       else
//  447       {
//  448         param1 = osal_heap_high_water();
//  449       }
//  450 
//  451       pData[0] = LO_UINT16( param1 );
//  452       pData[1] = HI_UINT16( param1 );
//  453 
//  454       MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP | MT_RPC_SYS_APP), cmdId, 2, pData);
//  455       return;
//  456 #endif
//  457 
//  458 #if defined ( APP_DEBUG )
//  459     case DEBUG_GET:
//  460       DebugApp_SendQuery( param1 );
//  461       retValue = ZSUCCESS;
//  462       break;
//  463 #endif
//  464 
//  465 #if defined ( APP_TP2 )
//  466     case TP_SEND_BCAST_RSP:
//  467       retValue = TestProfileApp_SendBcastRsp( srcEp, (byte)param1 );
//  468       break;
//  469 #endif
//  470 			
//  471     default:
//  472       break;
//  473   }
//  474 #endif // (APP_TGEN) || (NWK_TEST) || (APP_TP) || (APP_TP2) || (OSAL_TOTAL_MEM) || (APP_DEBUG)
//  475 
//  476   /* Build and send back the response */
//  477   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), cmdId, 1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R1,#0x69
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  478 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AppCommandProcessing?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AppCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AppMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AppMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AppUserCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AppUserCmd

        END
//  479 
//  480 #endif /* MT_APP_FUNC */
//  481 
//  482 /***************************************************************************************************
//  483  ***************************************************************************************************/
// 
// 360 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
// 
// 378 bytes of CODE memory
//
//Errors: none
//Warnings: none
