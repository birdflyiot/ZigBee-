###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                07/Jun/2011  16:44:41 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\HomeAutomation\SampleSwitch\Source\zcl_samp #
#                          lesw.c                                             #
#    Command line       =  -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x04000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò #
#                          \Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Proje #
#                          cts\zstack\HomeAutomation\SampleSwitch\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wZCL.cfg" (-DZCL_READ      #
#                          -DZCL_WRITE -DZCL_BASIC -DZCL_IDENTIFY             #
#                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                   #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\Source\zcl_sam #
#                          plesw.c" -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D    #
#                          MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       #
#                          LCD_SUPPORTED=DEBUG -lC "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ #
#                          ýÕûÀí)\ZigBee2007³ÌÐò\Texas                        #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB- #
#                          Pro\List\" -lA "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\Zi #
#                          gBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0 #
#                          -1.3.0\Projects\zstack\HomeAutomation\SampleSwitch #
#                          \CC2530DB\RouterEB-Pro\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\Zi #
#                          gBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0 #
#                          -1.3.0\Projects\zstack\HomeAutomation\SampleSwitch #
#                          \CC2530DB\RouterEB-Pro\Obj\" -e                    #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ý #
#                          ÕûÀí)\ZigBee2007³ÌÐò\Texas                         #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\HomeAutomation\SampleSwitch\CC2530DB\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\SO #
#                          URCE\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2 #
#                          007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3. #
#                          0\Projects\zstack\HomeAutomation\SampleSwitch\CC25 #
#                          30DB\..\..\SOURCE\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ý #
#                          ÕûÀí)\ZigBee2007³ÌÐò\Texas                         #
#                          Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zst #
#                          ack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ #
#                          ZMAIN\TI2530DB\" -I "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀ #
#                          í)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530- #
#                          2.2.0-1.3.0\Projects\zstack\HomeAutomation\SampleS #
#                          witch\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I   #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\" -I              #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\" -I             #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\" -I                 #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\" -I               #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZCL\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\" -I                #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\" -I                 #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\" -I                     #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\" -I              #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I           #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I      #
#                          "F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Te #
#                          xas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects #
#                          \zstack\HomeAutomation\SampleSwitch\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\" -I "C:\Program Files\IAR Systems\Embedded     #
#                          Workbench 5.3 Evaluation version\8051\INC\" -I     #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\CLIB\" -Ohz        #
#    List file          =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\HomeAutomation\SampleSwitch\CC2530DB\Router #
#                          EB-Pro\List\zcl_samplesw.lst                       #
#    Object file        =  F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Tex #
#                          as Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\ #
#                          zstack\HomeAutomation\SampleSwitch\CC2530DB\Router #
#                          EB-Pro\Obj\zcl_samplesw.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ëæ±Ê\²úÆ·»¯\CC2530PK(´ýÕûÀí)\ZigBee2007³ÌÐò\Texas Instruments\ZStack-CC2530-2.2.0-1.3.0\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This device will be like an On/Off Switch device. This application
     42            is not intended to be a On/Off Switch device, but will use the device
     43            description to implement this sample code.
     44          *********************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          #include "ZComDef.h"
     50          #include "OSAL.h"
     51          #include "AF.h"
     52          #include "ZDApp.h"
     53          #include "ZDObject.h"
     54          #include "ZDProfile.h"
     55          
     56          #include "zcl.h"
     57          #include "zcl_general.h"
     58          #include "zcl_ha.h"
     59          #include "zcl_samplesw.h"
     60          
     61          #include "onboard.h"
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65          #include "hal_led.h"
     66          #include "hal_key.h"
     67          
     68          
     69          /*********************************************************************
     70           * MACROS
     71           */
     72          
     73          /*********************************************************************
     74           * CONSTANTS
     75           */
     76          /*********************************************************************
     77           * TYPEDEFS
     78           */
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          /*********************************************************************
     86           * GLOBAL FUNCTIONS
     87           */
     88          
     89          /*********************************************************************
     90           * LOCAL VARIABLES
     91           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          static afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     93          
     94          #define ZCLSAMPLESW_BINDINGLIST       1

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          static cId_t bindingOutClusters[ZCLSAMPLESW_BINDINGLIST] =
   \                     bindingOutClusters:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for bindingOutClusters>`
   \   000002                REQUIRE __INIT_XDATA_I
     96          {
     97            ZCL_CLUSTER_ID_GEN_ON_OFF
     98          };
     99          
    100          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          static endPointDesc_t sampleSw_TestEp =
   \                     sampleSw_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleSw_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    102          {
    103            20,                                 // Test endpoint
    104            &zclSampleSw_TaskID,
    105            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    106            (afNetworkLatencyReq_t)0            // No Network Latency req
    107          };
    108          
    109          
    110          /*********************************************************************
    111           * LOCAL FUNCTIONS
    112           */
    113          static void zclSampleSw_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    114          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    115          static void zclSampleSw_BasicResetCB( void );
    116          static void zclSampleSw_IdentifyCB( zclIdentify_t *pCmd );
    117          static void zclSampleSw_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp );
    118          static void zclSampleSw_ProcessIdentifyTimeChange( void );
    119          
    120          // Functions to process ZCL Foundation incoming Command/Response messages
    121          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    122          #ifdef ZCL_READ
    123          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    124          #endif
    125          #ifdef ZCL_WRITE
    126          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    127          #endif
    128          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    129          #ifdef ZCL_DISCOVER
    130          static uint8 zclSampleSw_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
    131          #endif
    132          
    133          /*********************************************************************
    134           * ZCL General Profile Callback table
    135           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    136          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   00001E                REQUIRE __INIT_XDATA_I
    137          {
    138            zclSampleSw_BasicResetCB,     // Basic Cluster Reset command
    139            zclSampleSw_IdentifyCB,       // Identify command
    140            zclSampleSw_IdentifyQueryRspCB, // Identify Query Response command
    141            NULL,                         // On / Off cluster command - not needed.
    142            NULL,                         // Level Control Move to Level command
    143            NULL,                         // Level Control Move command
    144            NULL,                         // Level Control Step command
    145            NULL,                         // Group Response commands
    146            NULL,                         // Scene Store Request command
    147            NULL,                         // Scene Recall Request command
    148            NULL,                         // Scene Response commands
    149            NULL,                         // Alarm (Response) commands
    150            NULL,                         // RSSI Location commands
    151            NULL,                         // RSSI Location Response commands
    152          };
    153          
    154          
    155          /*********************************************************************
    156           * @fn          zclSampleSw_Init
    157           *
    158           * @brief       Initialization function for the zclGeneral layer.
    159           *
    160           * @param       none
    161           *
    162           * @return      none
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    166            zclSampleSw_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   000008   F0           MOVX    @DPTR,A
    167          
    168            // Set destination address to indirect
    169            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000009   E4           CLR     A
   \   00000A   90....       MOV     DPTR,#(zclSampleSw_DstAddr + 8)
   \   00000D   F0           MOVX    @DPTR,A
    170            zclSampleSw_DstAddr.endPoint = 0;
   \   00000E   90....       MOV     DPTR,#(zclSampleSw_DstAddr + 9)
   \   000011   F0           MOVX    @DPTR,A
    171            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleSw_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    172          
    173            // This app is part of the Home Automation Profile
    174            zclHA_Init( &zclSampleSw_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#(zclSampleSw_SimpleDesc & 0xff)
   \   00001A   7B..         MOV     R3,#((zclSampleSw_SimpleDesc >> 8) & 0xff)
   \   00001C   12....       LCALL   ??zclHA_Init?relay
    175          
    176            // Register the ZCL General Cluster Library callback functions
    177            zclGeneral_RegisterCmdCallbacks( SAMPLESW_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#(zclSampleSw_CmdCallbacks & 0xff)
   \   000021   7B..         MOV     R3,#((zclSampleSw_CmdCallbacks >> 8) & 0xff)
   \   000023   790A         MOV     R1,#0xa
   \   000025   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    178          
    179            // Register the application's attribute list
    180            zcl_registerAttrList( SAMPLESW_ENDPOINT, SAMPLESW_MAX_ATTRIBUTES, zclSampleSw_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#(zclSampleSw_Attrs & 0xff)
   \   00002A   7D..         MOV     R5,#((zclSampleSw_Attrs >> 8) & 0xff)
   \   00002C   7A0B         MOV     R2,#0xb
   \   00002E   790A         MOV     R1,#0xa
   \   000030   12....       LCALL   ??zcl_registerAttrList?relay
    181          
    182            // Register the Application to receive the unprocessed Foundation command/response messages
    183            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000033                ; Setup parameters for call to function zcl_registerForMsg
   \   000033   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??zcl_registerForMsg?relay
    184          
    185            // Register for all key events - This app will handle all key events
    186            RegisterForKeys( zclSampleSw_TaskID );
   \   00003B                ; Setup parameters for call to function RegisterForKeys
   \   00003B   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??RegisterForKeys?relay
    187          
    188            // Register for a test endpoint
    189            afRegister( &sampleSw_TestEp );
   \   000043                ; Setup parameters for call to function afRegister
   \   000043   7A..         MOV     R2,#(sampleSw_TestEp & 0xff)
   \   000045   7B..         MOV     R3,#((sampleSw_TestEp >> 8) & 0xff)
   \   000047   12....       LCALL   ??afRegister?relay
    190          
    191            ZDO_RegisterForZDOMsg( zclSampleSw_TaskID, End_Device_Bind_rsp );
   \   00004A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004A   7A20         MOV     R2,#0x20
   \   00004C   7B80         MOV     R3,#-0x80
   \   00004E   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    192            ZDO_RegisterForZDOMsg( zclSampleSw_TaskID, Match_Desc_rsp );
   \   000056                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000056   7A06         MOV     R2,#0x6
   \   000058   7B80         MOV     R3,#-0x80
   \   00005A   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    193          }
   \   000062                REQUIRE ?Subroutine2
   \   000062                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    194          
    195          /*********************************************************************
    196           * @fn          zclSample_event_loop
    197           *
    198           * @brief       Event Loop Processor for zclGeneral.
    199           *
    200           * @param       none
    201           *
    202           * @return      none
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    205          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    206            afIncomingMSGPacket_t *MSGpkt;
    207            (void)task_id;  // Intentionally unreferenced parameter
    208          
    209            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??zclSampleSw_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??zclSampleSw_event_loop_0:
   \   000011   7039         JNZ     ??zclSampleSw_event_loop_1
    210            {
    211              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    212              {
    213                switch ( MSGpkt->hdr.event )
    214                {
    215                  case ZCL_INCOMING_MSG:
    216                    // Incoming ZCL Foundation command/response messages
    217                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    218                    break;
    219          
    220                  case ZDO_CB_MSG:
    221                    zclSampleSw_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    222                    break;
    223          
    224                  case KEY_CHANGE:
    225                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    226                    break;
    227          
    228                  default:
    229                    break;
    230                }
    231          
    232                // Release the memory
    233                osal_msg_deallocate( (uint8 *)MSGpkt );
    234              }
    235          
    236              // return unprocessed events
    237              return (events ^ SYS_EVENT_MSG);
    238            }
    239          
    240            if ( events & SAMPLESW_IDENTIFY_TIMEOUT_EVT )
   \   000013   EE           MOV     A,R6
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   4003         JC      $+5
   \   000018   02....       LJMP    ??zclSampleSw_event_loop_2 & 0xFFFF
    241            {
    242              zclSampleSw_IdentifyTime = 10;
   \   00001B   90....       MOV     DPTR,#zclSampleSw_IdentifyTime
   \   00001E   740A         MOV     A,#0xa
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
    243              zclSampleSw_ProcessIdentifyTimeChange();
   \   000024                ; Setup parameters for call to function zclSampleSw_ProcessIdentifyTimeChange
   \   000024   12....       LCALL   ??zclSampleSw_ProcessIdentifyTimeChange?relay
    244          
    245              return ( events ^ SAMPLESW_IDENTIFY_TIMEOUT_EVT );
   \   000027   7401         MOV     A,#0x1
   \   000029   6E           XRL     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \                     ??zclSampleSw_event_loop_3:
   \   00002C   FB           MOV     R3,A
   \   00002D   02....       LJMP    ??zclSampleSw_event_loop_4 & 0xFFFF
    246            }
   \                     ??zclSampleSw_event_loop_5:
   \   000030                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   85..82       MOV     DPL,?V0 + 0
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??zclSampleSw_HandleKeys?relay
   \                     ??zclSampleSw_event_loop_6:
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   AA..         MOV     R2,?V0 + 0
   \   000047   AB..         MOV     R3,?V0 + 1
   \   000049   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??zclSampleSw_event_loop_1:
   \   00004C                ; Setup parameters for call to function osal_msg_receive
   \   00004C   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_receive?relay
   \   000054   8A..         MOV     ?V0 + 0,R2
   \   000056   8B..         MOV     ?V0 + 1,R3
   \   000058   EA           MOV     A,R2
   \   000059   7001         JNZ     ??zclSampleSw_event_loop_7
   \   00005B   EB           MOV     A,R3
   \                     ??zclSampleSw_event_loop_7:
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??zclSampleSw_event_loop_8 & 0xFFFF
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSampleSw_event_loop>_0`:
   \   000069   00           DB        0
   \   00006A   03           DB        3
   \   00006B   34           DB        52
   \   00006C   ....         DW        ??zclSampleSw_event_loop_9
   \   00006E   C0           DB        192
   \   00006F   ....         DW        ??zclSampleSw_event_loop_5
   \   000071   D3           DB        211
   \   000072   ....         DW        ??zclSampleSw_event_loop_10
   \   000074   ....         DW        ??zclSampleSw_event_loop_6
   \                     ??zclSampleSw_event_loop_9:
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSampleSw_event_loop>_1`:
   \   000085   00           DB        0
   \   000086   02           DB        2
   \   000087   01           DB        1
   \   000088   ....         DW        ??zclSampleSw_event_loop_11
   \   00008A   04           DB        4
   \   00008B   ....         DW        ??zclSampleSw_event_loop_12
   \   00008D   ....         DW        ??zclSampleSw_event_loop_13
   \                     ??zclSampleSw_event_loop_11:
   \   00008F   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FA           MOV     R2,A
   \   000094   EB           MOV     A,R3
   \   000095   C3           CLR     C
   \   000096   9A           SUBB    A,R2
   \   000097   5010         JNC     ??zclSampleSw_event_loop_13
   \   000099   0B           INC     R3
   \   00009A   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSampleSw_event_loop_12:
   \   00009C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009F   8001         SJMP    ??zclSampleSw_event_loop_14
   \                     ??zclSampleSw_event_loop_15:
   \   0000A1   0B           INC     R3
   \                     ??zclSampleSw_event_loop_14:
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EB           MOV     A,R3
   \   0000A5   C3           CLR     C
   \   0000A6   9A           SUBB    A,R2
   \   0000A7   40F8         JC      ??zclSampleSw_event_loop_15
   \                     ??zclSampleSw_event_loop_13:
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   2416         ADD     A,#0x16
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E5..         MOV     A,?V0 + 1
   \   0000B1   3400         ADDC    A,#0x0
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FA           MOV     R2,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FB           MOV     R3,A
   \   0000BA   EA           MOV     A,R2
   \   0000BB   7001         JNZ     ??zclSampleSw_event_loop_16
   \   0000BD   EB           MOV     A,R3
   \                     ??zclSampleSw_event_loop_16:
   \   0000BE   6085         JZ      ??zclSampleSw_event_loop_6
   \   0000C0                ; Setup parameters for call to function osal_mem_free
   \                     ??zclSampleSw_event_loop_17:
   \   0000C0   12....       LCALL   ??osal_mem_free?relay
   \   0000C3   8080         SJMP    ??zclSampleSw_event_loop_6
   \                     ??zclSampleSw_event_loop_10:
   \   0000C5   EA           MOV     A,R2
   \   0000C6   240C         ADD     A,#0xc
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   EB           MOV     A,R3
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F5..         MOV     ?V0 + 2,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F5..         MOV     ?V0 + 3,A
   \   0000D6   78..         MOV     R0,#?V0 + 2
   \   0000D8   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclSampleSw_event_loop>_2`:
   \   0000DB   0000         DW        0
   \   0000DD   0200         DW        2
   \   0000DF   0680         DW        32774
   \   0000E1   ....         DW        ??zclSampleSw_event_loop_18
   \   0000E3   2080         DW        32800
   \   0000E5   ....         DW        ??zclSampleSw_event_loop_19
   \   0000E7   ....         DW        ??zclSampleSw_event_loop_6
   \                     ??zclSampleSw_event_loop_19:
   \   0000E9   EA           MOV     A,R2
   \   0000EA   2413         ADD     A,#0x13
   \   0000EC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   8882         MOV     DPL,R0
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   700A         JNZ     ??zclSampleSw_event_loop_20
   \   0000F6                ; Setup parameters for call to function HalLedSet
   \   0000F6   7A01         MOV     R2,#0x1
   \                     ??zclSampleSw_event_loop_21:
   \   0000F8   7908         MOV     R1,#0x8
   \   0000FA   12....       LCALL   ??HalLedSet?relay
   \   0000FD   02....       LJMP    ??zclSampleSw_event_loop_6 & 0xFFFF
   \                     ??zclSampleSw_event_loop_20:
   \   000100                ; Setup parameters for call to function HalLedSet
   \   000100   7A04         MOV     R2,#0x4
   \   000102   80F4         SJMP    ??zclSampleSw_event_loop_21
   \                     ??zclSampleSw_event_loop_18:
   \   000104                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000104   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000107   8A..         MOV     ?V0 + 2,R2
   \   000109   8B..         MOV     ?V0 + 3,R3
   \   00010B   EA           MOV     A,R2
   \   00010C   7001         JNZ     ??zclSampleSw_event_loop_22
   \   00010E   EB           MOV     A,R3
   \                     ??zclSampleSw_event_loop_22:
   \   00010F   7003         JNZ     $+5
   \   000111   02....       LJMP    ??zclSampleSw_event_loop_6 & 0xFFFF
   \   000114   8A82         MOV     DPL,R2
   \   000116   8B83         MOV     DPH,R3
   \   000118   E0           MOVX    A,@DPTR
   \   000119   7032         JNZ     ??zclSampleSw_event_loop_23
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   602C         JZ      ??zclSampleSw_event_loop_23
   \   000121   7402         MOV     A,#0x2
   \   000123   90....       MOV     DPTR,#(zclSampleSw_DstAddr + 8)
   \   000126   F0           MOVX    @DPTR,A
   \   000127   8A82         MOV     DPL,R2
   \   000129   8B83         MOV     DPH,R3
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F8           MOV     R0,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   90....       MOV     DPTR,#zclSampleSw_DstAddr
   \   000134   E8           MOV     A,R0
   \   000135   F0           MOVX    @DPTR,A
   \   000136   A3           INC     DPTR
   \   000137   E9           MOV     A,R1
   \   000138   F0           MOVX    @DPTR,A
   \   000139   8A82         MOV     DPL,R2
   \   00013B   8B83         MOV     DPH,R3
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   90....       MOV     DPTR,#(zclSampleSw_DstAddr + 9)
   \   000145   F0           MOVX    @DPTR,A
   \   000146                ; Setup parameters for call to function HalLedSet
   \   000146   7A01         MOV     R2,#0x1
   \   000148   7908         MOV     R1,#0x8
   \   00014A   12....       LCALL   ??HalLedSet?relay
   \                     ??zclSampleSw_event_loop_23:
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0 + 2
   \   00014F   AB..         MOV     R3,?V0 + 3
   \   000151   02....       LJMP    ??zclSampleSw_event_loop_17 & 0xFFFF
   \                     ??zclSampleSw_event_loop_8:
   \   000154   EE           MOV     A,R6
   \   000155   FA           MOV     R2,A
   \   000156   7480         MOV     A,#-0x80
   \   000158   6F           XRL     A,R7
   \   000159   02....       LJMP    ??zclSampleSw_event_loop_3 & 0xFFFF
    247          
    248            // Discard unknown events
    249            return 0;
   \                     ??zclSampleSw_event_loop_2:
   \   00015C   7A00         MOV     R2,#0x0
   \   00015E   7B00         MOV     R3,#0x0
   \                     ??zclSampleSw_event_loop_4:
   \   000160   7F06         MOV     R7,#0x6
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
    250          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV     A,R2
   \   000001   2416         ADD     A,#0x16
   \   000003   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    251          
    252          
    253          /*********************************************************************
    254           * @fn      zclSampleSw_ProcessZDOMsgs()
    255           *
    256           * @brief   Process response messages
    257           *
    258           * @param   none
    259           *
    260           * @return  none
    261           */
    262          void zclSampleSw_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    263          {
    264            switch ( inMsg->clusterID )
    265            {
    266              case End_Device_Bind_rsp:
    267                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    268                {
    269                  // Light LED
    270                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    271                }
    272          #if defined(BLINK_LEDS)
    273                else
    274                {
    275                  // Flash LED to show failure
    276                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    277                }
    278          #endif
    279                break;
    280          
    281              case Match_Desc_rsp:
    282                {
    283                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    284                  if ( pRsp )
    285                  {
    286                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    287                    {
    288                      zclSampleSw_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    289                      zclSampleSw_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    290                      // Take the first endpoint, Can be changed to search through endpoints
    291                      zclSampleSw_DstAddr.endPoint = pRsp->epList[0];
    292          
    293                      // Light LED
    294                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    295                    }
    296                    osal_mem_free( pRsp );
    297                  }
    298                }
    299                break;
    300            }
    301          }
    302          
    303          /*********************************************************************
    304           * @fn      zclSampleSw_HandleKeys
    305           *
    306           * @brief   Handles all key events for this device.
    307           *
    308           * @param   shift - true if in shift/alt.
    309           * @param   keys - bit field for key events. Valid entries:
    310           *                 HAL_KEY_SW_4
    311           *                 HAL_KEY_SW_3
    312           *                 HAL_KEY_SW_2
    313           *                 HAL_KEY_SW_1
    314           *
    315           * @return  none
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    318          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    319            zAddrType_t dstAddr;
    320            (void)shift;  // Intentionally unreferenced parameter
    321          
    322            if ( keys & HAL_KEY_SW_1 )
   \   00000C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000E   5046         JNC     ??zclSampleSw_HandleKeys_0
    323            {
    324              // Using this as the "Light Switch"
    325          #ifdef ZCL_ON_OFF
    326              zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclSampleSw_DstAddr, false, 0 );
   \   000010                ; Setup parameters for call to function zcl_SendCommand
   \   000010   75..00       MOV     ?V0 + 0,#0x0
   \   000013   75..00       MOV     ?V0 + 1,#0x0
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   75..01       MOV     ?V0 + 0,#0x1
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75..02       MOV     ?V0 + 0,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   7C06         MOV     R4,#0x6
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7A..         MOV     R2,#(zclSampleSw_DstAddr & 0xff)
   \   00004A   7B..         MOV     R3,#((zclSampleSw_DstAddr >> 8) & 0xff)
   \   00004C   790A         MOV     R1,#0xa
   \   00004E   12....       LCALL   ??zcl_SendCommand?relay
   \   000051   740A         MOV     A,#0xa
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    327          #endif
    328            }
    329          
    330            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleSw_HandleKeys_0:
   \   000056   EF           MOV     A,R7
   \   000057   A2E1         MOV     C,0xE0 /* A   */.1
   \   000059   5069         JNC     ??zclSampleSw_HandleKeys_1
    331            {
    332              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   00005B                ; Setup parameters for call to function HalLedSet
   \   00005B   7A00         MOV     R2,#0x0
   \   00005D   7908         MOV     R1,#0x8
   \   00005F   12....       LCALL   ??HalLedSet?relay
    333          
    334              // Initiate an End Device Bind Request, this bind request will
    335              // only use a cluster list that is important to binding.
    336              dstAddr.addrMode = afAddr16Bit;
   \   000062   7408         MOV     A,#0x8
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7402         MOV     A,#0x2
   \   000069   F0           MOVX    @DPTR,A
    337              dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   F0           MOVX    @DPTR,A
    338              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    339                                     SAMPLESW_ENDPOINT,
    340                                     ZCL_HA_PROFILE_ID,
    341                                     0, NULL,   // No incoming clusters to bind
    342                                     ZCLSAMPLESW_BINDINGLIST, bindingOutClusters,
    343                                     TRUE );
   \   000074                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000074   75..01       MOV     ?V0 + 0,#0x1
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   75....       MOV     ?V0 + 0,#(bindingOutClusters & 0xff)
   \   00007F   75....       MOV     ?V0 + 1,#((bindingOutClusters >> 8) & 0xff)
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   75..01       MOV     ?V0 + 0,#0x1
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   75..00       MOV     ?V0 + 0,#0x0
   \   000092   75..00       MOV     ?V0 + 1,#0x0
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   75..04       MOV     ?V0 + 0,#0x4
   \   0000A2   75..01       MOV     ?V0 + 1,#0x1
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000AA   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000AD   EA           MOV     A,R2
   \   0000AE   FC           MOV     R4,A
   \   0000AF   EB           MOV     A,R3
   \   0000B0   FD           MOV     R5,A
   \   0000B1   790A         MOV     R1,#0xa
   \   0000B3   7409         MOV     A,#0x9
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   AA82         MOV     R2,DPL
   \   0000BA   AB83         MOV     R3,DPH
   \   0000BC   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   0000BF   7409         MOV     A,#0x9
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
    344            }
    345          
    346            if ( keys & HAL_KEY_SW_3 )
    347            {
    348            }
    349          
    350            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleSw_HandleKeys_1:
   \   0000C4   EF           MOV     A,R7
   \   0000C5   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000C7   505C         JNC     ??zclSampleSw_HandleKeys_2
    351            {
    352              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   0000C9                ; Setup parameters for call to function HalLedSet
   \   0000C9   7A00         MOV     R2,#0x0
   \   0000CB   7908         MOV     R1,#0x8
   \   0000CD   12....       LCALL   ??HalLedSet?relay
    353          
    354              // Initiate a Match Description Request (Service Discovery)
    355              dstAddr.addrMode = AddrBroadcast;
   \   0000D0   7408         MOV     A,#0x8
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   740F         MOV     A,#0xf
   \   0000D7   F0           MOVX    @DPTR,A
    356              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   74FF         MOV     A,#-0x1
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   F0           MOVX    @DPTR,A
    357              ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    358                                 ZCL_HA_PROFILE_ID,
    359                                 ZCLSAMPLESW_BINDINGLIST, bindingOutClusters,
    360                                 0, NULL,   // No incoming clusters to bind
    361                                 FALSE );
   \   0000E3                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000E3   75..00       MOV     ?V0 + 0,#0x0
   \   0000E6   78..         MOV     R0,#?V0 + 0
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EB   75..00       MOV     ?V0 + 1,#0x0
   \   0000EE   78..         MOV     R0,#?V0 + 0
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F8   75....       MOV     ?V0 + 0,#(bindingOutClusters & 0xff)
   \   0000FB   75....       MOV     ?V0 + 1,#((bindingOutClusters >> 8) & 0xff)
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   75..04       MOV     ?V0 + 0,#0x4
   \   000106   75..01       MOV     ?V0 + 1,#0x1
   \   000109   78..         MOV     R0,#?V0 + 0
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   7901         MOV     R1,#0x1
   \   000110   7CFF         MOV     R4,#-0x1
   \   000112   7DFF         MOV     R5,#-0x1
   \   000114   7408         MOV     A,#0x8
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   000120   7408         MOV     A,#0x8
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
    362            }
    363          }
   \                     ??zclSampleSw_HandleKeys_2:
   \   000125   7409         MOV     A,#0x9
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012A   7F02         MOV     R7,#0x2
   \   00012C   02....       LJMP    ?BANKED_LEAVE_XDATA
    364          
    365          /*********************************************************************
    366           * @fn      zclSampleSw_ProcessIdentifyTimeChange
    367           *
    368           * @brief   Called to process any change to the IdentifyTime attribute.
    369           *
    370           * @param   none
    371           *
    372           * @return  none
    373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          static void zclSampleSw_ProcessIdentifyTimeChange( void )
   \                     zclSampleSw_ProcessIdentifyTimeChange:
    375          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    376            if ( zclSampleSw_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclSampleSw_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??zclSampleSw_ProcessIdentifyTimeChange_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??zclSampleSw_ProcessIdentifyTimeChange_0:
   \   00000C   601F         JZ      ??zclSampleSw_ProcessIdentifyTimeChange_1
    377            {
    378              osal_start_timerEx( zclSampleSw_TaskID, SAMPLESW_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    379              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7AFF         MOV     R2,#-0x1
   \   000026   7908         MOV     R1,#0x8
   \   000028   12....       LCALL   ??HalLedBlink?relay
   \   00002B   801D         SJMP    ??zclSampleSw_ProcessIdentifyTimeChange_2
    380            }
    381            else
    382            {
    383              if ( zclSampleSw_OnOff )
   \                     ??zclSampleSw_ProcessIdentifyTimeChange_1:
   \   00002D   90....       MOV     DPTR,#zclSampleSw_OnOff
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6004         JZ      ??zclSampleSw_ProcessIdentifyTimeChange_3
    384                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   8002         SJMP    ??zclSampleSw_ProcessIdentifyTimeChange_4
    385              else
    386                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleSw_ProcessIdentifyTimeChange_3:
   \   000037                ; Setup parameters for call to function HalLedSet
   \   000037   7A00         MOV     R2,#0x0
   \                     ??zclSampleSw_ProcessIdentifyTimeChange_4:
   \   000039   7908         MOV     R1,#0x8
   \   00003B   12....       LCALL   ??HalLedSet?relay
    387              osal_stop_timerEx( zclSampleSw_TaskID, SAMPLESW_IDENTIFY_TIMEOUT_EVT );
   \   00003E                ; Setup parameters for call to function osal_stop_timerEx
   \   00003E   7A01         MOV     R2,#0x1
   \   000040   7B00         MOV     R3,#0x0
   \   000042   90....       MOV     DPTR,#zclSampleSw_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??osal_stop_timerEx?relay
    388            }
    389          }
   \                     ??zclSampleSw_ProcessIdentifyTimeChange_2:
   \   00004A   02....       LJMP    ?Subroutine2 & 0xFFFF
    390          
    391          /*********************************************************************
    392           * @fn      zclSampleSw_BasicResetCB
    393           *
    394           * @brief   Callback from the ZCL General Cluster Library
    395           *          to set all the Basic Cluster attributes to  default values.
    396           *
    397           * @param   none
    398           *
    399           * @return  none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    402          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    403          }
   \   000000   02....       LJMP    ?BRET
    404          
    405          /*********************************************************************
    406           * @fn      zclSampleSw_IdentifyCB
    407           *
    408           * @brief   Callback from the ZCL General Cluster Library when
    409           *          it received an Identity Command for this application.
    410           *
    411           * @param   srcAddr - source address and endpoint of the response message
    412           * @param   identifyTime - the number of seconds to identify yourself
    413           *
    414           * @return  none
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          static void zclSampleSw_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleSw_IdentifyCB:
    417          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    418            zclSampleSw_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#zclSampleSw_IdentifyTime
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    419            zclSampleSw_ProcessIdentifyTimeChange();
   \   000017                ; Setup parameters for call to function zclSampleSw_ProcessIdentifyTimeChange
   \   000017   12....       LCALL   ??zclSampleSw_ProcessIdentifyTimeChange?relay
    420          }
   \   00001A   02....       LJMP    ?Subroutine2 & 0xFFFF
    421          
    422          /*********************************************************************
    423           * @fn      zclSampleSw_IdentifyQueryRspCB
    424           *
    425           * @brief   Callback from the ZCL General Cluster Library when
    426           *          it received an Identity Query Response Command for this application.
    427           *
    428           * @param   srcAddr - source address
    429           * @param   timeout - number of seconds to identify yourself (valid for query response)
    430           *
    431           * @return  none
    432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          static void zclSampleSw_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleSw_IdentifyQueryRspCB:
    434          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    435            // Query Response (with timeout value)
    436            (void)pRsp;
    437          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingOutClusters>`:
   \   000000   0600         DW 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....0000     DW zclSampleSw_TaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ........     DW ??zclSampleSw_BasicResetCB?relay, ??zclSampleSw_IdentifyCB?relay
   \   000004   ....0000     DW ??zclSampleSw_IdentifyQueryRspCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \            00000000
   \            00000000
   \            00000000
   \   000014   00000000     DW 0H, 0H, 0H, 0H
   \            00000000
   \   00001C   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_ProcessIdentifyTimeChange?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleSw_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_IdentifyQueryRspCB
    438          
    439          /******************************************************************************
    440           *
    441           *  Functions for processing ZCL Foundation incoming Command/Response messages
    442           *
    443           *****************************************************************************/
    444          
    445          /*********************************************************************
    446           * @fn      zclSampleSw_ProcessIncomingMsg
    447           *
    448           * @brief   Process ZCL Foundation incoming message
    449           *
    450           * @param   pInMsg - pointer to the received message
    451           *
    452           * @return  none
    453           */
    454          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    455          {
    456            switch ( pInMsg->zclHdr.commandID )
    457            {
    458          #ifdef ZCL_READ
    459              case ZCL_CMD_READ_RSP:
    460                zclSampleSw_ProcessInReadRspCmd( pInMsg );
    461                break;
    462          #endif
    463          #ifdef ZCL_WRITE
    464              case ZCL_CMD_WRITE_RSP:
    465                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
    466                break;
    467          #endif
    468          #ifdef ZCL_REPORT
    469              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    470              case ZCL_CMD_CONFIG_REPORT:
    471                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    472                break;
    473          
    474              case ZCL_CMD_CONFIG_REPORT_RSP:
    475                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    476                break;
    477          
    478              case ZCL_CMD_READ_REPORT_CFG:
    479                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    480                break;
    481          
    482              case ZCL_CMD_READ_REPORT_CFG_RSP:
    483                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    484                break;
    485          
    486              case ZCL_CMD_REPORT:
    487                //zclSampleSw_ProcessInReportCmd( pInMsg );
    488                break;
    489          #endif
    490              case ZCL_CMD_DEFAULT_RSP:
    491                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
    492                break;
    493          #ifdef ZCL_DISCOVER
    494              case ZCL_CMD_DISCOVER_RSP:
    495                zclSampleSw_ProcessInDiscRspCmd( pInMsg );
    496                break;
    497          #endif
    498              default:
    499                break;
    500            }
    501          
    502            if ( pInMsg->attrCmd )
    503              osal_mem_free( pInMsg->attrCmd );
    504          }
    505          
    506          #ifdef ZCL_READ
    507          /*********************************************************************
    508           * @fn      zclSampleSw_ProcessInReadRspCmd
    509           *
    510           * @brief   Process the "Profile" Read Response Command
    511           *
    512           * @param   pInMsg - incoming message to process
    513           *
    514           * @return  none
    515           */
    516          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    517          {
    518            zclReadRspCmd_t *readRspCmd;
    519            uint8 i;
    520          
    521            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    522            for (i = 0; i < readRspCmd->numAttr; i++)
    523            {
    524              // Notify the originator of the results of the original read attributes
    525              // attempt and, for each successfull request, the value of the requested
    526              // attribute
    527            }
    528          
    529            return TRUE;
    530          }
    531          #endif // ZCL_READ
    532          
    533          #ifdef ZCL_WRITE
    534          /*********************************************************************
    535           * @fn      zclSampleSw_ProcessInWriteRspCmd
    536           *
    537           * @brief   Process the "Profile" Write Response Command
    538           *
    539           * @param   pInMsg - incoming message to process
    540           *
    541           * @return  none
    542           */
    543          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    544          {
    545            zclWriteRspCmd_t *writeRspCmd;
    546            uint8 i;
    547          
    548            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    549            for (i = 0; i < writeRspCmd->numAttr; i++)
    550            {
    551              // Notify the device of the results of the its original write attributes
    552              // command.
    553            }
    554          
    555            return TRUE;
    556          }
    557          #endif // ZCL_WRITE
    558          
    559          /*********************************************************************
    560           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    561           *
    562           * @brief   Process the "Profile" Default Response Command
    563           *
    564           * @param   pInMsg - incoming message to process
    565           *
    566           * @return  none
    567           */
    568          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    569          {
    570            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    571            // Device is notified of the Default Response command.
    572            (void)pInMsg;
    573            return TRUE;
    574          }
    575          
    576          #ifdef ZCL_DISCOVER
    577          /*********************************************************************
    578           * @fn      zclSampleSw_ProcessInDiscRspCmd
    579           *
    580           * @brief   Process the "Profile" Discover Response Command
    581           *
    582           * @param   pInMsg - incoming message to process
    583           *
    584           * @return  none
    585           */
    586          static uint8 zclSampleSw_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    587          {
    588            zclDiscoverRspCmd_t *discoverRspCmd;
    589            uint8 i;
    590          
    591            discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
    592            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    593            {
    594              // Device is notified of the result of its attribute discovery command.
    595            }
    596          
    597            return TRUE;
    598          }
    599          #endif // ZCL_DISCOVER
    600          
    601          
    602          /****************************************************************************
    603          ****************************************************************************/
    604          
    605          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     zclSampleSw_BasicResetCB           0      0      0
     zclSampleSw_HandleKeys             1      0     43
       -> zcl_SendCommand               0      0     58
       -> HalLedSet                     0      0     38
       -> NLME_GetShortAddr             0      0     56
       -> ZDP_EndDeviceBindReq          0      0     56
       -> HalLedSet                     0      0     38
       -> ZDP_MatchDescReq              0      0     54
     zclSampleSw_IdentifyCB             2      0      0
       -> zclSampleSw_ProcessIdentifyTimeChange
                                        4      0      0
     zclSampleSw_IdentifyQueryRspCB     0      0      0
     zclSampleSw_Init                   2      0      0
       -> zclHA_Init                    4      0      0
       -> zclGeneral_RegisterCmdCallbacks
                                        4      0      0
       -> zcl_registerAttrList          4      0      0
       -> zcl_registerForMsg            4      0      0
       -> RegisterForKeys               4      0      0
       -> afRegister                    4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     zclSampleSw_ProcessIdentifyTimeChange
                                        2      0     14
       -> osal_start_timerEx            4      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_stop_timerEx             4      0      0
     zclSampleSw_event_loop             1      0     14
       -> zclSampleSw_ProcessIdentifyTimeChange
                                        0      0     28
       -> zclSampleSw_HandleKeys        0      0     28
       -> osal_msg_deallocate           0      0     28
       -> osal_msg_receive              0      0     28
       -> osal_mem_free                 0      0     28
       -> HalLedSet                     0      0     28
       -> HalLedSet                     0      0     28
       -> ZDO_ParseEPListRsp            0      0     28
       -> HalLedSet                     0      0     28
       -> osal_mem_free                 0      0     28


   Segment part sizes:

     Function/Label                                Bytes
     --------------                                -----
     zclSampleSw_TaskID                               1
     zclSampleSw_DstAddr                             12
     bindingOutClusters                               2
     sampleSw_TestEp                                  6
     zclSampleSw_CmdCallbacks                        30
     zclSampleSw_Init                                98
     ?Subroutine2                                     7
     zclSampleSw_event_loop                         357
     ?Subroutine0                                    14
     ?Subroutine1                                    12
     zclSampleSw_HandleKeys                         303
     zclSampleSw_ProcessIdentifyTimeChange
                                                     77
     zclSampleSw_BasicResetCB                         3
     zclSampleSw_IdentifyCB                          29
     zclSampleSw_IdentifyQueryRspCB                   3
     ?<Initializer for bindingOutClusters>            2
     ?<Initializer for sampleSw_TestEp>               6
     ?<Initializer for zclSampleSw_CmdCallbacks>     30
     ??zclSampleSw_Init?relay                         6
     ??zclSampleSw_event_loop?relay                   6
     ??zclSampleSw_HandleKeys?relay                   6
     ??zclSampleSw_ProcessIdentifyTimeChange?relay    6
     ??zclSampleSw_BasicResetCB?relay                 6
     ??zclSampleSw_IdentifyCB?relay                   6
     ??zclSampleSw_IdentifyQueryRspCB?relay           6

 
 903 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  38 bytes in segment XDATA_I
  38 bytes in segment XDATA_ID
  13 bytes in segment XDATA_Z
 
 983 bytes of CODE  memory
  51 bytes of XDATA memory

Errors: none
Warnings: none
